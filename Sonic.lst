 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 1 - 7/13/2025 17:28:33


       1/       0 :                     	cpu 68000
       2/       0 :                     	
       3/       0 :                     	supmode on	; We don't need warnings about privileged instructions
       4/       0 :                     
       5/       0 :                     	listing purecode
       6/       0 :                     	
       7/       0 :                     	;include "ComplierMacros.asm" unused
       8/       0 :                     	include "MegaDriveMacros.asm"
(1)    1/       0 :                     ; ---------------------------------------------------------------------------
(1)    2/       0 :                     ; Macros to define text based on VRAM tiles
(1)    3/       0 :                     ; ---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 :                     chars function c1,c2,((c1-$20)<<16)|(c2-$20)
(1)    6/       0 :                     char function c,(c-$20)
(1)    7/       0 :                     
(1)    8/       0 :                     dfntxt: macro string
(1)    9/       0 :                     i	set	0
(1)   10/       0 :                     	while i < strlen(string)
(1)   11/       0 :                     	dc.b	(substr(string, i, 1) - $20)
(1)   12/       0 :                     i	set i + 1
(1)   13/       0 :                     	endm
(1)   14/       0 :                     	endm
(1)   15/       0 :                     
(1)   16/       0 :                     ; ---------------------------------------------------------------------------
(1)   17/       0 :                     ; Macros to set VDP memory addresses, spaces and to build DMA commands
(1)   18/       0 :                     ; Taken from flamewing's Mega Drive DMA macros on GitHub
(1)   19/       0 :                     ; ---------------------------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 :                     vdpCommand function address,type,((address&$3FFF)<<16)|((address&$C000)>>14)|(type)
(1)   22/       0 :                     
(1)   23/       0 :                     setRAMAddress: macro address, type, VDPControlPort
(1)   24/       0 :                     	move.l  #vdpCommand(address,type),VDPControlPort
(1)   25/       0 :                     	endm
(1)   26/       0 :                     
(1)   27/       0 :                     vdpSetVideoAddress: macro address, VDPControlPort
(1)   28/       0 :                         setRAMAddress	address, VRAM, VDPControlPort
(1)   29/       0 :                     	endm
(1)   30/       0 :                     	
(1)   31/       0 :                     vdpSetColorAddress: macro address, VDPControlPort
(1)   32/       0 :                     	setRAMAddress	address, CRAM, VDPControlPort
(1)   33/       0 :                     	endm
(1)   34/       0 :                     
(1)   35/       0 :                     vdpSetVerticalScrollAddress: macro address, VDPControlPort
(1)   36/       0 :                         setRAMAddress	address, VSRAM, VDPControlPort
(1)   37/       0 :                     	endm
(1)   38/       0 :                     
(1)   39/       0 :                     
(1)   40/       0 :                     vdpSetVideoSpace: macro offset, VDPControlPort
(1)   41/       0 :                         move.l  #(((offset*32)&$3FFF)<<16)|(((offset*32)&$C000)>>14)|(VRAM),VDPControlPort
(1)   42/       0 :                     	endm
(1)   43/       0 :                     	
(1)   44/       0 :                     vdpSetColorSpace: macro offset, VDPControlPort
(1)   45/       0 :                     	move.l  #(((offset*2)&$3FFF)<<16)|(((offset*2)&$C000)>>14)|(CRAM),VDPControlPort
(1)   46/       0 :                     	endm
(1)   47/       0 :                     
(1)   48/       0 :                     dmaCommand function address,type,((address&$3FFF)<<16)|((address&$C000)>>14)|(type|$80)
(1)   49/       0 :                     dmaSource function address,((address>>1)&$7FFFFF)
(1)   50/       0 :                     dmaLength function length,((length>>1)&$7FFF)
(1)   51/       0 :                     dmaCommandLength function length,((VDPREG_DMALEN_H|((length&$FF00)>>8))<<16)|($9300|(length&$FF))
(1)   52/       0 :                     dmaCommandSrcLow function source,((VDPREG_DMASRC_M|((source&$FF00)>>8))<<16)|($9500|(source&$FF))
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(MegaDriveMacros.asm) - Page 2 - 7/13/2025 17:28:33


(1)   53/       0 :                     dmaCommandSrcHigh function source,VDPREG_DMASRC_H|(((source&$FF0000)>>16)&$7F)
(1)   54/       0 :                     
(1)   55/       0 :                     ; Tells the VDP to copy a region of 68k memory to VRAM or CRAM or VSRAM.
(1)   56/       0 :                     dma68kToVDP macro src, dest, length, type, bswap, VDPControlPort
(1)   57/       0 :                     	if MOMPASS>1
(1)   58/       0 :                     		if ((src)&1)<>0
(1)   59/       0 :                     			fatal "DMA is transferring from odd source $\{src}! This will transfer the wrong data, because the VDP ignores the low bit of source address. Please align the data to an even address."
(1)   60/       0 :                     		endif
(1)   61/       0 :                     		if ((dest)&1)<>0
(1)   62/       0 :                     			if ~~(type==VRAM)
(1)   63/       0 :                     				fatal "DMA is transferring to odd destination $\{dest}! This is ignored on real hardware for CRAM and VSRAM, and may behave inconsistently on emulators. Please ensure that you transfer to even destinations only."
(1)   64/       0 :                     			else
(1)   65/       0 :                     				fatal "DMA is transferring to odd destination $\{dest}! This will byte-swap the data copied. If you want to do this, then set the last parameter of the macro to 1 instead."
(1)   66/       0 :                     			endif
(1)   67/       0 :                     		endif
(1)   68/       0 :                     		if ((length)&1)<>0
(1)   69/       0 :                     			fatal "DMA is transferring an odd number of bytes $\{length}! DMA can only transfer an even number of bytes."
(1)   70/       0 :                     		endif
(1)   71/       0 :                     		if (length)==0
(1)   72/       0 :                     			fatal "DMA is transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB (131072) instead."
(1)   73/       0 :                     		endif
(1)   74/       0 :                     		if (((src)+(length)-1)>>17)<>((src)>>17)
(1)   75/       0 :                     			fatal "DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
(1)   76/       0 :                     		endif
(1)   77/       0 :                     	endif
(1)   78/       0 :                     	if ~~(bswap)
(1)   79/       0 :                     		set	.c,0
(1)   80/       0 :                     	else
(1)   81/       0 :                     		if ~~(type==VRAM)
(1)   82/       0 :                     			fatal "Only VRAM supports byte-swap on DMA."
(1)   83/       0 :                     		endif
(1)   84/       0 :                     		set	.c,1
(1)   85/       0 :                     	endif
(1)   86/       0 :                     	move.l	#dmaCommandLength(dmaLength(length)),VDPControlPort
(1)   87/       0 :                     	move.l	#dmaCommandSrcLow(dmaSource(src)),VDPControlPort
(1)   88/       0 :                     	move.l	#(dmaCommandSrcHigh(dmaSource(src))<<16)|((dmaCommand((dest)|.c,type)>>16)&$FFFF),VDPControlPort
(1)   89/       0 :                     	move.w	#(dmaCommand((dest)|.c,type)&$FFFF),VDPControlPort
(1)   90/       0 :                         endm
(1)   91/       0 :                     
(1)   92/       0 :                     ; Tells the VDP to fill a region of VRAM with a certain byte.
(1)   93/       0 :                     ; VRAM fill works like this: the write to the data port happens as normal; that is: 
(1)   94/       0 :                     ; * the high byte is written to address^1
(1)   95/       0 :                     ; * the low byte is written to address
(1)   96/       0 :                     ; Then, the remainder of the fill goes like:
(1)   97/       0 :                     ; * the address is incremented by the autoincrement register value
(1)   98/       0 :                     ; * high byte of word written to data port is written to address^1
(1)   99/       0 :                     ; * repeat until done
(1)  100/       0 :                     ; For an even target address, this means:
(1)  101/       0 :                     ; * the high byte is written to address+1
(1)  102/       0 :                     ; * the low byte is written to address
(1)  103/       0 :                     ; * the high byte is written to address (overwrites previous write)
(1)  104/       0 :                     ; * the high byte is written to address+3
(1)  105/       0 :                     ; * the high byte is written to address+2
(1)  106/       0 :                     ; * etc.
(1)  107/       0 :                     ; For an odd target address, this means:
(1)  108/       0 :                     ; * the high byte is written to address
(1)  109/       0 :                     ; * the low byte is written to address+1
(1)  110/       0 :                     ; * the high byte is written to address+3
(1)  111/       0 :                     ; * the high byte is written to address+2
(1)  112/       0 :                     ; * etc.
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(MegaDriveMacros.asm) - Page 3 - 7/13/2025 17:28:33


(1)  113/       0 :                     ; This allows reducing the length of the fill by 1.
(1)  114/       0 :                     ; It is possible to fill to CRAM and to VSRAM, but it is buggy,
(1)  115/       0 :                     ; and not emulated in most emulators.
(1)  116/       0 :                     
(1)  117/       0 :                     dmaFillVRAM macro byte, address, length, VDPControlPort, VDPDataPort
(1)  118/       0 :                     	if MOMPASS>1
(1)  119/       0 :                     		if ((address)&1)<>0
(1)  120/       0 :                     			fatal "DMA is filling an odd destination $\{address}! This will cause a spurious write to the address immediately before. Please ensure you fill starting at even addresses only."
(1)  121/       0 :                     		endif
(1)  122/       0 :                     		if (length)==0
(1)  123/       0 :                     			fatal "DMA is filling 0 bytes (becomes a 64kB fill). If you really mean it, pass 64kB (65536) instead."
(1)  124/       0 :                     		endif
(1)  125/       0 :                     	endif
(1)  126/       0 :                     	
(1)  127/       0 :                     	move.l	#dmaCommandLength(2*(length-2)),VDPControlPort
(1)  128/       0 :                     	move.l	#(VDPREG_INCR|1)<<16|(VDPREG_DMASRC_H|$80),VDPControlPort ; VRAM pointer increment: $0001, VRAM fill
(1)  129/       0 :                     	; Forcing the low bit of address to be 1, as described before.
(1)  130/       0 :                     	move.l	#dmaCommand((address)|1,VRAM),VDPControlPort
(1)  131/       0 :                     	move.w	#((byte)<<8)|(byte),VDPDataPort
(1)  132/       0 :                     .wait:
(1)  133/       0 :                     	move.w	(a0),d2
(1)  134/       0 :                     	btst	#1,d2
(1)  135/       0 :                     	bne.s	.wait	; busy loop until the VDP is finished filling
(1)  136/       0 :                     	move.w	#(VDPREG_INCR)|2,(a0) ; VRAM pointer increment back to 2
(1)  137/       0 :                         endm
(1)  138/       0 :                     	
(1)  139/       0 :                     ; Tells the VDP to copy from a region of VRAM to another.
(1)  140/       0 :                     dmaCopyVRAM macro src, dest, length, VDPControlPort
(1)  141/       0 :                     	if MOMPASS>1
(1)  142/       0 :                     		if (length)==0
(1)  143/       0 :                     			fatal "DMA is copying 0 bytes (becomes a 64kB copy). If you really mean it, pass 64kB (65536) instead."
(1)  144/       0 :                     		endif
(1)  145/       0 :                     	endif
(1)  146/       0 :                     	move.l	#dmaCommandLength(length),VDPControlPort
(1)  147/       0 :                     	move.l	#dmaCommandSrcLow(src),VDPControlPort
(1)  148/       0 :                     	move.l	#(VDPREG_INCR|1)<<16|(VDPREG_DMASRC_H|$C0),VDPControlPort ; VRAM pointer increment: $0001, VRAM copy
(1)  149/       0 :                     	move.l	#dmaCommand(dest,VRAM),VDPControlPort
(1)  150/       0 :                         endm
(1)  151/       0 :                     
(1)  152/       0 :                     	
(1)  153/       0 :                     vdpCoordinates function x,y,vdpCommand((PLANEA_ADDR)|(y*($40*2)+x*2),VRAM)
(1)  154/       0 :                     
(1)  155/       0 :                     	
(1)  156/       0 :                     VRAMCoordinates: macro x, y
(1)  157/       0 :                     address set (PLANEA_ADDR)|(y*($40*2)+x*2)
(1)  158/       0 :                     	dc.l	((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  159/       0 :                     	endm
(1)  160/       0 :                     
(1)  161/       0 :                     ; ---------------------------------------------------------------------------
(1)  162/       0 :                     ; More efficient instructions
(1)  163/       0 :                     ; ---------------------------------------------------------------------------
(1)  164/       0 :                     
(1)  165/       0 :                     addaq: macro value,register
(1)  166/       0 :                     	if (value > $7FFF)
(1)  167/       0 :                     		fatal "operand must be in range 1..$7FFF"
(1)  168/       0 :                     	endif
(1)  169/       0 :                     	lea value(register),register
(1)  170/       0 :                     	endm
(1)  171/       0 :                     	
(1)  172/       0 :                     subaq: macro value,register
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(MegaDriveMacros.asm) - Page 4 - 7/13/2025 17:28:33


(1)  173/       0 :                     	if (value > $7FFF)
(1)  174/       0 :                     		fatal "operand must be in range 1..$7FFF"
(1)  175/       0 :                     	endif
(1)  176/       0 :                     	lea -value(register),register
(1)  177/       0 :                     	endm
       9/       0 :                     	include "Constants.asm"
(1)    1/       0 :                     ; Memory spaces
(1)    2/       0 : =$FF0000            WRAM_ADDR:	equ $FF0000		; Work memory starting address
(1)    3/       0 : =$A10009            JOY_CTRL:	equ $A10009		; 1P control port
(1)    4/       0 : =$A10003            JOY_DATA:	equ $A10003   	; 1P data port
(1)    5/       0 : =$0                 SYS_STACK:	equ $000000
(1)    6/       0 : =$FF0000            REG_DUMP:	equ $FF0000
(1)    7/       0 : =$FF0042            REG_PREFIXES:	equ $FF0042
(1)    8/       0 :                     
(1)    9/       0 :                     ; Various memory space sizes in bytes
(1)   10/       0 : =$10000             WRAM_SIZE: 	equ 65536
(1)   11/       0 : =$10000             VRAM_SIZE:	equ 65536
(1)   12/       0 : =$50                VSRAM_SIZE:	equ 80
(1)   13/       0 : =$80                CRAM_SIZE:	equ 128
(1)   14/       0 :                     
(1)   15/       0 :                     ; VDP memory spaces
(1)   16/       0 : =$C00000            VDP_DATA:    	equ $C00000		; VDP data port
(1)   17/       0 : =$C00004            VDP_CTRL:    	equ $C00004		; VDP control port
(1)   18/       0 : =$C00008            VDP_HVCOUNTER:  equ $C00008		; H/V counter
(1)   19/       0 :                     
(1)   20/       0 : =$40000000          VRAM:	equ	$40000000	; Video memory address control
(1)   21/       0 : =$40000010          VSRAM:	equ $40000010	; Vertical scroll memory address control
(1)   22/       0 : =$C0000000          CRAM: 	equ $C0000000	; Color memory address control
(1)   23/       0 :                     
(1)   24/       0 : =$40000080          VRAM_DMA_CMD:   equ $40000080	; DMA VRAM control
(1)   25/       0 : =$40000090          VSRAM_DMA_CMD:  equ $40000090	; DMA VSRAM control
(1)   26/       0 : =$C0000080          CRAM_DMA_CMD:   equ $C0000080	; DMA CRAM control
(1)   27/       0 :                     
(1)   28/       0 : =$E000              PLANEA_ADDR:	equ $E000		; Plane A name table address
(1)   29/       0 : =$FFFF              PLANEB_ADDR:	equ $FFFF		; Plane B name table address
(1)   30/       0 : =$FFFF              SPRITE_ADDR:	equ $FFFF		; Sprite name table address
(1)   31/       0 : =$FFFF              WINDOW_ADDR:	equ $FFFF		; Window plane name table address
(1)   32/       0 : =$FFFF              HSCROLL_ADDR:	equ $FFFF		; Plane x coordinate
(1)   33/       0 :                     
(1)   34/       0 :                     ; VDP registers
(1)   35/       0 : =$8000              VDPREG_MODE1:     equ $8000  ; Mode register #1
(1)   36/       0 : =$8100              VDPREG_MODE2:     equ $8100  ; Mode register #2
(1)   37/       0 : =$8B00              VDPREG_MODE3:     equ $8B00  ; Mode register #3
(1)   38/       0 : =$8C00              VDPREG_MODE4:     equ $8C00  ; Mode register #4
(1)   39/       0 :                     
(1)   40/       0 : =$8200              VDPREG_PLANEA:    equ $8200  ; Plane A table address
(1)   41/       0 : =$8400              VDPREG_PLANEB:    equ $8400  ; Plane B table address
(1)   42/       0 : =$8500              VDPREG_SPRITE:    equ $8500  ; Sprite table address
(1)   43/       0 : =$8300              VDPREG_WINDOW:    equ $8300  ; Window table address
(1)   44/       0 : =$8D00              VDPREG_HSCROLL:   equ $8D00  ; HScroll table address
(1)   45/       0 :                     
(1)   46/       0 : =$9000              VDPREG_SIZE:      equ $9000  ; Plane A and B size
(1)   47/       0 : =$9100              VDPREG_WINX:      equ $9100  ; Window X split position
(1)   48/       0 : =$9200              VDPREG_WINY:      equ $9200  ; Window Y split position
(1)   49/       0 : =$8F00              VDPREG_INCR:      equ $8F00  ; Autoincrement
(1)   50/       0 : =$8700              VDPREG_BGCOL:     equ $8700  ; Background color
(1)   51/       0 : =$8A00              VDPREG_HRATE:     equ $8A00  ; HBlank interrupt rate
(1)   52/       0 :                     
(1)   53/       0 : =$9300              VDPREG_DMALEN_L:  equ $9300  ; DMA length (low)
(1)   54/       0 : =$9400              VDPREG_DMALEN_H:  equ $9400  ; DMA length (high)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(Constants.asm) - Page 5 - 7/13/2025 17:28:33


(1)   55/       0 : =$9500              VDPREG_DMASRC_L:  equ $9500  ; DMA source (low)
(1)   56/       0 : =$9600              VDPREG_DMASRC_M:  equ $9600  ; DMA source (mid)
(1)   57/       0 : =$9700              VDPREG_DMASRC_H:  equ $9700  ; DMA source (high)
(1)   58/       0 :                     
(1)   59/       0 :                     ; VDP name table addresses
(1)   60/       0 : =$0                 NOFLIP: equ $0000  ; Don't flip (default)
(1)   61/       0 : =$800               HFLIP:  equ $0800  ; Flip horizontally
(1)   62/       0 : =$1000              VFLIP:  equ $1000  ; Flip vertically
(1)   63/       0 : =$1800              HVFLIP: equ $1800  ; Flip both ways (180° flip)
(1)   64/       0 :                     
(1)   65/       0 : =$0                 PAL0:   equ $0000  ; Use palette 0 (default)
(1)   66/       0 : =$2000              PAL1:   equ $2000  ; Use palette 1
(1)   67/       0 : =$4000              PAL2:   equ $4000  ; Use palette 2
(1)   68/       0 : =$6000              PAL3:   equ $6000  ; Use palette 3
(1)   69/       0 :                     
(1)   70/       0 : =$0                 LOPRI:  equ $0000  ; Low priority (default)
(1)   71/       0 : =$8000              HIPRI:  equ $8000  ; High priority
(1)   72/       0 :                     
(1)   73/       0 :                     ; Palette data sizes
(1)   74/       0 : =$60                PAT_BodyFont_SIZE_T:	equ 96
(1)   75/       0 : =$C00               PAT_BodyFont_SIZE_B:	equ 96*32
(1)   76/       0 :                     
(1)   77/       0 :                     ; Z80 control
(1)   78/       0 : =$A00000            Z80Ram:     equ $A00000  ; Z80 RAM start
(1)   79/       0 : =$A11100            Z80BusReq:  equ $A11100  ; Z80 bus request line
(1)   80/       0 : =$A11200            Z80Reset:   equ $A11200  ; Z80 reset line
(1)   81/       0 :                     
(1)   82/       0 :                     ; Controller labels
(1)   83/       0 : =$5                 JOY_C:	equ 5
(1)   84/       0 : =$4                 JOY_B:	equ 4
(1)   85/       0 : =$3                 JOY_R:	equ 3
(1)   86/       0 : =$2                 JOY_L:	equ 2
(1)   87/       0 : =$1                 JOY_D:	equ 1
(1)   88/       0 : =$0                 JOY_U:	equ 0
      10/       0 :                     
      11/       0 :                     	org 0
      12/       0 :                     	
      13/       0 :                     ROM_Start																	; Error codes ($AAxx)
      14/       0 :                     Vectors:
      15/       0 : 0000 0000           		dc.l SYS_STACK			; Initial stack pointer value (SP value)
      16/       4 : 0000 216A           		dc.l EntryPoint			; Start of program (PC value)
      17/       8 : 0000 0200           		dc.l BusError			; Bus error									($2)
      18/       C : 0000 0214           		dc.l AddressError		; Address error 							($3)
      19/      10 : 0000 0228           		dc.l IllegalInstruction	; Illegal instruction						($4)
      20/      14 : 0000 023C           		dc.l DivisionByZero		; Division by zero							($5)
      21/      18 : 0000 0250           		dc.l CHKException		; CHK exception								($6)
      22/      1C : 0000 0264           		dc.l TRAPVException		; TRAPV exception 							($7)
      23/      20 : 0000 0278           		dc.l PrivilegeViolation	; Privilege violation						($8)
      24/      24 : 0000 028A           		dc.l TRACEException		; TRACE exception							($9)
      25/      28 : 0000 029C           		dc.l Line1010Emu		; Line-A emulator							($A)
      26/      2C : 0000 02AE           		dc.l Line1111Emu		; Line-F emulator 							($B)
      27/      30 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      28/      34 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      29/      38 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      30/      3C : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      31/      40 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      32/      44 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      33/      48 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      34/      4C : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      35/      50 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 6 - 7/13/2025 17:28:33


      36/      54 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      37/      58 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      38/      5C : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      39/      60 : 0000 02C0           		dc.l SpuriousException	; Spurious exception						($C)
      40/      64 : 0000 02E4           		dc.l GenericError		; IRQ level 1
      41/      68 : 0000 02E4           		dc.l GenericError		; IRQ level 2
      42/      6C : 0000 02E4           		dc.l GenericError		; IRQ level 3 
      43/      70 : 0000 02E4           		dc.l GenericError		; IRQ level 4 (horizontal retrace interrupt)
      44/      74 : 0000 02E4           		dc.l GenericError		; IRQ level 5
      45/      78 : 0000 04F2           		dc.l VDP_VBlankInt		; IRQ level 6 (vertical retrace interrupt)
      46/      7C : 0000 02E4           		dc.l GenericError		; IRQ level 7
      47/      80 : 0000 02E4           		dc.l GenericError		; TRAP #00 exception						($D)
      48/      84 : 0000 02E4           		dc.l GenericError		; TRAP #01 exception
      49/      88 : 0000 02E4           		dc.l GenericError		; TRAP #02 exception
      50/      8C : 0000 02E4           		dc.l GenericError		; TRAP #03 exception
      51/      90 : 0000 02E4           		dc.l GenericError		; TRAP #04 exception
      52/      94 : 0000 02E4           		dc.l GenericError		; TRAP #05 exception
      53/      98 : 0000 02E4           		dc.l GenericError		; TRAP #06 exception
      54/      9C : 0000 02E4           		dc.l GenericError		; TRAP #07 exception
      55/      A0 : 0000 02E4           		dc.l GenericError		; TRAP #08 exception
      56/      A4 : 0000 02E4           		dc.l GenericError		; TRAP #09 exception
      57/      A8 : 0000 02E4           		dc.l GenericError		; TRAP #10 exception
      58/      AC : 0000 02E4           		dc.l GenericError		; TRAP #11 exception
      59/      B0 : 0000 02E4           		dc.l GenericError		; TRAP #12 exception
      60/      B4 : 0000 02E4           		dc.l GenericError		; TRAP #13 exception
      61/      B8 : 0000 02E4           		dc.l GenericError		; TRAP #14 exception
      62/      BC : 0000 02E4           		dc.l GenericError		; TRAP #15 exception
      63/      C0 : 0000 02E4           		dc.l GenericError		; Unused (reserved)							($E)
      64/      C4 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      65/      C8 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      66/      CC : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      67/      D0 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      68/      D4 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      69/      D8 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      70/      DC : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      71/      E0 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      72/      E4 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      73/      E8 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      74/      EC : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      75/      F0 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      76/      F4 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      77/      F8 : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      78/      FC : 0000 02E4           		dc.l GenericError		; Unused (reserved)
      79/     100 :                     		
      80/     100 :                     Header_Start:
      81/     100 : 5345 4741 204D 4547 		dc.b "SEGA MEGA DRIVE",$20					; "$20" is padding
              108 : 4120 4452 4956 4520
      82/     110 : 2843 2942 524F 3020 		dc.b "(C)BRO0 2024.OCT"						; Copyright(-ish), release year and month
              118 : 3230 3234 2E4F 4354
      83/     120 : 5072 6573 656E 7461 		dc.b "Presentazione sistemi: 68k e x86"		; Domestic name (it's Italian I know)
              128 : 7A69 6F6E 6520 7369
              130 : 7374 656D 693A 2036
              138 : 386B 2065 2078 3836
      84/     140 : 2020 2020 2020 2020 		dc.b "                "						; padding
              148 : 2020 2020 2020 2020
      85/     150 : 5072 6573 656E 7461 		dc.b "Presentazione sistemi: 68k e x86"		; Overseas name (in Italian as well)
              158 : 7A69 6F6E 6520 7369
              160 : 7374 656D 693A 2036
              168 : 386B 2065 2078 3836
      86/     170 : 2020 2020 2020 2020 		dc.b "                "						; padding
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 7 - 7/13/2025 17:28:33


              178 : 2020 2020 2020 2020
      87/     180 : 4149 2D32 3334 3536 		dc.b "AI-23456786-00"						; Serial number (I mashed the keyboard for this)
              188 : 3738 362D 3030   
      88/     18E : 0000                		dc.w $0000									; Empty checksum
      89/     190 : 4A                  		dc.b "J"									; Joypad type
      90/     191 : 2020 2020 2020 2020 		dc.b "               "						; padding
              199 : 2020 2020 2020 20
      91/     1A0 : 0000 0000           		dc.l ROM_Start								; Start address of ROM
      92/     1A4 : 0000 22E8           		dc.l ROM_End								; End address of ROM
      93/     1A8 : 00FF 0000           		dc.l $FF0000								; Start address of WRAM
      94/     1AC : 00FF FFFF           		dc.l $FFFFFF 								; End address of WRAM
      95/     1B0 : 2020 2020 2020 2020 		dc.b "                                                                "	; more padding
              1B8 : 2020 2020 2020 2020
              1C0 : 2020 2020 2020 2020
              1C8 : 2020 2020 2020 2020
              1D0 : 2020 2020 2020 2020
              1D8 : 2020 2020 2020 2020
              1E0 : 2020 2020 2020 2020
              1E8 : 2020 2020 2020 2020
      96/     1F0 : 4520 20             		dc.b "E  "									; Region support (PAL only)
      97/     1F3 : 2020 2020 2020 2020 		dc.b "             "						; padding for reserved space
              1FB : 2020 2020 20      
      98/     200 :                     
      99/     200 :                     BusError:
     100/     200 : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP	; we need to force the dump address
     101/     208 : 40F9 00FF 0040      	move sr,REG_DUMP+$40	; dump the status register also
     102/     20E : 7E12                	moveq	#2+$10,d7
     103/     210 : 6000 00F4           	bra.w	VDP_BSOD
     104/     214 :                     
     105/     214 :                     AddressError:
     106/     214 : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     107/     21C : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     108/     222 : 7E13                	moveq	#3+$10,d7
     109/     224 : 6000 00E0           	bra.w	VDP_BSOD
     110/     228 :                     
     111/     228 :                     IllegalInstruction:
     112/     228 : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     113/     230 : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     114/     236 : 7E14                	moveq	#4+$10,d7
     115/     238 : 6000 00CC           	bra.w 	VDP_BSOD
     116/     23C :                     
     117/     23C :                     DivisionByZero:
     118/     23C : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     119/     244 : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     120/     24A : 7E15                	moveq	#5+$10,d7
     121/     24C : 6000 00B8           	bra.w 	VDP_BSOD
     122/     250 :                     	
     123/     250 :                     CHKException:
     124/     250 : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     125/     258 : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     126/     25E : 7E16                	moveq	#6+$10,d7
     127/     260 : 6000 00A4           	bra.w	VDP_BSOD
     128/     264 :                     	
     129/     264 :                     TRAPVException:
     130/     264 : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     131/     26C : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     132/     272 : 7E17                	moveq	#7+$10,d7
     133/     274 : 6000 0090           	bra.w	VDP_BSOD
     134/     278 :                     	
     135/     278 :                     PrivilegeViolation:
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 8 - 7/13/2025 17:28:33


     136/     278 : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     137/     280 : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     138/     286 : 7E18                	moveq	#8+$10,d7
     139/     288 : 607C                	bra.s	VDP_BSOD
     140/     28A :                     	
     141/     28A :                     TRACEException:
     142/     28A : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     143/     292 : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     144/     298 : 7E19                	moveq	#9+$10,d7
     145/     29A : 606A                	bra.s	VDP_BSOD
     146/     29C :                     
     147/     29C :                     Line1010Emu:
     148/     29C : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     149/     2A4 : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     150/     2AA : 7E1A                	moveq	#$A+$10,d7
     151/     2AC : 6058                	bra.s	VDP_BSOD
     152/     2AE :                     	
     153/     2AE :                     Line1111Emu:
     154/     2AE : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     155/     2B6 : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     156/     2BC : 7E1B                	moveq	#$B+$10,d7
     157/     2BE : 6046                	bra.s	VDP_BSOD
     158/     2C0 :                     	
     159/     2C0 :                     SpuriousException:
     160/     2C0 : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     161/     2C8 : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     162/     2CE : 7E1C                	moveq	#$C+$10,d7
     163/     2D0 : 6034                	bra.s	VDP_BSOD
     164/     2D2 :                     	
     165/     2D2 :                     TRAPxxException:
     166/     2D2 : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     167/     2DA : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     168/     2E0 : 7E1D                	moveq	#$D+$10,d7
     169/     2E2 : 6022                	bra.s	VDP_BSOD
     170/     2E4 :                     	
     171/     2E4 :                     GenericError:
     172/     2E4 : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     173/     2EC : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     174/     2F2 : 7E1E                	moveq	#$E+$10,d7
     175/     2F4 : 6010                	bra.s	VDP_BSOD
     176/     2F6 :                     	
     177/     2F6 :                     ManualCrash:
     178/     2F6 : 48F9 FFFF 00FF 0000 	movem.l	d0-a7,REG_DUMP
     179/     2FE : 40F9 00FF 0040      	move sr,REG_DUMP+$40
     180/     304 : 7E1F                	moveq	#$F+$10,d7
     181/     306 :                     
     182/     306 :                     VDP_BSOD:
     183/     306 : 4FF8 0000           	lea	SYS_STACK,sp	; realign the stack pointer
     184/     30A : 46FC 2700           	move #$2700,sr		; disable interrupts
     185/     30E : 5C39 00FF 008D      	addq.b	#6,REG_PREFIXES+$4B	; add the value back to sp dump value
     186/     314 : 41F9 00C0 0004      	lea VDP_CTRL,a0		; reset a0
     187/     31A : 43F9 00C0 0000      	lea VDP_DATA,a1		; reset a1
     188/     320 : 7400                	moveq	#0,d2		; clear slow down timer for CPU_ClearScreen
     189/     322 : 263C 0000 00FF      	move.l	#$FF,d3		; update the slow down timer for CPU_ClearScreen
     190/     328 :                     
     191/     328 :                     ; ---------------------------------------------------------------------------
     192/     328 :                     ; Subroutine to	clear the screen using CPU
     193/     328 :                     ; ---------------------------------------------------------------------------
     194/     328 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     195/     328 :                     	
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 9 - 7/13/2025 17:28:33


     196/     328 :                     CPU_ClearScreen:
     197/     328 : (MACRO)[0]          	vdpSetVideoAddress PLANEA_ADDR,(a0)
     197/     328 :  (MACRO-2)[1]           setRAMAddress       PLANEA_ADDR, VRAM, (a0)
     197/     328 : 20BC 6000 0003              move.l  #vdpCommand(PLANEA_ADDR,VRAM),(a0)
     198/     32E : 303C 03FF           	move.w	#($1000/4)-1,d0	; clear the entire plane A ($1000 bytes)
     199/     332 : 7200                	moveq	#0,d1		; clear d1
     200/     334 :                     .clear_screen:
     201/     334 : 2281                	move.l	d1,(a1)		; clear portion of screen by setting the background tiles
     202/     336 : 3403                	move.w	d3,d2		; update the slow down timer for CPU_Wait
     203/     338 : 6100 01AA           	bsr.w	CPU_Wait	; make the slow down effect
     204/     33C : 51C8 FFF6           	dbf d0,.clear_screen; keep clearing until done
     205/     340 :                     	
     206/     340 : 343C 2FFF           	move.w	#$2FFF,d2	; update the slow down timer
     207/     344 : 6100 019E           	bsr.w	CPU_Wait	; a bit of lag
     208/     348 :                     
     209/     348 :                     BlueScreen:
     210/     348 : (MACRO)[2]          	vdpSetColorSpace 0,(a0)
     210/     348 : 20BC C000 0000              move.l  #(((0*2)&$3FFF)<<16)|(((0*2)&$C000)>>14)|(CRAM),(a0)
     211/     34E : 22BC 0E00 0EEE      	move.l	#$0E000EEE,(a1)	; makes the background blue and the font white
     212/     354 :                     	
     213/     354 : 243C 0002 FFFF      	move.l	#$2FFFF,d2	; update the slow down timer
     214/     35A : 6100 0188           	bsr.w	CPU_Wait	; a bit of lag
     215/     35E :                     	
     216/     35E :                     CPU_Load_BodyFont:
     217/     35E : (MACRO)[3]          	vdpSetVideoAddress $0000,(a0)
     217/     35E :  (MACRO-2)[4]           setRAMAddress       $0000, VRAM, (a0)
     217/     35E : 20BC 4000 0000              move.l  #vdpCommand($0000,VRAM),(a0)
     218/     364 : 303C 0300           	move.w	#PAT_BodyFont_SIZE_B/4,d0
     219/     368 : 45F8 04F4           	lea	(PAT_BodyFont),a2
     220/     36C :                     	
     221/     36C :                     .load_font:
     222/     36C : 229A                	move.l	(a2)+,(a1)
     223/     36E : 51C8 FFFC           	dbf d0,.load_font
     224/     372 :                     
     225/     372 :                     ; ---------------------------------------------------------------------------
     226/     372 :                     ; Subroutine to	print on screen the first five strings (messages)
     227/     372 :                     ; ---------------------------------------------------------------------------
     228/     372 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     229/     372 :                     
     230/     372 :                     PrintMessages:	
     231/     372 : 45F8 212E           	lea Messages,a2		; points to the string address in the properties array
     232/     376 : 264A                	movea.l	a2,a3		; reset a5 (since we will write only in word operations)
     233/     378 : 7000                	moveq	#0,d0		; clear the length register (cycle counter)
     234/     37A : 7804                	moveq	#5-1,d4		; 5 strings to print (Message0 ~ Code)
     235/     37C :                     .setup_message:
     236/     37C : 3652                	move.w 	(a2),a3		; update the array of strings pointer
     237/     37E : 302A 0006           	move.w 	6(a2),d0	; get the next value into d0
     238/     382 : 904B                	sub.w	a3,d0		; get the length from doing the difference
     239/     384 : 5340                	subq.w	#1,d0		; dbf ends up with $FFFF
     240/     386 :                     	; get string screen position address and set the plane A accordingly
     241/     386 : 20AA 0002               move.l	2(a2),(a0)	; update the plane coordinates using fixed value
     242/     38A : 363C 07FF           	move.w	#$7FF,d3	; update the slow down timer for VDP_PrintText
     243/     38E : 6100 0144           	bsr.w	VDP_PrintText
     244/     392 :                     	
     245/     392 : 5C4A                	addq.w	#6,a2		; jump into next string (also skips the coordinates)
     246/     394 : 343C 1FFF           	move.w	#$1FFF,d2	; update the slow down timer
     247/     398 : 6100 014A           	bsr.w	CPU_Wait	; a bit of lag
     248/     39C : 51CC FFDE           	dbf d4,.setup_message
     249/     3A0 :                     	
     250/     3A0 : 343C 2FFF           	move.w	#$2FFF,d2	; update the slow down timer
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 10 - 7/13/2025 17:28:33


     251/     3A4 : 6100 013E           	bsr.w	CPU_Wait	; a bit of lag
     252/     3A8 :                     
     253/     3A8 :                     ; ---------------------------------------------------------------------------
     254/     3A8 :                     ; Subroutine to	print on screen the error code in hexadecimal
     255/     3A8 :                     ; ---------------------------------------------------------------------------
     256/     3A8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     257/     3A8 :                     
     258/     3A8 :                     PrintErrorCode
     259/     3A8 : 203C 0021 0021      	move.l	#chars('A','A'),d0
     260/     3AE : 2280                	move.l	d0,(a1)		; print "AA"
     261/     3B0 :                     	
     262/     3B0 : 1007                	move.b	d7,d0		; move error code to be "Ax"
     263/     3B2 :                     	
     264/     3B2 : 0C07 001A           	cmpi.b	#$A+$10,d7	; is the error code a letter?
     265/     3B6 : 6502                	blo.s	.continue	; if not do not align VRAM for letters
     266/     3B8 : 5E00                	addq.b	#7,d0		; align VRAM to print hexadecimal letters
     267/     3BA :                     .continue:
     268/     3BA : 2280                	move.l	d0,(a1)		; print the rest of the error code
     269/     3BC :                     	
     270/     3BC : 343C FFFF           	move.w	#$FFFF,d2	; update the slow down timer
     271/     3C0 : 6100 0122           	bsr.w	CPU_Wait	; a bit of lag
     272/     3C4 :                     
     273/     3C4 :                     ; ---------------------------------------------------------------------------
     274/     3C4 :                     ; Subroutine to	print on screen the error code in text
     275/     3C4 :                     ; ---------------------------------------------------------------------------
     276/     3C4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     277/     3C4 :                     
     278/     3C4 :                     PrintTextCode
     279/     3C4 : 45F8 214C           	lea TextCodes,a2	; load text codes array
     280/     3C8 : 0407 0012           	subi.b	#$10+2,d7	; align d7 (VRAM alignment + how error codes count by design)
     281/     3CC : E30F                	lsl.b	#1,d7		; update incrementer for word jumps
     282/     3CE : D4C7                	adda.w	d7,a2		; snipe the string address
     283/     3D0 : 3652                	move.w	(a2),a3		; update the array of strings pointer
     284/     3D2 : 302A 0002           	move.w	2(a2),d0	; get next string address
     285/     3D6 : 904B                	sub.w	a3,d0		; get the length from doing the difference
     286/     3D8 : 5340                	subq.w	#1,d0		; dbf ends up with $FFFF
     287/     3DA : 20BC 6384 0003      	move.l	#vdpCoordinates(2,7),(a0)	; set fixed text code position on screen
     288/     3E0 : 363C 08FF           	move.w	#$8FF,d3	; update the slow down timer for VDP_PrintText
     289/     3E4 : 6100 00EE           	bsr.w	VDP_PrintText
     290/     3E8 :                     	
     291/     3E8 : 343C FFFF           	move.w	#$FFFF,d2	; update the slow down timer
     292/     3EC : 6100 00F6           	bsr.w	CPU_Wait	; a bit of lag
     293/     3F0 :                     	
     294/     3F0 :                     ; ---------------------------------------------------------------------------
     295/     3F0 :                     ; Subroutine to	print on screen the register names (or prefixes)
     296/     3F0 :                     ; ---------------------------------------------------------------------------
     297/     3F0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     298/     3F0 :                     	
     299/     3F0 :                     PrintRegisterDump
     300/     3F0 :                     .print_message:
     301/     3F0 : 47F8 1E01           	lea	Message5,a3		; points to the string address directly
     302/     3F4 : 700E                	moveq	#15-1,d0	; this string is 15 characters long
     303/     3F6 : 20BC 6500 0003      	move.l	#vdpCoordinates(0,10),(a0)
     304/     3FC : 363C 0AFF           	move.w	#$AFF,d3	; update the slow down timer for VDP_PrintText
     305/     400 : 6100 00D2           	bsr.w	VDP_PrintText
     306/     404 : 343C 5FFF           	move.w	#$5FFF,d2	; update the slow down timer
     307/     408 : 6100 00DA           	bsr.w	CPU_Wait	; a bit of lag
     308/     40C :                     
     309/     40C : 7007                	moveq	#8-1,d0		; 8 registers to write
     310/     40E : 7C07                	moveq	#8-1,d6		; 8 digits to print
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 11 - 7/13/2025 17:28:33


     311/     410 : 7A00                	moveq	#0,d5
     312/     412 : 45F9 00FF 004C      	lea	(REG_PREFIXES+10),a2; start from this point to write down the prefixes
     313/     418 : 47F9 00FF 0000      	lea REG_DUMP,a3			; load register dump pointer
     314/     41E :                     	; write the prefixes in RAM in opposite order
     315/     41E : 253C 0010 0058      	move.l	#chars('0','x'),-(a2)
     316/     424 : 353C 001A           	move.w	#char(':'),-(a2)
     317/     428 : 253C 0044 0010      	move.l	#chars('d','0'),-(a2)
     318/     42E : 223C 6604 0003      	move.l	#vdpCoordinates(2,12),d1	; set on-screen register dump coordinates
     319/     434 :                     
     320/     434 :                     ;============================================================================
     321/     434 :                     
     322/     434 :                     .print_registers:
     323/     434 : 2081                	move.l	d1,(a0)		; update the plane coordinates
     324/     436 :                     
     325/     436 : 7604                	moveq	#5-1,d3		; 5 prefixes to print
     326/     438 :                     .print_prefix:
     327/     438 : 329A                	move.w	(a2)+,(a1)	; print register number
     328/     43A : 343C 0FFF           	move.w	#$FFF,d2	; update the slow down timer
     329/     43E : 6100 00A4           	bsr.w	CPU_Wait	; a bit of lag
     330/     442 : 51CB FFF4           	dbf d3,.print_prefix
     331/     446 :                     	
     332/     446 : (MACRO)[5]          	subaq	10,a2		; reposition a2 to the prefixes' start
     332/     446 : 45EA FFF6                   lea -10(a2),a2
     333/     44A :                     	
     334/     44A :                     ; ---------------------------------------------------------------------------
     335/     44A :                     ; Subroutine to	print on screen the register values from dump
     336/     44A :                     ; ---------------------------------------------------------------------------
     337/     44A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     338/     44A :                     
     339/     44A : 2606                    move.l	d6,d3		; update the digit counter
     340/     44C : 281B                	move.l	(a3)+,d4	; get the register dumped value
     341/     44E :                     .print_value:
     342/     44E : E99C                	rol.l	#4,d4		; rotate the digits on the left
     343/     450 : 1A04                	move.b	d4,d5		; move the digits in ascending order to d5
     344/     452 : 0205 000F           	andi.b	#$F,d5		; remove the other digit
     345/     456 :                     	
     346/     456 : 0C05 000A           	cmpi.b	#$A,d5		; is the digit a letter?
     347/     45A : 6502                	blo.s	.continue	; if not do not align VRAM for letters
     348/     45C : 5E05                	addq.b	#7,d5		; align VRAM to print letters
     349/     45E :                     .continue:
     350/     45E : 0605 0010           	addi.b	#$10,d5		; align VRAM to print numbers or letters
     351/     462 : 3285                	move.w	d5,(a1)		; update the plane A
     352/     464 :                     	
     353/     464 : 51CB FFE8           	dbf d3,.print_value	; loop until printed all digits
     354/     468 :                     	
     355/     468 : 5239 00FF 0045      	addq.b	#1,REG_PREFIXES+3	; increment register number character
     356/     46E : 0681 0080 0000      	addi.l	#$800000,d1			; new line by adding coordinates
     357/     474 :                     	
     358/     474 : 343C 1FFF           	move.w	#$1FFF,d2			; update the slow down timer
     359/     478 : 6100 006A           	bsr.w	CPU_Wait			; a bit of lag
     360/     47C : 51C8 FFB6           	dbf d0,.print_registers
     361/     480 :                     
     362/     480 :                     .print_address_registers
     363/     480 : B7FC 00FF 0020      	cmpa.l	#REG_DUMP+$20,a3	; has the VDP already printed the address registers?
     364/     486 : 621A                	bhi.s	.print_sp			; if yes, print stack pointer
     365/     488 : 7006                	moveq	#7-1,d0				; 7 registers to print
     366/     48A : 7C07                	moveq	#8-1,d6				; 8 digits to print
     367/     48C : 5739 00FF 0043      	subq.b	#3,REG_PREFIXES+1	; change prefix from 'd' to 'a'
     368/     492 : 5139 00FF 0045      	subq.b	#8,REG_PREFIXES+3	; restart the count from 0
     369/     498 : 223C 6626 0003      	move.l	#vdpCoordinates(19,12),d1	; update coordinates
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 12 - 7/13/2025 17:28:33


     370/     49E : 6000 FF94           	bra.w	.print_registers	; print address register dump
     371/     4A2 :                     	
     372/     4A2 :                     .print_sp:
     373/     4A2 : B7FC 00FF 003C      	cmpa.l	#REG_DUMP+$3C,a3	; has the VDP already printed the stack pointer?
     374/     4A8 : 620E                	bhi.s	.print_sr			; if yes, print the status register
     375/     4AA : 7000                	moveq	#1-1,d0				; 1 register to write
     376/     4AC : 7C07                	moveq	#8-1,d6				; 8 digits to print
     377/     4AE : 24BC 0053 0050      	move.l	#chars('s','p'),(a2); use "sp" prefix
     378/     4B4 : 6000 FF7E           	bra.w	.print_registers	; print sp
     379/     4B8 :                     	
     380/     4B8 :                     .print_sr:
     381/     4B8 : B7FC 00FF 0040      	cmpa.l	#REG_DUMP+$40,a3	; has the VDP already printed the stack pointer?
     382/     4BE : 622E                	bhi.s 	Halt_CPU			; if yes, stop the execution
     383/     4C0 : 7000                	moveq	#1-1,d0				; 1 register to write
     384/     4C2 : 7C03                	moveq	#4-1,d6				; 4 digits to print
     385/     4C4 : 24BC 0053 0052      	move.l	#chars('s','r'),(a2)		; use "sr" prefix
     386/     4CA : 223C 6B04 0003      	move.l	#vdpCoordinates(2,22),d1	; set fixed coordinates
     387/     4D0 : 6000 FF62           	bra.w	.print_registers
     388/     4D4 :                     	
     389/     4D4 :                     ; ---------------------------------------------------------------------------
     390/     4D4 :                     ; Subroutine to	draw text on screen (a3: string pointer, d0: length)
     391/     4D4 :                     ; ---------------------------------------------------------------------------
     392/     4D4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     393/     4D4 :                     
     394/     4D4 :                     VDP_PrintText:
     395/     4D4 : 7200                	moveq	#0,d1		; clear d1
     396/     4D6 :                     .update_display:
     397/     4D6 : 121B                	move.b 	(a3)+,d1	; move character to d1
     398/     4D8 : 3281                	move.w 	d1,(a1)		; no flip, palette 0, no priority
     399/     4DA : 2403                	move.l	d3,d2		; update the slow down timer for CPU_Wait
     400/     4DC : 6106                	bsr.s	CPU_Wait	; make the slow down effect
     401/     4DE : 51C8 FFF6           	dbf	d0,.update_display
     402/     4E2 : 4E75                	rts
     403/     4E4 :                     
     404/     4E4 :                     ; ---------------------------------------------------------------------------
     405/     4E4 :                     ; Subroutine to	hang the CPU for a given time (d2: timer)
     406/     4E4 :                     ; ---------------------------------------------------------------------------
     407/     4E4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     408/     4E4 :                     
     409/     4E4 :                     CPU_Wait:
     410/     4E4 : 0482 0000 0001      	subi.l	#1,d2		; purposefully using a slower instruction
     411/     4EA : 66F8                	bne.s	CPU_Wait	; wait until done (dbf subs only word-wise, which is not suitable)
     412/     4EC : 4E75                	rts
     413/     4EE :                     	
     414/     4EE :                     Halt_CPU:
     415/     4EE : 4E72 2700           	stop #$2700		; halt the CPU indefinitely
     416/     4F2 :                     
     417/     4F2 :                     ;---------------------------------------------------------------------------------
     418/     4F2 :                     
     419/     4F2 :                     VDP_VBlankInt:
     420/     4F2 : 4E73                	rte
     421/     4F4 :                     
     422/     4F4 :                     ;=================================================================================
     423/     4F4 :                     
     424/     4F4 :                     ; Assets section
     425/     4F4 :                     
     426/     4F4 :                     PAT_BodyFont: include "assets/Body Font.asm"
(1)    1/     4F4 :                     	; --- Tiles ---
(1)    2/     4F4 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 0)
(1)    3/     4F8 : 0000 0000           	dc.l	$00000000
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 13 - 7/13/2025 17:28:33


(1)    4/     4FC : 0000 0000           	dc.l	$00000000
(1)    5/     500 : 0000 0000           	dc.l	$00000000
(1)    6/     504 : 0000 0000           	dc.l	$00000000
(1)    7/     508 : 0000 0000           	dc.l	$00000000
(1)    8/     50C : 0000 0000           	dc.l	$00000000
(1)    9/     510 : 0000 0000           	dc.l	$00000000
(1)   10/     514 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 0)
(1)   11/     518 : 0001 1000           	dc.l	$00011000
(1)   12/     51C : 0001 1000           	dc.l	$00011000
(1)   13/     520 : 0001 1000           	dc.l	$00011000
(1)   14/     524 : 0001 1000           	dc.l	$00011000
(1)   15/     528 : 0000 0000           	dc.l	$00000000
(1)   16/     52C : 0001 1000           	dc.l	$00011000
(1)   17/     530 : 0000 0000           	dc.l	$00000000
(1)   18/     534 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 0)
(1)   19/     538 : 0110 0110           	dc.l	$01100110
(1)   20/     53C : 0110 0110           	dc.l	$01100110
(1)   21/     540 : 0110 0110           	dc.l	$01100110
(1)   22/     544 : 0000 0000           	dc.l	$00000000
(1)   23/     548 : 0000 0000           	dc.l	$00000000
(1)   24/     54C : 0000 0000           	dc.l	$00000000
(1)   25/     550 : 0000 0000           	dc.l	$00000000
(1)   26/     554 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 0)
(1)   27/     558 : 0110 0110           	dc.l	$01100110
(1)   28/     55C : 1111 1111           	dc.l	$11111111
(1)   29/     560 : 0110 0110           	dc.l	$01100110
(1)   30/     564 : 0110 0110           	dc.l	$01100110
(1)   31/     568 : 1111 1111           	dc.l	$11111111
(1)   32/     56C : 0110 0110           	dc.l	$01100110
(1)   33/     570 : 0000 0000           	dc.l	$00000000
(1)   34/     574 : 0001 1000           	dc.l	$00011000	;	Tile (col 4, row 0)
(1)   35/     578 : 0011 1110           	dc.l	$00111110
(1)   36/     57C : 0110 0000           	dc.l	$01100000
(1)   37/     580 : 0011 1100           	dc.l	$00111100
(1)   38/     584 : 0000 0110           	dc.l	$00000110
(1)   39/     588 : 0111 1100           	dc.l	$01111100
(1)   40/     58C : 0001 1000           	dc.l	$00011000
(1)   41/     590 : 0000 0000           	dc.l	$00000000
(1)   42/     594 : 0000 0000           	dc.l	$00000000	;	Tile (col 5, row 0)
(1)   43/     598 : 0110 0110           	dc.l	$01100110
(1)   44/     59C : 0110 1100           	dc.l	$01101100
(1)   45/     5A0 : 0001 1000           	dc.l	$00011000
(1)   46/     5A4 : 0011 0000           	dc.l	$00110000
(1)   47/     5A8 : 0110 0110           	dc.l	$01100110
(1)   48/     5AC : 0100 0110           	dc.l	$01000110
(1)   49/     5B0 : 0000 0000           	dc.l	$00000000
(1)   50/     5B4 : 0001 1100           	dc.l	$00011100	;	Tile (col 6, row 0)
(1)   51/     5B8 : 0011 0110           	dc.l	$00110110
(1)   52/     5BC : 0001 1100           	dc.l	$00011100
(1)   53/     5C0 : 0011 1000           	dc.l	$00111000
(1)   54/     5C4 : 0110 1111           	dc.l	$01101111
(1)   55/     5C8 : 0110 0110           	dc.l	$01100110
(1)   56/     5CC : 0011 1011           	dc.l	$00111011
(1)   57/     5D0 : 0000 0000           	dc.l	$00000000
(1)   58/     5D4 : 0000 0000           	dc.l	$00000000	;	Tile (col 7, row 0)
(1)   59/     5D8 : 0001 1000           	dc.l	$00011000
(1)   60/     5DC : 0001 1000           	dc.l	$00011000
(1)   61/     5E0 : 0001 1000           	dc.l	$00011000
(1)   62/     5E4 : 0000 0000           	dc.l	$00000000
(1)   63/     5E8 : 0000 0000           	dc.l	$00000000
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 14 - 7/13/2025 17:28:33


(1)   64/     5EC : 0000 0000           	dc.l	$00000000
(1)   65/     5F0 : 0000 0000           	dc.l	$00000000
(1)   66/     5F4 : 0000 0000           	dc.l	$00000000	;	Tile (col 8, row 0)
(1)   67/     5F8 : 0000 1110           	dc.l	$00001110
(1)   68/     5FC : 0001 1100           	dc.l	$00011100
(1)   69/     600 : 0001 1000           	dc.l	$00011000
(1)   70/     604 : 0001 1000           	dc.l	$00011000
(1)   71/     608 : 0001 1100           	dc.l	$00011100
(1)   72/     60C : 0000 1110           	dc.l	$00001110
(1)   73/     610 : 0000 0000           	dc.l	$00000000
(1)   74/     614 : 0000 0000           	dc.l	$00000000	;	Tile (col 9, row 0)
(1)   75/     618 : 0111 0000           	dc.l	$01110000
(1)   76/     61C : 0011 1000           	dc.l	$00111000
(1)   77/     620 : 0001 1000           	dc.l	$00011000
(1)   78/     624 : 0001 1000           	dc.l	$00011000
(1)   79/     628 : 0011 1000           	dc.l	$00111000
(1)   80/     62C : 0111 0000           	dc.l	$01110000
(1)   81/     630 : 0000 0000           	dc.l	$00000000
(1)   82/     634 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 0)
(1)   83/     638 : 0110 0110           	dc.l	$01100110
(1)   84/     63C : 0011 1100           	dc.l	$00111100
(1)   85/     640 : 1111 1111           	dc.l	$11111111
(1)   86/     644 : 0011 1100           	dc.l	$00111100
(1)   87/     648 : 0110 0110           	dc.l	$01100110
(1)   88/     64C : 0000 0000           	dc.l	$00000000
(1)   89/     650 : 0000 0000           	dc.l	$00000000
(1)   90/     654 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 0)
(1)   91/     658 : 0001 1000           	dc.l	$00011000
(1)   92/     65C : 0001 1000           	dc.l	$00011000
(1)   93/     660 : 0111 1110           	dc.l	$01111110
(1)   94/     664 : 0001 1000           	dc.l	$00011000
(1)   95/     668 : 0001 1000           	dc.l	$00011000
(1)   96/     66C : 0000 0000           	dc.l	$00000000
(1)   97/     670 : 0000 0000           	dc.l	$00000000
(1)   98/     674 : 0000 0000           	dc.l	$00000000	;	Tile (col 01, row 0)
(1)   99/     678 : 0000 0000           	dc.l	$00000000
(1)  100/     67C : 0000 0000           	dc.l	$00000000
(1)  101/     680 : 0000 0000           	dc.l	$00000000
(1)  102/     684 : 0000 0000           	dc.l	$00000000
(1)  103/     688 : 0001 1000           	dc.l	$00011000
(1)  104/     68C : 0001 1000           	dc.l	$00011000
(1)  105/     690 : 0011 0000           	dc.l	$00110000
(1)  106/     694 : 0000 0000           	dc.l	$00000000	;	Tile (col 01, row 0)
(1)  107/     698 : 0000 0000           	dc.l	$00000000
(1)  108/     69C : 0000 0000           	dc.l	$00000000
(1)  109/     6A0 : 0111 1110           	dc.l	$01111110
(1)  110/     6A4 : 0000 0000           	dc.l	$00000000
(1)  111/     6A8 : 0000 0000           	dc.l	$00000000
(1)  112/     6AC : 0000 0000           	dc.l	$00000000
(1)  113/     6B0 : 0000 0000           	dc.l	$00000000
(1)  114/     6B4 : 0000 0000           	dc.l	$00000000	;	Tile (col 04, row 0)
(1)  115/     6B8 : 0000 0000           	dc.l	$00000000
(1)  116/     6BC : 0000 0000           	dc.l	$00000000
(1)  117/     6C0 : 0000 0000           	dc.l	$00000000
(1)  118/     6C4 : 0000 0000           	dc.l	$00000000
(1)  119/     6C8 : 0001 1000           	dc.l	$00011000
(1)  120/     6CC : 0001 1000           	dc.l	$00011000
(1)  121/     6D0 : 0000 0000           	dc.l	$00000000
(1)  122/     6D4 : 0000 0000           	dc.l	$00000000	;	Tile (col 05, row 0)
(1)  123/     6D8 : 0000 0110           	dc.l	$00000110
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 15 - 7/13/2025 17:28:33


(1)  124/     6DC : 0000 1100           	dc.l	$00001100
(1)  125/     6E0 : 0001 1000           	dc.l	$00011000
(1)  126/     6E4 : 0011 0000           	dc.l	$00110000
(1)  127/     6E8 : 0110 0000           	dc.l	$01100000
(1)  128/     6EC : 0100 0000           	dc.l	$01000000
(1)  129/     6F0 : 0000 0000           	dc.l	$00000000
(1)  130/     6F4 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 0)
(1)  131/     6F8 : 0011 1100           	dc.l	$00111100
(1)  132/     6FC : 0110 0110           	dc.l	$01100110
(1)  133/     700 : 0110 1110           	dc.l	$01101110
(1)  134/     704 : 0111 0110           	dc.l	$01110110
(1)  135/     708 : 0110 0110           	dc.l	$01100110
(1)  136/     70C : 0011 1100           	dc.l	$00111100
(1)  137/     710 : 0000 0000           	dc.l	$00000000
(1)  138/     714 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 0)
(1)  139/     718 : 0001 1000           	dc.l	$00011000
(1)  140/     71C : 0011 1000           	dc.l	$00111000
(1)  141/     720 : 0001 1000           	dc.l	$00011000
(1)  142/     724 : 0001 1000           	dc.l	$00011000
(1)  143/     728 : 0001 1000           	dc.l	$00011000
(1)  144/     72C : 0111 1110           	dc.l	$01111110
(1)  145/     730 : 0000 0000           	dc.l	$00000000
(1)  146/     734 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 0)
(1)  147/     738 : 0011 1100           	dc.l	$00111100
(1)  148/     73C : 0110 0110           	dc.l	$01100110
(1)  149/     740 : 0000 1100           	dc.l	$00001100
(1)  150/     744 : 0001 1000           	dc.l	$00011000
(1)  151/     748 : 0011 0000           	dc.l	$00110000
(1)  152/     74C : 0111 1110           	dc.l	$01111110
(1)  153/     750 : 0000 0000           	dc.l	$00000000
(1)  154/     754 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 0)
(1)  155/     758 : 0111 1110           	dc.l	$01111110
(1)  156/     75C : 0000 1100           	dc.l	$00001100
(1)  157/     760 : 0001 1000           	dc.l	$00011000
(1)  158/     764 : 0000 1100           	dc.l	$00001100
(1)  159/     768 : 0110 0110           	dc.l	$01100110
(1)  160/     76C : 0011 1100           	dc.l	$00111100
(1)  161/     770 : 0000 0000           	dc.l	$00000000
(1)  162/     774 : 0000 0000           	dc.l	$00000000	;	Tile (col 4, row 0)
(1)  163/     778 : 0000 1100           	dc.l	$00001100
(1)  164/     77C : 0001 1100           	dc.l	$00011100
(1)  165/     780 : 0011 1100           	dc.l	$00111100
(1)  166/     784 : 0110 1100           	dc.l	$01101100
(1)  167/     788 : 0111 1110           	dc.l	$01111110
(1)  168/     78C : 0000 1100           	dc.l	$00001100
(1)  169/     790 : 0000 0000           	dc.l	$00000000
(1)  170/     794 : 0000 0000           	dc.l	$00000000	;	Tile (col 5, row 0)
(1)  171/     798 : 0111 1110           	dc.l	$01111110
(1)  172/     79C : 0110 0000           	dc.l	$01100000
(1)  173/     7A0 : 0111 1100           	dc.l	$01111100
(1)  174/     7A4 : 0000 0110           	dc.l	$00000110
(1)  175/     7A8 : 0110 0110           	dc.l	$01100110
(1)  176/     7AC : 0011 1100           	dc.l	$00111100
(1)  177/     7B0 : 0000 0000           	dc.l	$00000000
(1)  178/     7B4 : 0000 0000           	dc.l	$00000000	;	Tile (col 6, row 0)
(1)  179/     7B8 : 0011 1100           	dc.l	$00111100
(1)  180/     7BC : 0110 0000           	dc.l	$01100000
(1)  181/     7C0 : 0111 1100           	dc.l	$01111100
(1)  182/     7C4 : 0110 0110           	dc.l	$01100110
(1)  183/     7C8 : 0110 0110           	dc.l	$01100110
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 16 - 7/13/2025 17:28:33


(1)  184/     7CC : 0011 1100           	dc.l	$00111100
(1)  185/     7D0 : 0000 0000           	dc.l	$00000000
(1)  186/     7D4 : 0000 0000           	dc.l	$00000000	;	Tile (col 7, row 0)
(1)  187/     7D8 : 0111 1110           	dc.l	$01111110
(1)  188/     7DC : 0000 0110           	dc.l	$00000110
(1)  189/     7E0 : 0000 1100           	dc.l	$00001100
(1)  190/     7E4 : 0001 1000           	dc.l	$00011000
(1)  191/     7E8 : 0011 0000           	dc.l	$00110000
(1)  192/     7EC : 0011 0000           	dc.l	$00110000
(1)  193/     7F0 : 0000 0000           	dc.l	$00000000
(1)  194/     7F4 : 0000 0000           	dc.l	$00000000	;	Tile (col 8, row 0)
(1)  195/     7F8 : 0011 1100           	dc.l	$00111100
(1)  196/     7FC : 0110 0110           	dc.l	$01100110
(1)  197/     800 : 0011 1100           	dc.l	$00111100
(1)  198/     804 : 0110 0110           	dc.l	$01100110
(1)  199/     808 : 0110 0110           	dc.l	$01100110
(1)  200/     80C : 0011 1100           	dc.l	$00111100
(1)  201/     810 : 0000 0000           	dc.l	$00000000
(1)  202/     814 : 0000 0000           	dc.l	$00000000	;	Tile (col 9, row 0)
(1)  203/     818 : 0011 1100           	dc.l	$00111100
(1)  204/     81C : 0110 0110           	dc.l	$01100110
(1)  205/     820 : 0011 1110           	dc.l	$00111110
(1)  206/     824 : 0000 0110           	dc.l	$00000110
(1)  207/     828 : 0000 1100           	dc.l	$00001100
(1)  208/     82C : 0011 1000           	dc.l	$00111000
(1)  209/     830 : 0000 0000           	dc.l	$00000000
(1)  210/     834 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 0)
(1)  211/     838 : 0000 0000           	dc.l	$00000000
(1)  212/     83C : 0001 1000           	dc.l	$00011000
(1)  213/     840 : 0001 1000           	dc.l	$00011000
(1)  214/     844 : 0000 0000           	dc.l	$00000000
(1)  215/     848 : 0001 1000           	dc.l	$00011000
(1)  216/     84C : 0001 1000           	dc.l	$00011000
(1)  217/     850 : 0000 0000           	dc.l	$00000000
(1)  218/     854 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 0)
(1)  219/     858 : 0000 0000           	dc.l	$00000000
(1)  220/     85C : 0001 1000           	dc.l	$00011000
(1)  221/     860 : 0001 1000           	dc.l	$00011000
(1)  222/     864 : 0000 0000           	dc.l	$00000000
(1)  223/     868 : 0001 1000           	dc.l	$00011000
(1)  224/     86C : 0001 1000           	dc.l	$00011000
(1)  225/     870 : 0011 0000           	dc.l	$00110000
(1)  226/     874 : 0000 0110           	dc.l	$00000110	;	Tile (col 01, row 0)
(1)  227/     878 : 0000 1100           	dc.l	$00001100
(1)  228/     87C : 0001 1000           	dc.l	$00011000
(1)  229/     880 : 0011 0000           	dc.l	$00110000
(1)  230/     884 : 0001 1000           	dc.l	$00011000
(1)  231/     888 : 0000 1100           	dc.l	$00001100
(1)  232/     88C : 0000 0110           	dc.l	$00000110
(1)  233/     890 : 0000 0000           	dc.l	$00000000
(1)  234/     894 : 0000 0000           	dc.l	$00000000	;	Tile (col 01, row 0)
(1)  235/     898 : 0000 0000           	dc.l	$00000000
(1)  236/     89C : 0111 1110           	dc.l	$01111110
(1)  237/     8A0 : 0000 0000           	dc.l	$00000000
(1)  238/     8A4 : 0000 0000           	dc.l	$00000000
(1)  239/     8A8 : 0111 1110           	dc.l	$01111110
(1)  240/     8AC : 0000 0000           	dc.l	$00000000
(1)  241/     8B0 : 0000 0000           	dc.l	$00000000
(1)  242/     8B4 : 0110 0000           	dc.l	$01100000	;	Tile (col 04, row 0)
(1)  243/     8B8 : 0011 0000           	dc.l	$00110000
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 17 - 7/13/2025 17:28:33


(1)  244/     8BC : 0001 1000           	dc.l	$00011000
(1)  245/     8C0 : 0000 1100           	dc.l	$00001100
(1)  246/     8C4 : 0001 1000           	dc.l	$00011000
(1)  247/     8C8 : 0011 0000           	dc.l	$00110000
(1)  248/     8CC : 0110 0000           	dc.l	$01100000
(1)  249/     8D0 : 0000 0000           	dc.l	$00000000
(1)  250/     8D4 : 0000 0000           	dc.l	$00000000	;	Tile (col 05, row 0)
(1)  251/     8D8 : 0011 1100           	dc.l	$00111100
(1)  252/     8DC : 0110 0110           	dc.l	$01100110
(1)  253/     8E0 : 0000 1100           	dc.l	$00001100
(1)  254/     8E4 : 0001 1000           	dc.l	$00011000
(1)  255/     8E8 : 0000 0000           	dc.l	$00000000
(1)  256/     8EC : 0001 1000           	dc.l	$00011000
(1)  257/     8F0 : 0000 0000           	dc.l	$00000000
(1)  258/     8F4 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 1)
(1)  259/     8F8 : 0011 1100           	dc.l	$00111100
(1)  260/     8FC : 0110 0110           	dc.l	$01100110
(1)  261/     900 : 0110 1110           	dc.l	$01101110
(1)  262/     904 : 0110 1110           	dc.l	$01101110
(1)  263/     908 : 0110 0000           	dc.l	$01100000
(1)  264/     90C : 0011 1110           	dc.l	$00111110
(1)  265/     910 : 0000 0000           	dc.l	$00000000
(1)  266/     914 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 1)
(1)  267/     918 : 0001 1000           	dc.l	$00011000
(1)  268/     91C : 0011 1100           	dc.l	$00111100
(1)  269/     920 : 0110 0110           	dc.l	$01100110
(1)  270/     924 : 0110 0110           	dc.l	$01100110
(1)  271/     928 : 0111 1110           	dc.l	$01111110
(1)  272/     92C : 0110 0110           	dc.l	$01100110
(1)  273/     930 : 0000 0000           	dc.l	$00000000
(1)  274/     934 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 1)
(1)  275/     938 : 0111 1100           	dc.l	$01111100
(1)  276/     93C : 0110 0110           	dc.l	$01100110
(1)  277/     940 : 0111 1100           	dc.l	$01111100
(1)  278/     944 : 0110 0110           	dc.l	$01100110
(1)  279/     948 : 0110 0110           	dc.l	$01100110
(1)  280/     94C : 0111 1100           	dc.l	$01111100
(1)  281/     950 : 0000 0000           	dc.l	$00000000
(1)  282/     954 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 1)
(1)  283/     958 : 0011 1100           	dc.l	$00111100
(1)  284/     95C : 0110 0110           	dc.l	$01100110
(1)  285/     960 : 0110 0000           	dc.l	$01100000
(1)  286/     964 : 0110 0000           	dc.l	$01100000
(1)  287/     968 : 0110 0110           	dc.l	$01100110
(1)  288/     96C : 0011 1100           	dc.l	$00111100
(1)  289/     970 : 0000 0000           	dc.l	$00000000
(1)  290/     974 : 0000 0000           	dc.l	$00000000	;	Tile (col 4, row 1)
(1)  291/     978 : 0111 1000           	dc.l	$01111000
(1)  292/     97C : 0110 1100           	dc.l	$01101100
(1)  293/     980 : 0110 0110           	dc.l	$01100110
(1)  294/     984 : 0110 0110           	dc.l	$01100110
(1)  295/     988 : 0110 1100           	dc.l	$01101100
(1)  296/     98C : 0111 1000           	dc.l	$01111000
(1)  297/     990 : 0000 0000           	dc.l	$00000000
(1)  298/     994 : 0000 0000           	dc.l	$00000000	;	Tile (col 5, row 1)
(1)  299/     998 : 0111 1110           	dc.l	$01111110
(1)  300/     99C : 0110 0000           	dc.l	$01100000
(1)  301/     9A0 : 0111 1100           	dc.l	$01111100
(1)  302/     9A4 : 0110 0000           	dc.l	$01100000
(1)  303/     9A8 : 0110 0000           	dc.l	$01100000
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 18 - 7/13/2025 17:28:33


(1)  304/     9AC : 0111 1110           	dc.l	$01111110
(1)  305/     9B0 : 0000 0000           	dc.l	$00000000
(1)  306/     9B4 : 0000 0000           	dc.l	$00000000	;	Tile (col 6, row 1)
(1)  307/     9B8 : 0111 1110           	dc.l	$01111110
(1)  308/     9BC : 0110 0000           	dc.l	$01100000
(1)  309/     9C0 : 0111 1100           	dc.l	$01111100
(1)  310/     9C4 : 0110 0000           	dc.l	$01100000
(1)  311/     9C8 : 0110 0000           	dc.l	$01100000
(1)  312/     9CC : 0110 0000           	dc.l	$01100000
(1)  313/     9D0 : 0000 0000           	dc.l	$00000000
(1)  314/     9D4 : 0000 0000           	dc.l	$00000000	;	Tile (col 7, row 1)
(1)  315/     9D8 : 0011 1110           	dc.l	$00111110
(1)  316/     9DC : 0110 0000           	dc.l	$01100000
(1)  317/     9E0 : 0110 0000           	dc.l	$01100000
(1)  318/     9E4 : 0110 1110           	dc.l	$01101110
(1)  319/     9E8 : 0110 0110           	dc.l	$01100110
(1)  320/     9EC : 0011 1110           	dc.l	$00111110
(1)  321/     9F0 : 0000 0000           	dc.l	$00000000
(1)  322/     9F4 : 0000 0000           	dc.l	$00000000	;	Tile (col 8, row 1)
(1)  323/     9F8 : 0110 0110           	dc.l	$01100110
(1)  324/     9FC : 0110 0110           	dc.l	$01100110
(1)  325/     A00 : 0111 1110           	dc.l	$01111110
(1)  326/     A04 : 0110 0110           	dc.l	$01100110
(1)  327/     A08 : 0110 0110           	dc.l	$01100110
(1)  328/     A0C : 0110 0110           	dc.l	$01100110
(1)  329/     A10 : 0000 0000           	dc.l	$00000000
(1)  330/     A14 : 0000 0000           	dc.l	$00000000	;	Tile (col 9, row 1)
(1)  331/     A18 : 0111 1110           	dc.l	$01111110
(1)  332/     A1C : 0001 1000           	dc.l	$00011000
(1)  333/     A20 : 0001 1000           	dc.l	$00011000
(1)  334/     A24 : 0001 1000           	dc.l	$00011000
(1)  335/     A28 : 0001 1000           	dc.l	$00011000
(1)  336/     A2C : 0111 1110           	dc.l	$01111110
(1)  337/     A30 : 0000 0000           	dc.l	$00000000
(1)  338/     A34 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 1)
(1)  339/     A38 : 0000 0110           	dc.l	$00000110
(1)  340/     A3C : 0000 0110           	dc.l	$00000110
(1)  341/     A40 : 0000 0110           	dc.l	$00000110
(1)  342/     A44 : 0000 0110           	dc.l	$00000110
(1)  343/     A48 : 0110 0110           	dc.l	$01100110
(1)  344/     A4C : 0011 1100           	dc.l	$00111100
(1)  345/     A50 : 0000 0000           	dc.l	$00000000
(1)  346/     A54 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 1)
(1)  347/     A58 : 0110 0110           	dc.l	$01100110
(1)  348/     A5C : 0110 1100           	dc.l	$01101100
(1)  349/     A60 : 0111 1000           	dc.l	$01111000
(1)  350/     A64 : 0111 1000           	dc.l	$01111000
(1)  351/     A68 : 0110 1100           	dc.l	$01101100
(1)  352/     A6C : 0110 0110           	dc.l	$01100110
(1)  353/     A70 : 0000 0000           	dc.l	$00000000
(1)  354/     A74 : 0000 0000           	dc.l	$00000000	;	Tile (col 01, row 1)
(1)  355/     A78 : 0110 0000           	dc.l	$01100000
(1)  356/     A7C : 0110 0000           	dc.l	$01100000
(1)  357/     A80 : 0110 0000           	dc.l	$01100000
(1)  358/     A84 : 0110 0000           	dc.l	$01100000
(1)  359/     A88 : 0110 0000           	dc.l	$01100000
(1)  360/     A8C : 0111 1110           	dc.l	$01111110
(1)  361/     A90 : 0000 0000           	dc.l	$00000000
(1)  362/     A94 : 0000 0000           	dc.l	$00000000	;	Tile (col 01, row 1)
(1)  363/     A98 : 0110 0011           	dc.l	$01100011
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 19 - 7/13/2025 17:28:33


(1)  364/     A9C : 0111 0111           	dc.l	$01110111
(1)  365/     AA0 : 0111 1111           	dc.l	$01111111
(1)  366/     AA4 : 0110 1011           	dc.l	$01101011
(1)  367/     AA8 : 0110 0011           	dc.l	$01100011
(1)  368/     AAC : 0110 0011           	dc.l	$01100011
(1)  369/     AB0 : 0000 0000           	dc.l	$00000000
(1)  370/     AB4 : 0000 0000           	dc.l	$00000000	;	Tile (col 04, row 1)
(1)  371/     AB8 : 0110 0110           	dc.l	$01100110
(1)  372/     ABC : 0111 0110           	dc.l	$01110110
(1)  373/     AC0 : 0111 1110           	dc.l	$01111110
(1)  374/     AC4 : 0111 1110           	dc.l	$01111110
(1)  375/     AC8 : 0110 1110           	dc.l	$01101110
(1)  376/     ACC : 0110 0110           	dc.l	$01100110
(1)  377/     AD0 : 0000 0000           	dc.l	$00000000
(1)  378/     AD4 : 0000 0000           	dc.l	$00000000	;	Tile (col 05, row 1)
(1)  379/     AD8 : 0011 1100           	dc.l	$00111100
(1)  380/     ADC : 0110 0110           	dc.l	$01100110
(1)  381/     AE0 : 0110 0110           	dc.l	$01100110
(1)  382/     AE4 : 0110 0110           	dc.l	$01100110
(1)  383/     AE8 : 0110 0110           	dc.l	$01100110
(1)  384/     AEC : 0011 1100           	dc.l	$00111100
(1)  385/     AF0 : 0000 0000           	dc.l	$00000000
(1)  386/     AF4 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 1)
(1)  387/     AF8 : 0111 1100           	dc.l	$01111100
(1)  388/     AFC : 0110 0110           	dc.l	$01100110
(1)  389/     B00 : 0110 0110           	dc.l	$01100110
(1)  390/     B04 : 0111 1100           	dc.l	$01111100
(1)  391/     B08 : 0110 0000           	dc.l	$01100000
(1)  392/     B0C : 0110 0000           	dc.l	$01100000
(1)  393/     B10 : 0000 0000           	dc.l	$00000000
(1)  394/     B14 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 1)
(1)  395/     B18 : 0011 1100           	dc.l	$00111100
(1)  396/     B1C : 0110 0110           	dc.l	$01100110
(1)  397/     B20 : 0110 0110           	dc.l	$01100110
(1)  398/     B24 : 0110 0110           	dc.l	$01100110
(1)  399/     B28 : 0110 1100           	dc.l	$01101100
(1)  400/     B2C : 0011 0110           	dc.l	$00110110
(1)  401/     B30 : 0000 0000           	dc.l	$00000000
(1)  402/     B34 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 1)
(1)  403/     B38 : 0111 1100           	dc.l	$01111100
(1)  404/     B3C : 0110 0110           	dc.l	$01100110
(1)  405/     B40 : 0110 0110           	dc.l	$01100110
(1)  406/     B44 : 0111 1100           	dc.l	$01111100
(1)  407/     B48 : 0110 1100           	dc.l	$01101100
(1)  408/     B4C : 0110 0110           	dc.l	$01100110
(1)  409/     B50 : 0000 0000           	dc.l	$00000000
(1)  410/     B54 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 1)
(1)  411/     B58 : 0011 1100           	dc.l	$00111100
(1)  412/     B5C : 0110 0000           	dc.l	$01100000
(1)  413/     B60 : 0011 1100           	dc.l	$00111100
(1)  414/     B64 : 0000 0110           	dc.l	$00000110
(1)  415/     B68 : 0000 0110           	dc.l	$00000110
(1)  416/     B6C : 0011 1100           	dc.l	$00111100
(1)  417/     B70 : 0000 0000           	dc.l	$00000000
(1)  418/     B74 : 0000 0000           	dc.l	$00000000	;	Tile (col 4, row 1)
(1)  419/     B78 : 0111 1110           	dc.l	$01111110
(1)  420/     B7C : 0001 1000           	dc.l	$00011000
(1)  421/     B80 : 0001 1000           	dc.l	$00011000
(1)  422/     B84 : 0001 1000           	dc.l	$00011000
(1)  423/     B88 : 0001 1000           	dc.l	$00011000
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 20 - 7/13/2025 17:28:33


(1)  424/     B8C : 0001 1000           	dc.l	$00011000
(1)  425/     B90 : 0000 0000           	dc.l	$00000000
(1)  426/     B94 : 0000 0000           	dc.l	$00000000	;	Tile (col 5, row 1)
(1)  427/     B98 : 0110 0110           	dc.l	$01100110
(1)  428/     B9C : 0110 0110           	dc.l	$01100110
(1)  429/     BA0 : 0110 0110           	dc.l	$01100110
(1)  430/     BA4 : 0110 0110           	dc.l	$01100110
(1)  431/     BA8 : 0110 0110           	dc.l	$01100110
(1)  432/     BAC : 0111 1110           	dc.l	$01111110
(1)  433/     BB0 : 0000 0000           	dc.l	$00000000
(1)  434/     BB4 : 0000 0000           	dc.l	$00000000	;	Tile (col 6, row 1)
(1)  435/     BB8 : 0110 0110           	dc.l	$01100110
(1)  436/     BBC : 0110 0110           	dc.l	$01100110
(1)  437/     BC0 : 0110 0110           	dc.l	$01100110
(1)  438/     BC4 : 0110 0110           	dc.l	$01100110
(1)  439/     BC8 : 0011 1100           	dc.l	$00111100
(1)  440/     BCC : 0001 1000           	dc.l	$00011000
(1)  441/     BD0 : 0000 0000           	dc.l	$00000000
(1)  442/     BD4 : 0000 0000           	dc.l	$00000000	;	Tile (col 7, row 1)
(1)  443/     BD8 : 0110 0011           	dc.l	$01100011
(1)  444/     BDC : 0110 0011           	dc.l	$01100011
(1)  445/     BE0 : 0110 1011           	dc.l	$01101011
(1)  446/     BE4 : 0111 1111           	dc.l	$01111111
(1)  447/     BE8 : 0111 0111           	dc.l	$01110111
(1)  448/     BEC : 0110 0011           	dc.l	$01100011
(1)  449/     BF0 : 0000 0000           	dc.l	$00000000
(1)  450/     BF4 : 0000 0000           	dc.l	$00000000	;	Tile (col 8, row 1)
(1)  451/     BF8 : 0110 0110           	dc.l	$01100110
(1)  452/     BFC : 0110 0110           	dc.l	$01100110
(1)  453/     C00 : 0011 1100           	dc.l	$00111100
(1)  454/     C04 : 0011 1100           	dc.l	$00111100
(1)  455/     C08 : 0110 0110           	dc.l	$01100110
(1)  456/     C0C : 0110 0110           	dc.l	$01100110
(1)  457/     C10 : 0000 0000           	dc.l	$00000000
(1)  458/     C14 : 0000 0000           	dc.l	$00000000	;	Tile (col 9, row 1)
(1)  459/     C18 : 0110 0110           	dc.l	$01100110
(1)  460/     C1C : 0110 0110           	dc.l	$01100110
(1)  461/     C20 : 0011 1100           	dc.l	$00111100
(1)  462/     C24 : 0001 1000           	dc.l	$00011000
(1)  463/     C28 : 0001 1000           	dc.l	$00011000
(1)  464/     C2C : 0001 1000           	dc.l	$00011000
(1)  465/     C30 : 0000 0000           	dc.l	$00000000
(1)  466/     C34 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 1)
(1)  467/     C38 : 0111 1110           	dc.l	$01111110
(1)  468/     C3C : 0000 1100           	dc.l	$00001100
(1)  469/     C40 : 0001 1000           	dc.l	$00011000
(1)  470/     C44 : 0011 0000           	dc.l	$00110000
(1)  471/     C48 : 0110 0000           	dc.l	$01100000
(1)  472/     C4C : 0111 1110           	dc.l	$01111110
(1)  473/     C50 : 0000 0000           	dc.l	$00000000
(1)  474/     C54 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 1)
(1)  475/     C58 : 0001 1110           	dc.l	$00011110
(1)  476/     C5C : 0001 1000           	dc.l	$00011000
(1)  477/     C60 : 0001 1000           	dc.l	$00011000
(1)  478/     C64 : 0001 1000           	dc.l	$00011000
(1)  479/     C68 : 0001 1000           	dc.l	$00011000
(1)  480/     C6C : 0001 1110           	dc.l	$00011110
(1)  481/     C70 : 0000 0000           	dc.l	$00000000
(1)  482/     C74 : 0000 0000           	dc.l	$00000000	;	Tile (col 01, row 1)
(1)  483/     C78 : 0100 0000           	dc.l	$01000000
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 21 - 7/13/2025 17:28:33


(1)  484/     C7C : 0110 0000           	dc.l	$01100000
(1)  485/     C80 : 0011 0000           	dc.l	$00110000
(1)  486/     C84 : 0001 1000           	dc.l	$00011000
(1)  487/     C88 : 0000 1100           	dc.l	$00001100
(1)  488/     C8C : 0000 0110           	dc.l	$00000110
(1)  489/     C90 : 0000 0000           	dc.l	$00000000
(1)  490/     C94 : 0000 0000           	dc.l	$00000000	;	Tile (col 01, row 1)
(1)  491/     C98 : 0111 1000           	dc.l	$01111000
(1)  492/     C9C : 0001 1000           	dc.l	$00011000
(1)  493/     CA0 : 0001 1000           	dc.l	$00011000
(1)  494/     CA4 : 0001 1000           	dc.l	$00011000
(1)  495/     CA8 : 0001 1000           	dc.l	$00011000
(1)  496/     CAC : 0111 1000           	dc.l	$01111000
(1)  497/     CB0 : 0000 0000           	dc.l	$00000000
(1)  498/     CB4 : 0000 0000           	dc.l	$00000000	;	Tile (col 04, row 1)
(1)  499/     CB8 : 0000 1000           	dc.l	$00001000
(1)  500/     CBC : 0001 1100           	dc.l	$00011100
(1)  501/     CC0 : 0011 0110           	dc.l	$00110110
(1)  502/     CC4 : 0110 0011           	dc.l	$01100011
(1)  503/     CC8 : 0000 0000           	dc.l	$00000000
(1)  504/     CCC : 0000 0000           	dc.l	$00000000
(1)  505/     CD0 : 0000 0000           	dc.l	$00000000
(1)  506/     CD4 : 0000 0000           	dc.l	$00000000	;	Tile (col 05, row 1)
(1)  507/     CD8 : 0000 0000           	dc.l	$00000000
(1)  508/     CDC : 0000 0000           	dc.l	$00000000
(1)  509/     CE0 : 0000 0000           	dc.l	$00000000
(1)  510/     CE4 : 0000 0000           	dc.l	$00000000
(1)  511/     CE8 : 0000 0000           	dc.l	$00000000
(1)  512/     CEC : 1111 1111           	dc.l	$11111111
(1)  513/     CF0 : 0000 0000           	dc.l	$00000000
(1)  514/     CF4 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 4)
(1)  515/     CF8 : 0001 1000           	dc.l	$00011000
(1)  516/     CFC : 0011 1100           	dc.l	$00111100
(1)  517/     D00 : 0111 1110           	dc.l	$01111110
(1)  518/     D04 : 0111 1110           	dc.l	$01111110
(1)  519/     D08 : 0011 1100           	dc.l	$00111100
(1)  520/     D0C : 0001 1000           	dc.l	$00011000
(1)  521/     D10 : 0000 0000           	dc.l	$00000000
(1)  522/     D14 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 4)
(1)  523/     D18 : 0000 0000           	dc.l	$00000000
(1)  524/     D1C : 0011 1100           	dc.l	$00111100
(1)  525/     D20 : 0000 0110           	dc.l	$00000110
(1)  526/     D24 : 0011 1110           	dc.l	$00111110
(1)  527/     D28 : 0110 0110           	dc.l	$01100110
(1)  528/     D2C : 0011 1110           	dc.l	$00111110
(1)  529/     D30 : 0000 0000           	dc.l	$00000000
(1)  530/     D34 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 4)
(1)  531/     D38 : 0110 0000           	dc.l	$01100000
(1)  532/     D3C : 0110 0000           	dc.l	$01100000
(1)  533/     D40 : 0111 1100           	dc.l	$01111100
(1)  534/     D44 : 0110 0110           	dc.l	$01100110
(1)  535/     D48 : 0110 0110           	dc.l	$01100110
(1)  536/     D4C : 0111 1100           	dc.l	$01111100
(1)  537/     D50 : 0000 0000           	dc.l	$00000000
(1)  538/     D54 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 4)
(1)  539/     D58 : 0000 0000           	dc.l	$00000000
(1)  540/     D5C : 0011 1100           	dc.l	$00111100
(1)  541/     D60 : 0110 0000           	dc.l	$01100000
(1)  542/     D64 : 0110 0000           	dc.l	$01100000
(1)  543/     D68 : 0110 0000           	dc.l	$01100000
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 22 - 7/13/2025 17:28:33


(1)  544/     D6C : 0011 1100           	dc.l	$00111100
(1)  545/     D70 : 0000 0000           	dc.l	$00000000
(1)  546/     D74 : 0000 0000           	dc.l	$00000000	;	Tile (col 4, row 4)
(1)  547/     D78 : 0000 0110           	dc.l	$00000110
(1)  548/     D7C : 0000 0110           	dc.l	$00000110
(1)  549/     D80 : 0011 1110           	dc.l	$00111110
(1)  550/     D84 : 0110 0110           	dc.l	$01100110
(1)  551/     D88 : 0110 0110           	dc.l	$01100110
(1)  552/     D8C : 0011 1110           	dc.l	$00111110
(1)  553/     D90 : 0000 0000           	dc.l	$00000000
(1)  554/     D94 : 0000 0000           	dc.l	$00000000	;	Tile (col 5, row 4)
(1)  555/     D98 : 0000 0000           	dc.l	$00000000
(1)  556/     D9C : 0011 1100           	dc.l	$00111100
(1)  557/     DA0 : 0110 0110           	dc.l	$01100110
(1)  558/     DA4 : 0111 1110           	dc.l	$01111110
(1)  559/     DA8 : 0110 0000           	dc.l	$01100000
(1)  560/     DAC : 0011 1100           	dc.l	$00111100
(1)  561/     DB0 : 0000 0000           	dc.l	$00000000
(1)  562/     DB4 : 0000 0000           	dc.l	$00000000	;	Tile (col 6, row 4)
(1)  563/     DB8 : 0000 1110           	dc.l	$00001110
(1)  564/     DBC : 0001 1000           	dc.l	$00011000
(1)  565/     DC0 : 0011 1110           	dc.l	$00111110
(1)  566/     DC4 : 0001 1000           	dc.l	$00011000
(1)  567/     DC8 : 0001 1000           	dc.l	$00011000
(1)  568/     DCC : 0001 1000           	dc.l	$00011000
(1)  569/     DD0 : 0000 0000           	dc.l	$00000000
(1)  570/     DD4 : 0000 0000           	dc.l	$00000000	;	Tile (col 7, row 4)
(1)  571/     DD8 : 0000 0000           	dc.l	$00000000
(1)  572/     DDC : 0011 1110           	dc.l	$00111110
(1)  573/     DE0 : 0110 0110           	dc.l	$01100110
(1)  574/     DE4 : 0110 0110           	dc.l	$01100110
(1)  575/     DE8 : 0011 1110           	dc.l	$00111110
(1)  576/     DEC : 0000 0110           	dc.l	$00000110
(1)  577/     DF0 : 0111 1100           	dc.l	$01111100
(1)  578/     DF4 : 0000 0000           	dc.l	$00000000	;	Tile (col 8, row 4)
(1)  579/     DF8 : 0110 0000           	dc.l	$01100000
(1)  580/     DFC : 0110 0000           	dc.l	$01100000
(1)  581/     E00 : 0111 1100           	dc.l	$01111100
(1)  582/     E04 : 0110 0110           	dc.l	$01100110
(1)  583/     E08 : 0110 0110           	dc.l	$01100110
(1)  584/     E0C : 0110 0110           	dc.l	$01100110
(1)  585/     E10 : 0000 0000           	dc.l	$00000000
(1)  586/     E14 : 0000 0000           	dc.l	$00000000	;	Tile (col 9, row 4)
(1)  587/     E18 : 0001 1000           	dc.l	$00011000
(1)  588/     E1C : 0000 0000           	dc.l	$00000000
(1)  589/     E20 : 0011 1000           	dc.l	$00111000
(1)  590/     E24 : 0001 1000           	dc.l	$00011000
(1)  591/     E28 : 0001 1000           	dc.l	$00011000
(1)  592/     E2C : 0011 1100           	dc.l	$00111100
(1)  593/     E30 : 0000 0000           	dc.l	$00000000
(1)  594/     E34 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 4)
(1)  595/     E38 : 0000 0110           	dc.l	$00000110
(1)  596/     E3C : 0000 0000           	dc.l	$00000000
(1)  597/     E40 : 0000 0110           	dc.l	$00000110
(1)  598/     E44 : 0000 0110           	dc.l	$00000110
(1)  599/     E48 : 0000 0110           	dc.l	$00000110
(1)  600/     E4C : 0000 0110           	dc.l	$00000110
(1)  601/     E50 : 0011 1100           	dc.l	$00111100
(1)  602/     E54 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 4)
(1)  603/     E58 : 0110 0000           	dc.l	$01100000
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 23 - 7/13/2025 17:28:33


(1)  604/     E5C : 0110 0000           	dc.l	$01100000
(1)  605/     E60 : 0110 1100           	dc.l	$01101100
(1)  606/     E64 : 0111 1000           	dc.l	$01111000
(1)  607/     E68 : 0110 1100           	dc.l	$01101100
(1)  608/     E6C : 0110 0110           	dc.l	$01100110
(1)  609/     E70 : 0000 0000           	dc.l	$00000000
(1)  610/     E74 : 0000 0000           	dc.l	$00000000	;	Tile (col 01, row 4)
(1)  611/     E78 : 0011 1000           	dc.l	$00111000
(1)  612/     E7C : 0001 1000           	dc.l	$00011000
(1)  613/     E80 : 0001 1000           	dc.l	$00011000
(1)  614/     E84 : 0001 1000           	dc.l	$00011000
(1)  615/     E88 : 0001 1000           	dc.l	$00011000
(1)  616/     E8C : 0011 1100           	dc.l	$00111100
(1)  617/     E90 : 0000 0000           	dc.l	$00000000
(1)  618/     E94 : 0000 0000           	dc.l	$00000000	;	Tile (col 01, row 4)
(1)  619/     E98 : 0000 0000           	dc.l	$00000000
(1)  620/     E9C : 0110 0110           	dc.l	$01100110
(1)  621/     EA0 : 0111 1111           	dc.l	$01111111
(1)  622/     EA4 : 0111 1111           	dc.l	$01111111
(1)  623/     EA8 : 0110 1011           	dc.l	$01101011
(1)  624/     EAC : 0110 0011           	dc.l	$01100011
(1)  625/     EB0 : 0000 0000           	dc.l	$00000000
(1)  626/     EB4 : 0000 0000           	dc.l	$00000000	;	Tile (col 04, row 4)
(1)  627/     EB8 : 0000 0000           	dc.l	$00000000
(1)  628/     EBC : 0111 1100           	dc.l	$01111100
(1)  629/     EC0 : 0110 0110           	dc.l	$01100110
(1)  630/     EC4 : 0110 0110           	dc.l	$01100110
(1)  631/     EC8 : 0110 0110           	dc.l	$01100110
(1)  632/     ECC : 0110 0110           	dc.l	$01100110
(1)  633/     ED0 : 0000 0000           	dc.l	$00000000
(1)  634/     ED4 : 0000 0000           	dc.l	$00000000	;	Tile (col 05, row 4)
(1)  635/     ED8 : 0000 0000           	dc.l	$00000000
(1)  636/     EDC : 0011 1100           	dc.l	$00111100
(1)  637/     EE0 : 0110 0110           	dc.l	$01100110
(1)  638/     EE4 : 0110 0110           	dc.l	$01100110
(1)  639/     EE8 : 0110 0110           	dc.l	$01100110
(1)  640/     EEC : 0011 1100           	dc.l	$00111100
(1)  641/     EF0 : 0000 0000           	dc.l	$00000000
(1)  642/     EF4 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 5)
(1)  643/     EF8 : 0000 0000           	dc.l	$00000000
(1)  644/     EFC : 0111 1100           	dc.l	$01111100
(1)  645/     F00 : 0110 0110           	dc.l	$01100110
(1)  646/     F04 : 0110 0110           	dc.l	$01100110
(1)  647/     F08 : 0111 1100           	dc.l	$01111100
(1)  648/     F0C : 0110 0000           	dc.l	$01100000
(1)  649/     F10 : 0110 0000           	dc.l	$01100000
(1)  650/     F14 : 0000 0000           	dc.l	$00000000	;	Tile (col 0, row 5)
(1)  651/     F18 : 0000 0000           	dc.l	$00000000
(1)  652/     F1C : 0011 1110           	dc.l	$00111110
(1)  653/     F20 : 0110 0110           	dc.l	$01100110
(1)  654/     F24 : 0110 0110           	dc.l	$01100110
(1)  655/     F28 : 0011 1110           	dc.l	$00111110
(1)  656/     F2C : 0000 0110           	dc.l	$00000110
(1)  657/     F30 : 0000 0110           	dc.l	$00000110
(1)  658/     F34 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 5)
(1)  659/     F38 : 0000 0000           	dc.l	$00000000
(1)  660/     F3C : 0111 1100           	dc.l	$01111100
(1)  661/     F40 : 0110 0110           	dc.l	$01100110
(1)  662/     F44 : 0110 0000           	dc.l	$01100000
(1)  663/     F48 : 0110 0000           	dc.l	$01100000
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 24 - 7/13/2025 17:28:33


(1)  664/     F4C : 0110 0000           	dc.l	$01100000
(1)  665/     F50 : 0000 0000           	dc.l	$00000000
(1)  666/     F54 : 0000 0000           	dc.l	$00000000	;	Tile (col 1, row 5)
(1)  667/     F58 : 0000 0000           	dc.l	$00000000
(1)  668/     F5C : 0011 1110           	dc.l	$00111110
(1)  669/     F60 : 0110 0000           	dc.l	$01100000
(1)  670/     F64 : 0011 1100           	dc.l	$00111100
(1)  671/     F68 : 0000 0110           	dc.l	$00000110
(1)  672/     F6C : 0111 1100           	dc.l	$01111100
(1)  673/     F70 : 0000 0000           	dc.l	$00000000
(1)  674/     F74 : 0000 0000           	dc.l	$00000000	;	Tile (col 4, row 5)
(1)  675/     F78 : 0001 1000           	dc.l	$00011000
(1)  676/     F7C : 0111 1110           	dc.l	$01111110
(1)  677/     F80 : 0001 1000           	dc.l	$00011000
(1)  678/     F84 : 0001 1000           	dc.l	$00011000
(1)  679/     F88 : 0001 1000           	dc.l	$00011000
(1)  680/     F8C : 0000 1110           	dc.l	$00001110
(1)  681/     F90 : 0000 0000           	dc.l	$00000000
(1)  682/     F94 : 0000 0000           	dc.l	$00000000	;	Tile (col 5, row 5)
(1)  683/     F98 : 0000 0000           	dc.l	$00000000
(1)  684/     F9C : 0110 0110           	dc.l	$01100110
(1)  685/     FA0 : 0110 0110           	dc.l	$01100110
(1)  686/     FA4 : 0110 0110           	dc.l	$01100110
(1)  687/     FA8 : 0110 0110           	dc.l	$01100110
(1)  688/     FAC : 0011 1110           	dc.l	$00111110
(1)  689/     FB0 : 0000 0000           	dc.l	$00000000
(1)  690/     FB4 : 0000 0000           	dc.l	$00000000	;	Tile (col 6, row 5)
(1)  691/     FB8 : 0000 0000           	dc.l	$00000000
(1)  692/     FBC : 0110 0110           	dc.l	$01100110
(1)  693/     FC0 : 0110 0110           	dc.l	$01100110
(1)  694/     FC4 : 0110 0110           	dc.l	$01100110
(1)  695/     FC8 : 0011 1100           	dc.l	$00111100
(1)  696/     FCC : 0001 1000           	dc.l	$00011000
(1)  697/     FD0 : 0000 0000           	dc.l	$00000000
(1)  698/     FD4 : 0000 0000           	dc.l	$00000000	;	Tile (col 7, row 5)
(1)  699/     FD8 : 0000 0000           	dc.l	$00000000
(1)  700/     FDC : 0110 0011           	dc.l	$01100011
(1)  701/     FE0 : 0110 1011           	dc.l	$01101011
(1)  702/     FE4 : 0111 1111           	dc.l	$01111111
(1)  703/     FE8 : 0011 1110           	dc.l	$00111110
(1)  704/     FEC : 0011 0110           	dc.l	$00110110
(1)  705/     FF0 : 0000 0000           	dc.l	$00000000
(1)  706/     FF4 : 0000 0000           	dc.l	$00000000	;	Tile (col 8, row 5)
(1)  707/     FF8 : 0000 0000           	dc.l	$00000000
(1)  708/     FFC : 0110 0110           	dc.l	$01100110
(1)  709/    1000 : 0011 1100           	dc.l	$00111100
(1)  710/    1004 : 0001 1000           	dc.l	$00011000
(1)  711/    1008 : 0011 1100           	dc.l	$00111100
(1)  712/    100C : 0110 0110           	dc.l	$01100110
(1)  713/    1010 : 0000 0000           	dc.l	$00000000
(1)  714/    1014 : 0000 0000           	dc.l	$00000000	;	Tile (col 9, row 5)
(1)  715/    1018 : 0000 0000           	dc.l	$00000000
(1)  716/    101C : 0110 0110           	dc.l	$01100110
(1)  717/    1020 : 0110 0110           	dc.l	$01100110
(1)  718/    1024 : 0110 0110           	dc.l	$01100110
(1)  719/    1028 : 0011 1110           	dc.l	$00111110
(1)  720/    102C : 0000 1100           	dc.l	$00001100
(1)  721/    1030 : 0111 1000           	dc.l	$01111000
(1)  722/    1034 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 5)
(1)  723/    1038 : 0000 0000           	dc.l	$00000000
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Body Font.asm) - Page 25 - 7/13/2025 17:28:33


(1)  724/    103C : 0111 1110           	dc.l	$01111110
(1)  725/    1040 : 0000 1100           	dc.l	$00001100
(1)  726/    1044 : 0001 1000           	dc.l	$00011000
(1)  727/    1048 : 0011 0000           	dc.l	$00110000
(1)  728/    104C : 0111 1110           	dc.l	$01111110
(1)  729/    1050 : 0000 0000           	dc.l	$00000000
(1)  730/    1054 : 0000 0000           	dc.l	$00000000	;	Tile (col 00, row 5)
(1)  731/    1058 : 0001 1000           	dc.l	$00011000
(1)  732/    105C : 0011 1100           	dc.l	$00111100
(1)  733/    1060 : 0111 1110           	dc.l	$01111110
(1)  734/    1064 : 0111 1110           	dc.l	$01111110
(1)  735/    1068 : 0001 1000           	dc.l	$00011000
(1)  736/    106C : 0011 1100           	dc.l	$00111100
(1)  737/    1070 : 0000 0000           	dc.l	$00000000
(1)  738/    1074 : 0001 1000           	dc.l	$00011000	;	Tile (col 01, row 5)
(1)  739/    1078 : 0001 1000           	dc.l	$00011000
(1)  740/    107C : 0001 1000           	dc.l	$00011000
(1)  741/    1080 : 0001 1000           	dc.l	$00011000
(1)  742/    1084 : 0001 1000           	dc.l	$00011000
(1)  743/    1088 : 0001 1000           	dc.l	$00011000
(1)  744/    108C : 0001 1000           	dc.l	$00011000
(1)  745/    1090 : 0001 1000           	dc.l	$00011000
(1)  746/    1094 : 0000 0000           	dc.l	$00000000	;	Tile (col 01, row 5)
(1)  747/    1098 : 0111 1110           	dc.l	$01111110
(1)  748/    109C : 0111 1000           	dc.l	$01111000
(1)  749/    10A0 : 0111 1100           	dc.l	$01111100
(1)  750/    10A4 : 0110 1110           	dc.l	$01101110
(1)  751/    10A8 : 0110 0110           	dc.l	$01100110
(1)  752/    10AC : 0000 0110           	dc.l	$00000110
(1)  753/    10B0 : 0000 0000           	dc.l	$00000000
(1)  754/    10B4 : 0000 1000           	dc.l	$00001000	;	Tile (col 04, row 5)
(1)  755/    10B8 : 0001 1000           	dc.l	$00011000
(1)  756/    10BC : 0011 1000           	dc.l	$00111000
(1)  757/    10C0 : 0111 1000           	dc.l	$01111000
(1)  758/    10C4 : 0011 1000           	dc.l	$00111000
(1)  759/    10C8 : 0001 1000           	dc.l	$00011000
(1)  760/    10CC : 0000 1000           	dc.l	$00001000
(1)  761/    10D0 : 0000 0000           	dc.l	$00000000
(1)  762/    10D4 : 0001 0000           	dc.l	$00010000	;	Tile (col 05, row 5)
(1)  763/    10D8 : 0001 1000           	dc.l	$00011000
(1)  764/    10DC : 0001 1100           	dc.l	$00011100
(1)  765/    10E0 : 0001 1110           	dc.l	$00011110
(1)  766/    10E4 : 0001 1100           	dc.l	$00011100
(1)  767/    10E8 : 0001 1000           	dc.l	$00011000
(1)  768/    10EC : 0001 0000           	dc.l	$00010000
(1)  769/    10F0 : 0000 0000           	dc.l	$00000000
(1)  770/    10F4 :                     
     427/    10F4 :                     
     428/    10F4 :                     STR_Strings: include "assets/Strings.asm"
(1)    1/    10F4 :                     ; Declaration of text
(1)    2/    10F4 :                     Strings:
(1)    3/    10F4 :                     
(1)    4/    10F4 : (MACRO)[6]          	String0: 	dfntxt "Systems Presentation: 68k vs x86"
(1)    4/    10F4 : =$0                 i       set     0
(1)    4/    10F4 :                             while i < strlen("Systems Presentation: 68k vs x86")
(1)    4/    10F4 :                             dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10F4 :                     i       set i + 1
(1)    4/    10F4 :                             endm
(1)    4/    10F4 : 33                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10F5 : =$1                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 26 - 7/13/2025 17:28:33


(1)    4/    10F5 : 59                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10F6 : =$2                 i       set i + 1
(1)    4/    10F6 : 53                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10F7 : =$3                 i       set i + 1
(1)    4/    10F7 : 54                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10F8 : =$4                 i       set i + 1
(1)    4/    10F8 : 45                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10F9 : =$5                 i       set i + 1
(1)    4/    10F9 : 4D                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10FA : =$6                 i       set i + 1
(1)    4/    10FA : 53                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10FB : =$7                 i       set i + 1
(1)    4/    10FB : 00                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10FC : =$8                 i       set i + 1
(1)    4/    10FC : 30                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10FD : =$9                 i       set i + 1
(1)    4/    10FD : 52                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10FE : =$A                 i       set i + 1
(1)    4/    10FE : 45                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    10FF : =$B                 i       set i + 1
(1)    4/    10FF : 53                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1100 : =$C                 i       set i + 1
(1)    4/    1100 : 45                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1101 : =$D                 i       set i + 1
(1)    4/    1101 : 4E                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1102 : =$E                 i       set i + 1
(1)    4/    1102 : 54                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1103 : =$F                 i       set i + 1
(1)    4/    1103 : 41                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1104 : =$10                i       set i + 1
(1)    4/    1104 : 54                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1105 : =$11                i       set i + 1
(1)    4/    1105 : 49                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1106 : =$12                i       set i + 1
(1)    4/    1106 : 4F                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1107 : =$13                i       set i + 1
(1)    4/    1107 : 4E                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1108 : =$14                i       set i + 1
(1)    4/    1108 : 1A                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1109 : =$15                i       set i + 1
(1)    4/    1109 : 00                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    110A : =$16                i       set i + 1
(1)    4/    110A : 16                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    110B : =$17                i       set i + 1
(1)    4/    110B : 18                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    110C : =$18                i       set i + 1
(1)    4/    110C : 4B                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    110D : =$19                i       set i + 1
(1)    4/    110D : 00                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    110E : =$1A                i       set i + 1
(1)    4/    110E : 56                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    110F : =$1B                i       set i + 1
(1)    4/    110F : 53                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1110 : =$1C                i       set i + 1
(1)    4/    1110 : 00                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1111 : =$1D                i       set i + 1
(1)    4/    1111 : 58                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1112 : =$1E                i       set i + 1
(1)    4/    1112 : 18                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1113 : =$1F                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 27 - 7/13/2025 17:28:33


(1)    4/    1113 : 16                          dc.b    (substr("Systems Presentation: 68k vs x86", i, 1) - $20)
(1)    4/    1114 : =$20                i       set i + 1
(1)    4/    1114 :                     
(1)    5/    1114 : (MACRO)[40]         	String1: 	dfntxt "In today's lesson we are going to cover:"
(1)    5/    1114 : =$0                 i       set     0
(1)    5/    1114 :                             while i < strlen("In today's lesson we are going to cover:")
(1)    5/    1114 :                             dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1114 :                     i       set i + 1
(1)    5/    1114 :                             endm
(1)    5/    1114 : 29                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1115 : =$1                 i       set i + 1
(1)    5/    1115 : 4E                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1116 : =$2                 i       set i + 1
(1)    5/    1116 : 00                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1117 : =$3                 i       set i + 1
(1)    5/    1117 : 54                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1118 : =$4                 i       set i + 1
(1)    5/    1118 : 4F                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1119 : =$5                 i       set i + 1
(1)    5/    1119 : 44                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    111A : =$6                 i       set i + 1
(1)    5/    111A : 41                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    111B : =$7                 i       set i + 1
(1)    5/    111B : 59                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    111C : =$8                 i       set i + 1
(1)    5/    111C : 07                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    111D : =$9                 i       set i + 1
(1)    5/    111D : 53                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    111E : =$A                 i       set i + 1
(1)    5/    111E : 00                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    111F : =$B                 i       set i + 1
(1)    5/    111F : 4C                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1120 : =$C                 i       set i + 1
(1)    5/    1120 : 45                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1121 : =$D                 i       set i + 1
(1)    5/    1121 : 53                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1122 : =$E                 i       set i + 1
(1)    5/    1122 : 53                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1123 : =$F                 i       set i + 1
(1)    5/    1123 : 4F                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1124 : =$10                i       set i + 1
(1)    5/    1124 : 4E                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1125 : =$11                i       set i + 1
(1)    5/    1125 : 00                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1126 : =$12                i       set i + 1
(1)    5/    1126 : 57                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1127 : =$13                i       set i + 1
(1)    5/    1127 : 45                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1128 : =$14                i       set i + 1
(1)    5/    1128 : 00                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1129 : =$15                i       set i + 1
(1)    5/    1129 : 41                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    112A : =$16                i       set i + 1
(1)    5/    112A : 52                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    112B : =$17                i       set i + 1
(1)    5/    112B : 45                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    112C : =$18                i       set i + 1
(1)    5/    112C : 00                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    112D : =$19                i       set i + 1
(1)    5/    112D : 47                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 28 - 7/13/2025 17:28:33


(1)    5/    112E : =$1A                i       set i + 1
(1)    5/    112E : 4F                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    112F : =$1B                i       set i + 1
(1)    5/    112F : 49                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1130 : =$1C                i       set i + 1
(1)    5/    1130 : 4E                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1131 : =$1D                i       set i + 1
(1)    5/    1131 : 47                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1132 : =$1E                i       set i + 1
(1)    5/    1132 : 00                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1133 : =$1F                i       set i + 1
(1)    5/    1133 : 54                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1134 : =$20                i       set i + 1
(1)    5/    1134 : 4F                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1135 : =$21                i       set i + 1
(1)    5/    1135 : 00                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1136 : =$22                i       set i + 1
(1)    5/    1136 : 43                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1137 : =$23                i       set i + 1
(1)    5/    1137 : 4F                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1138 : =$24                i       set i + 1
(1)    5/    1138 : 56                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    1139 : =$25                i       set i + 1
(1)    5/    1139 : 45                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    113A : =$26                i       set i + 1
(1)    5/    113A : 52                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    113B : =$27                i       set i + 1
(1)    5/    113B : 1A                          dc.b    (substr("In today's lesson we are going to cover:", i, 1) - $20)
(1)    5/    113C : =$28                i       set i + 1
(1)    5/    113C :                     
(1)    6/    113C : (MACRO)[82]         	String2: 	dfntxt "- Motorola 68000, a 16/32-bit CPU"
(1)    6/    113C : =$0                 i       set     0
(1)    6/    113C :                             while i < strlen("- Motorola 68000, a 16/32-bit CPU")
(1)    6/    113C :                             dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    113C :                     i       set i + 1
(1)    6/    113C :                             endm
(1)    6/    113C : 0D                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    113D : =$1                 i       set i + 1
(1)    6/    113D : 00                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    113E : =$2                 i       set i + 1
(1)    6/    113E : 2D                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    113F : =$3                 i       set i + 1
(1)    6/    113F : 4F                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1140 : =$4                 i       set i + 1
(1)    6/    1140 : 54                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1141 : =$5                 i       set i + 1
(1)    6/    1141 : 4F                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1142 : =$6                 i       set i + 1
(1)    6/    1142 : 52                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1143 : =$7                 i       set i + 1
(1)    6/    1143 : 4F                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1144 : =$8                 i       set i + 1
(1)    6/    1144 : 4C                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1145 : =$9                 i       set i + 1
(1)    6/    1145 : 41                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1146 : =$A                 i       set i + 1
(1)    6/    1146 : 00                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1147 : =$B                 i       set i + 1
(1)    6/    1147 : 16                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1148 : =$C                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 29 - 7/13/2025 17:28:33


(1)    6/    1148 : 18                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1149 : =$D                 i       set i + 1
(1)    6/    1149 : 10                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    114A : =$E                 i       set i + 1
(1)    6/    114A : 10                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    114B : =$F                 i       set i + 1
(1)    6/    114B : 10                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    114C : =$10                i       set i + 1
(1)    6/    114C : 0C                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    114D : =$11                i       set i + 1
(1)    6/    114D : 00                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    114E : =$12                i       set i + 1
(1)    6/    114E : 41                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    114F : =$13                i       set i + 1
(1)    6/    114F : 00                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1150 : =$14                i       set i + 1
(1)    6/    1150 : 11                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1151 : =$15                i       set i + 1
(1)    6/    1151 : 16                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1152 : =$16                i       set i + 1
(1)    6/    1152 : 0F                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1153 : =$17                i       set i + 1
(1)    6/    1153 : 13                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1154 : =$18                i       set i + 1
(1)    6/    1154 : 12                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1155 : =$19                i       set i + 1
(1)    6/    1155 : 0D                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1156 : =$1A                i       set i + 1
(1)    6/    1156 : 42                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1157 : =$1B                i       set i + 1
(1)    6/    1157 : 49                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1158 : =$1C                i       set i + 1
(1)    6/    1158 : 54                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    1159 : =$1D                i       set i + 1
(1)    6/    1159 : 00                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    115A : =$1E                i       set i + 1
(1)    6/    115A : 23                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    115B : =$1F                i       set i + 1
(1)    6/    115B : 30                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    115C : =$20                i       set i + 1
(1)    6/    115C : 35                          dc.b    (substr("- Motorola 68000, a 16/32-bit CPU", i, 1) - $20)
(1)    6/    115D : =$21                i       set i + 1
(1)    6/    115D :                     
(1)    7/    115D : (MACRO)[117]        	String3: 	dfntxt "- Intel 8086, a 16-bit CPU"
(1)    7/    115D : =$0                 i       set     0
(1)    7/    115D :                             while i < strlen("- Intel 8086, a 16-bit CPU")
(1)    7/    115D :                             dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    115D :                     i       set i + 1
(1)    7/    115D :                             endm
(1)    7/    115D : 0D                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    115E : =$1                 i       set i + 1
(1)    7/    115E : 00                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    115F : =$2                 i       set i + 1
(1)    7/    115F : 29                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1160 : =$3                 i       set i + 1
(1)    7/    1160 : 4E                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1161 : =$4                 i       set i + 1
(1)    7/    1161 : 54                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1162 : =$5                 i       set i + 1
(1)    7/    1162 : 45                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 30 - 7/13/2025 17:28:33


(1)    7/    1163 : =$6                 i       set i + 1
(1)    7/    1163 : 4C                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1164 : =$7                 i       set i + 1
(1)    7/    1164 : 00                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1165 : =$8                 i       set i + 1
(1)    7/    1165 : 18                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1166 : =$9                 i       set i + 1
(1)    7/    1166 : 10                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1167 : =$A                 i       set i + 1
(1)    7/    1167 : 18                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1168 : =$B                 i       set i + 1
(1)    7/    1168 : 16                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1169 : =$C                 i       set i + 1
(1)    7/    1169 : 0C                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    116A : =$D                 i       set i + 1
(1)    7/    116A : 00                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    116B : =$E                 i       set i + 1
(1)    7/    116B : 41                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    116C : =$F                 i       set i + 1
(1)    7/    116C : 00                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    116D : =$10                i       set i + 1
(1)    7/    116D : 11                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    116E : =$11                i       set i + 1
(1)    7/    116E : 16                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    116F : =$12                i       set i + 1
(1)    7/    116F : 0D                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1170 : =$13                i       set i + 1
(1)    7/    1170 : 42                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1171 : =$14                i       set i + 1
(1)    7/    1171 : 49                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1172 : =$15                i       set i + 1
(1)    7/    1172 : 54                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1173 : =$16                i       set i + 1
(1)    7/    1173 : 00                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1174 : =$17                i       set i + 1
(1)    7/    1174 : 23                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1175 : =$18                i       set i + 1
(1)    7/    1175 : 30                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1176 : =$19                i       set i + 1
(1)    7/    1176 : 35                          dc.b    (substr("- Intel 8086, a 16-bit CPU", i, 1) - $20)
(1)    7/    1177 : =$1A                i       set i + 1
(1)    7/    1177 :                     
(1)    8/    1177 : (MACRO)[145]        	String4: 	dfntxt "Which topics?"
(1)    8/    1177 : =$0                 i       set     0
(1)    8/    1177 :                             while i < strlen("Which topics?")
(1)    8/    1177 :                             dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    1177 :                     i       set i + 1
(1)    8/    1177 :                             endm
(1)    8/    1177 : 37                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    1178 : =$1                 i       set i + 1
(1)    8/    1178 : 48                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    1179 : =$2                 i       set i + 1
(1)    8/    1179 : 49                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    117A : =$3                 i       set i + 1
(1)    8/    117A : 43                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    117B : =$4                 i       set i + 1
(1)    8/    117B : 48                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    117C : =$5                 i       set i + 1
(1)    8/    117C : 00                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    117D : =$6                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 31 - 7/13/2025 17:28:33


(1)    8/    117D : 54                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    117E : =$7                 i       set i + 1
(1)    8/    117E : 4F                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    117F : =$8                 i       set i + 1
(1)    8/    117F : 50                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    1180 : =$9                 i       set i + 1
(1)    8/    1180 : 49                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    1181 : =$A                 i       set i + 1
(1)    8/    1181 : 43                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    1182 : =$B                 i       set i + 1
(1)    8/    1182 : 53                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    1183 : =$C                 i       set i + 1
(1)    8/    1183 : 1F                          dc.b    (substr("Which topics?", i, 1) - $20)
(1)    8/    1184 : =$D                 i       set i + 1
(1)    8/    1184 :                     
(1)    9/    1184 : (MACRO)[160]        	String5: 	dfntxt "- Introduction to both CPUs (age, specs)"
(1)    9/    1184 : =$0                 i       set     0
(1)    9/    1184 :                             while i < strlen("- Introduction to both CPUs (age, specs)")
(1)    9/    1184 :                             dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1184 :                     i       set i + 1
(1)    9/    1184 :                             endm
(1)    9/    1184 : 0D                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1185 : =$1                 i       set i + 1
(1)    9/    1185 : 00                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1186 : =$2                 i       set i + 1
(1)    9/    1186 : 29                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1187 : =$3                 i       set i + 1
(1)    9/    1187 : 4E                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1188 : =$4                 i       set i + 1
(1)    9/    1188 : 54                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1189 : =$5                 i       set i + 1
(1)    9/    1189 : 52                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    118A : =$6                 i       set i + 1
(1)    9/    118A : 4F                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    118B : =$7                 i       set i + 1
(1)    9/    118B : 44                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    118C : =$8                 i       set i + 1
(1)    9/    118C : 55                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    118D : =$9                 i       set i + 1
(1)    9/    118D : 43                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    118E : =$A                 i       set i + 1
(1)    9/    118E : 54                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    118F : =$B                 i       set i + 1
(1)    9/    118F : 49                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1190 : =$C                 i       set i + 1
(1)    9/    1190 : 4F                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1191 : =$D                 i       set i + 1
(1)    9/    1191 : 4E                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1192 : =$E                 i       set i + 1
(1)    9/    1192 : 00                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1193 : =$F                 i       set i + 1
(1)    9/    1193 : 54                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1194 : =$10                i       set i + 1
(1)    9/    1194 : 4F                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1195 : =$11                i       set i + 1
(1)    9/    1195 : 00                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1196 : =$12                i       set i + 1
(1)    9/    1196 : 42                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1197 : =$13                i       set i + 1
(1)    9/    1197 : 4F                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 32 - 7/13/2025 17:28:33


(1)    9/    1198 : =$14                i       set i + 1
(1)    9/    1198 : 54                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    1199 : =$15                i       set i + 1
(1)    9/    1199 : 48                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    119A : =$16                i       set i + 1
(1)    9/    119A : 00                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    119B : =$17                i       set i + 1
(1)    9/    119B : 23                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    119C : =$18                i       set i + 1
(1)    9/    119C : 30                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    119D : =$19                i       set i + 1
(1)    9/    119D : 35                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    119E : =$1A                i       set i + 1
(1)    9/    119E : 53                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    119F : =$1B                i       set i + 1
(1)    9/    119F : 00                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11A0 : =$1C                i       set i + 1
(1)    9/    11A0 : 08                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11A1 : =$1D                i       set i + 1
(1)    9/    11A1 : 41                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11A2 : =$1E                i       set i + 1
(1)    9/    11A2 : 47                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11A3 : =$1F                i       set i + 1
(1)    9/    11A3 : 45                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11A4 : =$20                i       set i + 1
(1)    9/    11A4 : 0C                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11A5 : =$21                i       set i + 1
(1)    9/    11A5 : 00                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11A6 : =$22                i       set i + 1
(1)    9/    11A6 : 53                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11A7 : =$23                i       set i + 1
(1)    9/    11A7 : 50                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11A8 : =$24                i       set i + 1
(1)    9/    11A8 : 45                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11A9 : =$25                i       set i + 1
(1)    9/    11A9 : 43                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11AA : =$26                i       set i + 1
(1)    9/    11AA : 53                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11AB : =$27                i       set i + 1
(1)    9/    11AB : 09                          dc.b    (substr("- Introduction to both CPUs (age, specs)", i, 1) - $20)
(1)    9/    11AC : =$28                i       set i + 1
(1)    9/    11AC :                     
(1)   10/    11AC : (MACRO)[202]        	String6: 	dfntxt "- Compare the architectures"
(1)   10/    11AC : =$0                 i       set     0
(1)   10/    11AC :                             while i < strlen("- Compare the architectures")
(1)   10/    11AC :                             dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11AC :                     i       set i + 1
(1)   10/    11AC :                             endm
(1)   10/    11AC : 0D                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11AD : =$1                 i       set i + 1
(1)   10/    11AD : 00                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11AE : =$2                 i       set i + 1
(1)   10/    11AE : 23                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11AF : =$3                 i       set i + 1
(1)   10/    11AF : 4F                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11B0 : =$4                 i       set i + 1
(1)   10/    11B0 : 4D                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11B1 : =$5                 i       set i + 1
(1)   10/    11B1 : 50                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11B2 : =$6                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 33 - 7/13/2025 17:28:33


(1)   10/    11B2 : 41                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11B3 : =$7                 i       set i + 1
(1)   10/    11B3 : 52                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11B4 : =$8                 i       set i + 1
(1)   10/    11B4 : 45                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11B5 : =$9                 i       set i + 1
(1)   10/    11B5 : 00                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11B6 : =$A                 i       set i + 1
(1)   10/    11B6 : 54                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11B7 : =$B                 i       set i + 1
(1)   10/    11B7 : 48                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11B8 : =$C                 i       set i + 1
(1)   10/    11B8 : 45                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11B9 : =$D                 i       set i + 1
(1)   10/    11B9 : 00                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11BA : =$E                 i       set i + 1
(1)   10/    11BA : 41                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11BB : =$F                 i       set i + 1
(1)   10/    11BB : 52                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11BC : =$10                i       set i + 1
(1)   10/    11BC : 43                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11BD : =$11                i       set i + 1
(1)   10/    11BD : 48                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11BE : =$12                i       set i + 1
(1)   10/    11BE : 49                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11BF : =$13                i       set i + 1
(1)   10/    11BF : 54                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11C0 : =$14                i       set i + 1
(1)   10/    11C0 : 45                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11C1 : =$15                i       set i + 1
(1)   10/    11C1 : 43                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11C2 : =$16                i       set i + 1
(1)   10/    11C2 : 54                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11C3 : =$17                i       set i + 1
(1)   10/    11C3 : 55                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11C4 : =$18                i       set i + 1
(1)   10/    11C4 : 52                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11C5 : =$19                i       set i + 1
(1)   10/    11C5 : 45                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11C6 : =$1A                i       set i + 1
(1)   10/    11C6 : 53                          dc.b    (substr("- Compare the architectures", i, 1) - $20)
(1)   10/    11C7 : =$1B                i       set i + 1
(1)   10/    11C7 :                     
(1)   11/    11C7 : (MACRO)[231]        	String7: 	dfntxt "- Instruction set differences (assembly)"
(1)   11/    11C7 : =$0                 i       set     0
(1)   11/    11C7 :                             while i < strlen("- Instruction set differences (assembly)")
(1)   11/    11C7 :                             dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11C7 :                     i       set i + 1
(1)   11/    11C7 :                             endm
(1)   11/    11C7 : 0D                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11C8 : =$1                 i       set i + 1
(1)   11/    11C8 : 00                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11C9 : =$2                 i       set i + 1
(1)   11/    11C9 : 29                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11CA : =$3                 i       set i + 1
(1)   11/    11CA : 4E                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11CB : =$4                 i       set i + 1
(1)   11/    11CB : 53                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11CC : =$5                 i       set i + 1
(1)   11/    11CC : 54                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 34 - 7/13/2025 17:28:33


(1)   11/    11CD : =$6                 i       set i + 1
(1)   11/    11CD : 52                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11CE : =$7                 i       set i + 1
(1)   11/    11CE : 55                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11CF : =$8                 i       set i + 1
(1)   11/    11CF : 43                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11D0 : =$9                 i       set i + 1
(1)   11/    11D0 : 54                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11D1 : =$A                 i       set i + 1
(1)   11/    11D1 : 49                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11D2 : =$B                 i       set i + 1
(1)   11/    11D2 : 4F                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11D3 : =$C                 i       set i + 1
(1)   11/    11D3 : 4E                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11D4 : =$D                 i       set i + 1
(1)   11/    11D4 : 00                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11D5 : =$E                 i       set i + 1
(1)   11/    11D5 : 53                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11D6 : =$F                 i       set i + 1
(1)   11/    11D6 : 45                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11D7 : =$10                i       set i + 1
(1)   11/    11D7 : 54                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11D8 : =$11                i       set i + 1
(1)   11/    11D8 : 00                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11D9 : =$12                i       set i + 1
(1)   11/    11D9 : 44                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11DA : =$13                i       set i + 1
(1)   11/    11DA : 49                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11DB : =$14                i       set i + 1
(1)   11/    11DB : 46                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11DC : =$15                i       set i + 1
(1)   11/    11DC : 46                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11DD : =$16                i       set i + 1
(1)   11/    11DD : 45                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11DE : =$17                i       set i + 1
(1)   11/    11DE : 52                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11DF : =$18                i       set i + 1
(1)   11/    11DF : 45                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11E0 : =$19                i       set i + 1
(1)   11/    11E0 : 4E                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11E1 : =$1A                i       set i + 1
(1)   11/    11E1 : 43                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11E2 : =$1B                i       set i + 1
(1)   11/    11E2 : 45                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11E3 : =$1C                i       set i + 1
(1)   11/    11E3 : 53                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11E4 : =$1D                i       set i + 1
(1)   11/    11E4 : 00                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11E5 : =$1E                i       set i + 1
(1)   11/    11E5 : 08                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11E6 : =$1F                i       set i + 1
(1)   11/    11E6 : 41                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11E7 : =$20                i       set i + 1
(1)   11/    11E7 : 53                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11E8 : =$21                i       set i + 1
(1)   11/    11E8 : 53                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11E9 : =$22                i       set i + 1
(1)   11/    11E9 : 45                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11EA : =$23                i       set i + 1
(1)   11/    11EA : 4D                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 35 - 7/13/2025 17:28:33


(1)   11/    11EB : =$24                i       set i + 1
(1)   11/    11EB : 42                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11EC : =$25                i       set i + 1
(1)   11/    11EC : 4C                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11ED : =$26                i       set i + 1
(1)   11/    11ED : 59                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11EE : =$27                i       set i + 1
(1)   11/    11EE : 09                          dc.b    (substr("- Instruction set differences (assembly)", i, 1) - $20)
(1)   11/    11EF : =$28                i       set i + 1
(1)   11/    11EF :                     
(1)   12/    11EF : (MACRO)[273]        	String8: 	dfntxt "- Some practice (coding with the 68k)"
(1)   12/    11EF : =$0                 i       set     0
(1)   12/    11EF :                             while i < strlen("- Some practice (coding with the 68k)")
(1)   12/    11EF :                             dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11EF :                     i       set i + 1
(1)   12/    11EF :                             endm
(1)   12/    11EF : 0D                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11F0 : =$1                 i       set i + 1
(1)   12/    11F0 : 00                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11F1 : =$2                 i       set i + 1
(1)   12/    11F1 : 33                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11F2 : =$3                 i       set i + 1
(1)   12/    11F2 : 4F                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11F3 : =$4                 i       set i + 1
(1)   12/    11F3 : 4D                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11F4 : =$5                 i       set i + 1
(1)   12/    11F4 : 45                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11F5 : =$6                 i       set i + 1
(1)   12/    11F5 : 00                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11F6 : =$7                 i       set i + 1
(1)   12/    11F6 : 50                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11F7 : =$8                 i       set i + 1
(1)   12/    11F7 : 52                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11F8 : =$9                 i       set i + 1
(1)   12/    11F8 : 41                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11F9 : =$A                 i       set i + 1
(1)   12/    11F9 : 43                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11FA : =$B                 i       set i + 1
(1)   12/    11FA : 54                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11FB : =$C                 i       set i + 1
(1)   12/    11FB : 49                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11FC : =$D                 i       set i + 1
(1)   12/    11FC : 43                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11FD : =$E                 i       set i + 1
(1)   12/    11FD : 45                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11FE : =$F                 i       set i + 1
(1)   12/    11FE : 00                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    11FF : =$10                i       set i + 1
(1)   12/    11FF : 08                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1200 : =$11                i       set i + 1
(1)   12/    1200 : 43                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1201 : =$12                i       set i + 1
(1)   12/    1201 : 4F                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1202 : =$13                i       set i + 1
(1)   12/    1202 : 44                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1203 : =$14                i       set i + 1
(1)   12/    1203 : 49                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1204 : =$15                i       set i + 1
(1)   12/    1204 : 4E                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1205 : =$16                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 36 - 7/13/2025 17:28:33


(1)   12/    1205 : 47                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1206 : =$17                i       set i + 1
(1)   12/    1206 : 00                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1207 : =$18                i       set i + 1
(1)   12/    1207 : 57                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1208 : =$19                i       set i + 1
(1)   12/    1208 : 49                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1209 : =$1A                i       set i + 1
(1)   12/    1209 : 54                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    120A : =$1B                i       set i + 1
(1)   12/    120A : 48                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    120B : =$1C                i       set i + 1
(1)   12/    120B : 00                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    120C : =$1D                i       set i + 1
(1)   12/    120C : 54                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    120D : =$1E                i       set i + 1
(1)   12/    120D : 48                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    120E : =$1F                i       set i + 1
(1)   12/    120E : 45                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    120F : =$20                i       set i + 1
(1)   12/    120F : 00                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1210 : =$21                i       set i + 1
(1)   12/    1210 : 16                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1211 : =$22                i       set i + 1
(1)   12/    1211 : 18                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1212 : =$23                i       set i + 1
(1)   12/    1212 : 4B                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1213 : =$24                i       set i + 1
(1)   12/    1213 : 09                          dc.b    (substr("- Some practice (coding with the 68k)", i, 1) - $20)
(1)   12/    1214 : =$25                i       set i + 1
(1)   12/    1214 :                     
(1)   13/    1214 : (MACRO)[312]        	String9: 	dfntxt "- Conclusions (Q&A)"
(1)   13/    1214 : =$0                 i       set     0
(1)   13/    1214 :                             while i < strlen("- Conclusions (Q&A)")
(1)   13/    1214 :                             dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1214 :                     i       set i + 1
(1)   13/    1214 :                             endm
(1)   13/    1214 : 0D                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1215 : =$1                 i       set i + 1
(1)   13/    1215 : 00                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1216 : =$2                 i       set i + 1
(1)   13/    1216 : 23                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1217 : =$3                 i       set i + 1
(1)   13/    1217 : 4F                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1218 : =$4                 i       set i + 1
(1)   13/    1218 : 4E                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1219 : =$5                 i       set i + 1
(1)   13/    1219 : 43                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    121A : =$6                 i       set i + 1
(1)   13/    121A : 4C                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    121B : =$7                 i       set i + 1
(1)   13/    121B : 55                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    121C : =$8                 i       set i + 1
(1)   13/    121C : 53                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    121D : =$9                 i       set i + 1
(1)   13/    121D : 49                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    121E : =$A                 i       set i + 1
(1)   13/    121E : 4F                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    121F : =$B                 i       set i + 1
(1)   13/    121F : 4E                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 37 - 7/13/2025 17:28:33


(1)   13/    1220 : =$C                 i       set i + 1
(1)   13/    1220 : 53                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1221 : =$D                 i       set i + 1
(1)   13/    1221 : 00                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1222 : =$E                 i       set i + 1
(1)   13/    1222 : 08                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1223 : =$F                 i       set i + 1
(1)   13/    1223 : 31                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1224 : =$10                i       set i + 1
(1)   13/    1224 : 06                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1225 : =$11                i       set i + 1
(1)   13/    1225 : 21                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1226 : =$12                i       set i + 1
(1)   13/    1226 : 09                          dc.b    (substr("- Conclusions (Q&A)", i, 1) - $20)
(1)   13/    1227 : =$13                i       set i + 1
(1)   13/    1227 :                     
(1)   14/    1227 :                     
(1)   15/    1227 : (MACRO)[333]        	String10: 	dfntxt "Looking Towards the 8086's Backstory"
(1)   15/    1227 : =$0                 i       set     0
(1)   15/    1227 :                             while i < strlen("Looking Towards the 8086's Backstory")
(1)   15/    1227 :                             dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1227 :                     i       set i + 1
(1)   15/    1227 :                             endm
(1)   15/    1227 : 2C                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1228 : =$1                 i       set i + 1
(1)   15/    1228 : 4F                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1229 : =$2                 i       set i + 1
(1)   15/    1229 : 4F                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    122A : =$3                 i       set i + 1
(1)   15/    122A : 4B                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    122B : =$4                 i       set i + 1
(1)   15/    122B : 49                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    122C : =$5                 i       set i + 1
(1)   15/    122C : 4E                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    122D : =$6                 i       set i + 1
(1)   15/    122D : 47                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    122E : =$7                 i       set i + 1
(1)   15/    122E : 00                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    122F : =$8                 i       set i + 1
(1)   15/    122F : 34                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1230 : =$9                 i       set i + 1
(1)   15/    1230 : 4F                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1231 : =$A                 i       set i + 1
(1)   15/    1231 : 57                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1232 : =$B                 i       set i + 1
(1)   15/    1232 : 41                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1233 : =$C                 i       set i + 1
(1)   15/    1233 : 52                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1234 : =$D                 i       set i + 1
(1)   15/    1234 : 44                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1235 : =$E                 i       set i + 1
(1)   15/    1235 : 53                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1236 : =$F                 i       set i + 1
(1)   15/    1236 : 00                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1237 : =$10                i       set i + 1
(1)   15/    1237 : 54                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1238 : =$11                i       set i + 1
(1)   15/    1238 : 48                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1239 : =$12                i       set i + 1
(1)   15/    1239 : 45                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 38 - 7/13/2025 17:28:33


(1)   15/    123A : =$13                i       set i + 1
(1)   15/    123A : 00                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    123B : =$14                i       set i + 1
(1)   15/    123B : 18                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    123C : =$15                i       set i + 1
(1)   15/    123C : 10                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    123D : =$16                i       set i + 1
(1)   15/    123D : 18                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    123E : =$17                i       set i + 1
(1)   15/    123E : 16                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    123F : =$18                i       set i + 1
(1)   15/    123F : 07                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1240 : =$19                i       set i + 1
(1)   15/    1240 : 53                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1241 : =$1A                i       set i + 1
(1)   15/    1241 : 00                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1242 : =$1B                i       set i + 1
(1)   15/    1242 : 22                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1243 : =$1C                i       set i + 1
(1)   15/    1243 : 41                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1244 : =$1D                i       set i + 1
(1)   15/    1244 : 43                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1245 : =$1E                i       set i + 1
(1)   15/    1245 : 4B                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1246 : =$1F                i       set i + 1
(1)   15/    1246 : 53                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1247 : =$20                i       set i + 1
(1)   15/    1247 : 54                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1248 : =$21                i       set i + 1
(1)   15/    1248 : 4F                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    1249 : =$22                i       set i + 1
(1)   15/    1249 : 52                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    124A : =$23                i       set i + 1
(1)   15/    124A : 59                          dc.b    (substr("Looking Towards the 8086's Backstory", i, 1) - $20)
(1)   15/    124B : =$24                i       set i + 1
(1)   15/    124B :                     
(1)   16/    124B : (MACRO)[371]        	String11:	dfntxt "Launched: 1978 - Discontinued: 1998"
(1)   16/    124B : =$0                 i       set     0
(1)   16/    124B :                             while i < strlen("Launched: 1978 - Discontinued: 1998")
(1)   16/    124B :                             dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    124B :                     i       set i + 1
(1)   16/    124B :                             endm
(1)   16/    124B : 2C                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    124C : =$1                 i       set i + 1
(1)   16/    124C : 41                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    124D : =$2                 i       set i + 1
(1)   16/    124D : 55                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    124E : =$3                 i       set i + 1
(1)   16/    124E : 4E                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    124F : =$4                 i       set i + 1
(1)   16/    124F : 43                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1250 : =$5                 i       set i + 1
(1)   16/    1250 : 48                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1251 : =$6                 i       set i + 1
(1)   16/    1251 : 45                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1252 : =$7                 i       set i + 1
(1)   16/    1252 : 44                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1253 : =$8                 i       set i + 1
(1)   16/    1253 : 1A                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1254 : =$9                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 39 - 7/13/2025 17:28:33


(1)   16/    1254 : 00                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1255 : =$A                 i       set i + 1
(1)   16/    1255 : 11                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1256 : =$B                 i       set i + 1
(1)   16/    1256 : 19                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1257 : =$C                 i       set i + 1
(1)   16/    1257 : 17                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1258 : =$D                 i       set i + 1
(1)   16/    1258 : 18                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1259 : =$E                 i       set i + 1
(1)   16/    1259 : 00                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    125A : =$F                 i       set i + 1
(1)   16/    125A : 0D                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    125B : =$10                i       set i + 1
(1)   16/    125B : 00                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    125C : =$11                i       set i + 1
(1)   16/    125C : 24                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    125D : =$12                i       set i + 1
(1)   16/    125D : 49                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    125E : =$13                i       set i + 1
(1)   16/    125E : 53                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    125F : =$14                i       set i + 1
(1)   16/    125F : 43                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1260 : =$15                i       set i + 1
(1)   16/    1260 : 4F                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1261 : =$16                i       set i + 1
(1)   16/    1261 : 4E                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1262 : =$17                i       set i + 1
(1)   16/    1262 : 54                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1263 : =$18                i       set i + 1
(1)   16/    1263 : 49                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1264 : =$19                i       set i + 1
(1)   16/    1264 : 4E                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1265 : =$1A                i       set i + 1
(1)   16/    1265 : 55                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1266 : =$1B                i       set i + 1
(1)   16/    1266 : 45                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1267 : =$1C                i       set i + 1
(1)   16/    1267 : 44                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1268 : =$1D                i       set i + 1
(1)   16/    1268 : 1A                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    1269 : =$1E                i       set i + 1
(1)   16/    1269 : 00                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    126A : =$1F                i       set i + 1
(1)   16/    126A : 11                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    126B : =$20                i       set i + 1
(1)   16/    126B : 19                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    126C : =$21                i       set i + 1
(1)   16/    126C : 19                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    126D : =$22                i       set i + 1
(1)   16/    126D : 18                          dc.b    (substr("Launched: 1978 - Discontinued: 1998", i, 1) - $20)
(1)   16/    126E : =$23                i       set i + 1
(1)   16/    126E :                     
(1)   17/    126E : (MACRO)[408]        	String12:	dfntxt "It raised the x86 architecture,"
(1)   17/    126E : =$0                 i       set     0
(1)   17/    126E :                             while i < strlen("It raised the x86 architecture,")
(1)   17/    126E :                             dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    126E :                     i       set i + 1
(1)   17/    126E :                             endm
(1)   17/    126E : 29                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 40 - 7/13/2025 17:28:33


(1)   17/    126F : =$1                 i       set i + 1
(1)   17/    126F : 54                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1270 : =$2                 i       set i + 1
(1)   17/    1270 : 00                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1271 : =$3                 i       set i + 1
(1)   17/    1271 : 52                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1272 : =$4                 i       set i + 1
(1)   17/    1272 : 41                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1273 : =$5                 i       set i + 1
(1)   17/    1273 : 49                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1274 : =$6                 i       set i + 1
(1)   17/    1274 : 53                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1275 : =$7                 i       set i + 1
(1)   17/    1275 : 45                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1276 : =$8                 i       set i + 1
(1)   17/    1276 : 44                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1277 : =$9                 i       set i + 1
(1)   17/    1277 : 00                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1278 : =$A                 i       set i + 1
(1)   17/    1278 : 54                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1279 : =$B                 i       set i + 1
(1)   17/    1279 : 48                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    127A : =$C                 i       set i + 1
(1)   17/    127A : 45                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    127B : =$D                 i       set i + 1
(1)   17/    127B : 00                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    127C : =$E                 i       set i + 1
(1)   17/    127C : 58                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    127D : =$F                 i       set i + 1
(1)   17/    127D : 18                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    127E : =$10                i       set i + 1
(1)   17/    127E : 16                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    127F : =$11                i       set i + 1
(1)   17/    127F : 00                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1280 : =$12                i       set i + 1
(1)   17/    1280 : 41                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1281 : =$13                i       set i + 1
(1)   17/    1281 : 52                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1282 : =$14                i       set i + 1
(1)   17/    1282 : 43                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1283 : =$15                i       set i + 1
(1)   17/    1283 : 48                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1284 : =$16                i       set i + 1
(1)   17/    1284 : 49                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1285 : =$17                i       set i + 1
(1)   17/    1285 : 54                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1286 : =$18                i       set i + 1
(1)   17/    1286 : 45                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1287 : =$19                i       set i + 1
(1)   17/    1287 : 43                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1288 : =$1A                i       set i + 1
(1)   17/    1288 : 54                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    1289 : =$1B                i       set i + 1
(1)   17/    1289 : 55                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    128A : =$1C                i       set i + 1
(1)   17/    128A : 52                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    128B : =$1D                i       set i + 1
(1)   17/    128B : 45                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
(1)   17/    128C : =$1E                i       set i + 1
(1)   17/    128C : 0C                          dc.b    (substr("It raised the x86 architecture,", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 41 - 7/13/2025 17:28:33


(1)   17/    128D : =$1F                i       set i + 1
(1)   17/    128D :                     
(1)   18/    128D : (MACRO)[441]        	String13:	dfntxt "which is what we use today on computers."
(1)   18/    128D : =$0                 i       set     0
(1)   18/    128D :                             while i < strlen("which is what we use today on computers.")
(1)   18/    128D :                             dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    128D :                     i       set i + 1
(1)   18/    128D :                             endm
(1)   18/    128D : 57                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    128E : =$1                 i       set i + 1
(1)   18/    128E : 48                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    128F : =$2                 i       set i + 1
(1)   18/    128F : 49                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    1290 : =$3                 i       set i + 1
(1)   18/    1290 : 43                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    1291 : =$4                 i       set i + 1
(1)   18/    1291 : 48                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    1292 : =$5                 i       set i + 1
(1)   18/    1292 : 00                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    1293 : =$6                 i       set i + 1
(1)   18/    1293 : 49                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    1294 : =$7                 i       set i + 1
(1)   18/    1294 : 53                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    1295 : =$8                 i       set i + 1
(1)   18/    1295 : 00                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    1296 : =$9                 i       set i + 1
(1)   18/    1296 : 57                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    1297 : =$A                 i       set i + 1
(1)   18/    1297 : 48                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    1298 : =$B                 i       set i + 1
(1)   18/    1298 : 41                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    1299 : =$C                 i       set i + 1
(1)   18/    1299 : 54                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    129A : =$D                 i       set i + 1
(1)   18/    129A : 00                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    129B : =$E                 i       set i + 1
(1)   18/    129B : 57                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    129C : =$F                 i       set i + 1
(1)   18/    129C : 45                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    129D : =$10                i       set i + 1
(1)   18/    129D : 00                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    129E : =$11                i       set i + 1
(1)   18/    129E : 55                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    129F : =$12                i       set i + 1
(1)   18/    129F : 53                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12A0 : =$13                i       set i + 1
(1)   18/    12A0 : 45                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12A1 : =$14                i       set i + 1
(1)   18/    12A1 : 00                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12A2 : =$15                i       set i + 1
(1)   18/    12A2 : 54                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12A3 : =$16                i       set i + 1
(1)   18/    12A3 : 4F                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12A4 : =$17                i       set i + 1
(1)   18/    12A4 : 44                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12A5 : =$18                i       set i + 1
(1)   18/    12A5 : 41                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12A6 : =$19                i       set i + 1
(1)   18/    12A6 : 59                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12A7 : =$1A                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 42 - 7/13/2025 17:28:33


(1)   18/    12A7 : 00                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12A8 : =$1B                i       set i + 1
(1)   18/    12A8 : 4F                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12A9 : =$1C                i       set i + 1
(1)   18/    12A9 : 4E                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12AA : =$1D                i       set i + 1
(1)   18/    12AA : 00                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12AB : =$1E                i       set i + 1
(1)   18/    12AB : 43                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12AC : =$1F                i       set i + 1
(1)   18/    12AC : 4F                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12AD : =$20                i       set i + 1
(1)   18/    12AD : 4D                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12AE : =$21                i       set i + 1
(1)   18/    12AE : 50                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12AF : =$22                i       set i + 1
(1)   18/    12AF : 55                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12B0 : =$23                i       set i + 1
(1)   18/    12B0 : 54                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12B1 : =$24                i       set i + 1
(1)   18/    12B1 : 45                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12B2 : =$25                i       set i + 1
(1)   18/    12B2 : 52                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12B3 : =$26                i       set i + 1
(1)   18/    12B3 : 53                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12B4 : =$27                i       set i + 1
(1)   18/    12B4 : 0E                          dc.b    (substr("which is what we use today on computers.", i, 1) - $20)
(1)   18/    12B5 : =$28                i       set i + 1
(1)   18/    12B5 :                     
(1)   19/    12B5 : (MACRO)[483]        	String14:	dfntxt "For the time,"
(1)   19/    12B5 : =$0                 i       set     0
(1)   19/    12B5 :                             while i < strlen("For the time,")
(1)   19/    12B5 :                             dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12B5 :                     i       set i + 1
(1)   19/    12B5 :                             endm
(1)   19/    12B5 : 26                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12B6 : =$1                 i       set i + 1
(1)   19/    12B6 : 4F                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12B7 : =$2                 i       set i + 1
(1)   19/    12B7 : 52                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12B8 : =$3                 i       set i + 1
(1)   19/    12B8 : 00                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12B9 : =$4                 i       set i + 1
(1)   19/    12B9 : 54                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12BA : =$5                 i       set i + 1
(1)   19/    12BA : 48                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12BB : =$6                 i       set i + 1
(1)   19/    12BB : 45                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12BC : =$7                 i       set i + 1
(1)   19/    12BC : 00                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12BD : =$8                 i       set i + 1
(1)   19/    12BD : 54                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12BE : =$9                 i       set i + 1
(1)   19/    12BE : 49                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12BF : =$A                 i       set i + 1
(1)   19/    12BF : 4D                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12C0 : =$B                 i       set i + 1
(1)   19/    12C0 : 45                          dc.b    (substr("For the time,", i, 1) - $20)
(1)   19/    12C1 : =$C                 i       set i + 1
(1)   19/    12C1 : 0C                          dc.b    (substr("For the time,", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 43 - 7/13/2025 17:28:33


(1)   19/    12C2 : =$D                 i       set i + 1
(1)   19/    12C2 :                     
(1)   20/    12C2 : (MACRO)[498]        	String15:	dfntxt "the original IBM PC used it."
(1)   20/    12C2 : =$0                 i       set     0
(1)   20/    12C2 :                             while i < strlen("the original IBM PC used it.")
(1)   20/    12C2 :                             dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12C2 :                     i       set i + 1
(1)   20/    12C2 :                             endm
(1)   20/    12C2 : 54                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12C3 : =$1                 i       set i + 1
(1)   20/    12C3 : 48                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12C4 : =$2                 i       set i + 1
(1)   20/    12C4 : 45                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12C5 : =$3                 i       set i + 1
(1)   20/    12C5 : 00                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12C6 : =$4                 i       set i + 1
(1)   20/    12C6 : 4F                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12C7 : =$5                 i       set i + 1
(1)   20/    12C7 : 52                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12C8 : =$6                 i       set i + 1
(1)   20/    12C8 : 49                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12C9 : =$7                 i       set i + 1
(1)   20/    12C9 : 47                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12CA : =$8                 i       set i + 1
(1)   20/    12CA : 49                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12CB : =$9                 i       set i + 1
(1)   20/    12CB : 4E                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12CC : =$A                 i       set i + 1
(1)   20/    12CC : 41                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12CD : =$B                 i       set i + 1
(1)   20/    12CD : 4C                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12CE : =$C                 i       set i + 1
(1)   20/    12CE : 00                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12CF : =$D                 i       set i + 1
(1)   20/    12CF : 29                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12D0 : =$E                 i       set i + 1
(1)   20/    12D0 : 22                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12D1 : =$F                 i       set i + 1
(1)   20/    12D1 : 2D                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12D2 : =$10                i       set i + 1
(1)   20/    12D2 : 00                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12D3 : =$11                i       set i + 1
(1)   20/    12D3 : 30                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12D4 : =$12                i       set i + 1
(1)   20/    12D4 : 23                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12D5 : =$13                i       set i + 1
(1)   20/    12D5 : 00                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12D6 : =$14                i       set i + 1
(1)   20/    12D6 : 55                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12D7 : =$15                i       set i + 1
(1)   20/    12D7 : 53                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12D8 : =$16                i       set i + 1
(1)   20/    12D8 : 45                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12D9 : =$17                i       set i + 1
(1)   20/    12D9 : 44                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12DA : =$18                i       set i + 1
(1)   20/    12DA : 00                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12DB : =$19                i       set i + 1
(1)   20/    12DB : 49                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12DC : =$1A                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 44 - 7/13/2025 17:28:33


(1)   20/    12DC : 54                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12DD : =$1B                i       set i + 1
(1)   20/    12DD : 0E                          dc.b    (substr("the original IBM PC used it.", i, 1) - $20)
(1)   20/    12DE : =$1C                i       set i + 1
(1)   20/    12DE :                     
(1)   21/    12DE : (MACRO)[528]        	String16:	dfntxt "Technical Specifications"
(1)   21/    12DE : =$0                 i       set     0
(1)   21/    12DE :                             while i < strlen("Technical Specifications")
(1)   21/    12DE :                             dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12DE :                     i       set i + 1
(1)   21/    12DE :                             endm
(1)   21/    12DE : 34                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12DF : =$1                 i       set i + 1
(1)   21/    12DF : 45                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12E0 : =$2                 i       set i + 1
(1)   21/    12E0 : 43                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12E1 : =$3                 i       set i + 1
(1)   21/    12E1 : 48                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12E2 : =$4                 i       set i + 1
(1)   21/    12E2 : 4E                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12E3 : =$5                 i       set i + 1
(1)   21/    12E3 : 49                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12E4 : =$6                 i       set i + 1
(1)   21/    12E4 : 43                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12E5 : =$7                 i       set i + 1
(1)   21/    12E5 : 41                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12E6 : =$8                 i       set i + 1
(1)   21/    12E6 : 4C                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12E7 : =$9                 i       set i + 1
(1)   21/    12E7 : 00                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12E8 : =$A                 i       set i + 1
(1)   21/    12E8 : 33                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12E9 : =$B                 i       set i + 1
(1)   21/    12E9 : 50                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12EA : =$C                 i       set i + 1
(1)   21/    12EA : 45                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12EB : =$D                 i       set i + 1
(1)   21/    12EB : 43                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12EC : =$E                 i       set i + 1
(1)   21/    12EC : 49                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12ED : =$F                 i       set i + 1
(1)   21/    12ED : 46                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12EE : =$10                i       set i + 1
(1)   21/    12EE : 49                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12EF : =$11                i       set i + 1
(1)   21/    12EF : 43                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12F0 : =$12                i       set i + 1
(1)   21/    12F0 : 41                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12F1 : =$13                i       set i + 1
(1)   21/    12F1 : 54                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12F2 : =$14                i       set i + 1
(1)   21/    12F2 : 49                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12F3 : =$15                i       set i + 1
(1)   21/    12F3 : 4F                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12F4 : =$16                i       set i + 1
(1)   21/    12F4 : 4E                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12F5 : =$17                i       set i + 1
(1)   21/    12F5 : 53                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   21/    12F6 : =$18                i       set i + 1
(1)   21/    12F6 :                     
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 45 - 7/13/2025 17:28:33


(1)   22/    12F6 : (MACRO)[554]        	String17:	dfntxt "Instruction set: x86-16"
(1)   22/    12F6 : =$0                 i       set     0
(1)   22/    12F6 :                             while i < strlen("Instruction set: x86-16")
(1)   22/    12F6 :                             dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    12F6 :                     i       set i + 1
(1)   22/    12F6 :                             endm
(1)   22/    12F6 : 29                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    12F7 : =$1                 i       set i + 1
(1)   22/    12F7 : 4E                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    12F8 : =$2                 i       set i + 1
(1)   22/    12F8 : 53                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    12F9 : =$3                 i       set i + 1
(1)   22/    12F9 : 54                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    12FA : =$4                 i       set i + 1
(1)   22/    12FA : 52                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    12FB : =$5                 i       set i + 1
(1)   22/    12FB : 55                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    12FC : =$6                 i       set i + 1
(1)   22/    12FC : 43                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    12FD : =$7                 i       set i + 1
(1)   22/    12FD : 54                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    12FE : =$8                 i       set i + 1
(1)   22/    12FE : 49                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    12FF : =$9                 i       set i + 1
(1)   22/    12FF : 4F                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    1300 : =$A                 i       set i + 1
(1)   22/    1300 : 4E                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    1301 : =$B                 i       set i + 1
(1)   22/    1301 : 00                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    1302 : =$C                 i       set i + 1
(1)   22/    1302 : 53                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    1303 : =$D                 i       set i + 1
(1)   22/    1303 : 45                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    1304 : =$E                 i       set i + 1
(1)   22/    1304 : 54                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    1305 : =$F                 i       set i + 1
(1)   22/    1305 : 1A                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    1306 : =$10                i       set i + 1
(1)   22/    1306 : 00                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    1307 : =$11                i       set i + 1
(1)   22/    1307 : 58                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    1308 : =$12                i       set i + 1
(1)   22/    1308 : 18                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    1309 : =$13                i       set i + 1
(1)   22/    1309 : 16                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    130A : =$14                i       set i + 1
(1)   22/    130A : 0D                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    130B : =$15                i       set i + 1
(1)   22/    130B : 11                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    130C : =$16                i       set i + 1
(1)   22/    130C : 16                          dc.b    (substr("Instruction set: x86-16", i, 1) - $20)
(1)   22/    130D : =$17                i       set i + 1
(1)   22/    130D :                     
(1)   23/    130D : (MACRO)[579]        	String18:	dfntxt "Transistors: 29000"
(1)   23/    130D : =$0                 i       set     0
(1)   23/    130D :                             while i < strlen("Transistors: 29000")
(1)   23/    130D :                             dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    130D :                     i       set i + 1
(1)   23/    130D :                             endm
(1)   23/    130D : 34                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 46 - 7/13/2025 17:28:33


(1)   23/    130E : =$1                 i       set i + 1
(1)   23/    130E : 52                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    130F : =$2                 i       set i + 1
(1)   23/    130F : 41                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    1310 : =$3                 i       set i + 1
(1)   23/    1310 : 4E                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    1311 : =$4                 i       set i + 1
(1)   23/    1311 : 53                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    1312 : =$5                 i       set i + 1
(1)   23/    1312 : 49                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    1313 : =$6                 i       set i + 1
(1)   23/    1313 : 53                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    1314 : =$7                 i       set i + 1
(1)   23/    1314 : 54                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    1315 : =$8                 i       set i + 1
(1)   23/    1315 : 4F                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    1316 : =$9                 i       set i + 1
(1)   23/    1316 : 52                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    1317 : =$A                 i       set i + 1
(1)   23/    1317 : 53                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    1318 : =$B                 i       set i + 1
(1)   23/    1318 : 1A                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    1319 : =$C                 i       set i + 1
(1)   23/    1319 : 00                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    131A : =$D                 i       set i + 1
(1)   23/    131A : 12                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    131B : =$E                 i       set i + 1
(1)   23/    131B : 19                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    131C : =$F                 i       set i + 1
(1)   23/    131C : 10                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    131D : =$10                i       set i + 1
(1)   23/    131D : 10                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    131E : =$11                i       set i + 1
(1)   23/    131E : 10                          dc.b    (substr("Transistors: 29000", i, 1) - $20)
(1)   23/    131F : =$12                i       set i + 1
(1)   23/    131F :                     
(1)   24/    131F : (MACRO)[599]        	String19:	dfntxt "Technology node: 3000 nm"
(1)   24/    131F : =$0                 i       set     0
(1)   24/    131F :                             while i < strlen("Technology node: 3000 nm")
(1)   24/    131F :                             dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    131F :                     i       set i + 1
(1)   24/    131F :                             endm
(1)   24/    131F : 34                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1320 : =$1                 i       set i + 1
(1)   24/    1320 : 45                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1321 : =$2                 i       set i + 1
(1)   24/    1321 : 43                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1322 : =$3                 i       set i + 1
(1)   24/    1322 : 48                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1323 : =$4                 i       set i + 1
(1)   24/    1323 : 4E                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1324 : =$5                 i       set i + 1
(1)   24/    1324 : 4F                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1325 : =$6                 i       set i + 1
(1)   24/    1325 : 4C                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1326 : =$7                 i       set i + 1
(1)   24/    1326 : 4F                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1327 : =$8                 i       set i + 1
(1)   24/    1327 : 47                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1328 : =$9                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 47 - 7/13/2025 17:28:33


(1)   24/    1328 : 59                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1329 : =$A                 i       set i + 1
(1)   24/    1329 : 00                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    132A : =$B                 i       set i + 1
(1)   24/    132A : 4E                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    132B : =$C                 i       set i + 1
(1)   24/    132B : 4F                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    132C : =$D                 i       set i + 1
(1)   24/    132C : 44                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    132D : =$E                 i       set i + 1
(1)   24/    132D : 45                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    132E : =$F                 i       set i + 1
(1)   24/    132E : 1A                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    132F : =$10                i       set i + 1
(1)   24/    132F : 00                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1330 : =$11                i       set i + 1
(1)   24/    1330 : 13                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1331 : =$12                i       set i + 1
(1)   24/    1331 : 10                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1332 : =$13                i       set i + 1
(1)   24/    1332 : 10                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1333 : =$14                i       set i + 1
(1)   24/    1333 : 10                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1334 : =$15                i       set i + 1
(1)   24/    1334 : 00                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1335 : =$16                i       set i + 1
(1)   24/    1335 : 4E                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1336 : =$17                i       set i + 1
(1)   24/    1336 : 4D                          dc.b    (substr("Technology node: 3000 nm", i, 1) - $20)
(1)   24/    1337 : =$18                i       set i + 1
(1)   24/    1337 :                     
(1)   25/    1337 : (MACRO)[625]        	String20:	dfntxt "Clock ranges: 5 - 10 MHz"
(1)   25/    1337 : =$0                 i       set     0
(1)   25/    1337 :                             while i < strlen("Clock ranges: 5 - 10 MHz")
(1)   25/    1337 :                             dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1337 :                     i       set i + 1
(1)   25/    1337 :                             endm
(1)   25/    1337 : 23                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1338 : =$1                 i       set i + 1
(1)   25/    1338 : 4C                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1339 : =$2                 i       set i + 1
(1)   25/    1339 : 4F                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    133A : =$3                 i       set i + 1
(1)   25/    133A : 43                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    133B : =$4                 i       set i + 1
(1)   25/    133B : 4B                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    133C : =$5                 i       set i + 1
(1)   25/    133C : 00                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    133D : =$6                 i       set i + 1
(1)   25/    133D : 52                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    133E : =$7                 i       set i + 1
(1)   25/    133E : 41                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    133F : =$8                 i       set i + 1
(1)   25/    133F : 4E                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1340 : =$9                 i       set i + 1
(1)   25/    1340 : 47                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1341 : =$A                 i       set i + 1
(1)   25/    1341 : 45                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1342 : =$B                 i       set i + 1
(1)   25/    1342 : 53                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 48 - 7/13/2025 17:28:33


(1)   25/    1343 : =$C                 i       set i + 1
(1)   25/    1343 : 1A                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1344 : =$D                 i       set i + 1
(1)   25/    1344 : 00                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1345 : =$E                 i       set i + 1
(1)   25/    1345 : 15                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1346 : =$F                 i       set i + 1
(1)   25/    1346 : 00                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1347 : =$10                i       set i + 1
(1)   25/    1347 : 0D                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1348 : =$11                i       set i + 1
(1)   25/    1348 : 00                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    1349 : =$12                i       set i + 1
(1)   25/    1349 : 11                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    134A : =$13                i       set i + 1
(1)   25/    134A : 10                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    134B : =$14                i       set i + 1
(1)   25/    134B : 00                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    134C : =$15                i       set i + 1
(1)   25/    134C : 2D                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    134D : =$16                i       set i + 1
(1)   25/    134D : 28                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    134E : =$17                i       set i + 1
(1)   25/    134E : 5A                          dc.b    (substr("Clock ranges: 5 - 10 MHz", i, 1) - $20)
(1)   25/    134F : =$18                i       set i + 1
(1)   25/    134F :                     
(1)   26/    134F :                     
(1)   27/    134F : (MACRO)[651]        	String21:	dfntxt "The History Behind the 68000"
(1)   27/    134F : =$0                 i       set     0
(1)   27/    134F :                             while i < strlen("The History Behind the 68000")
(1)   27/    134F :                             dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    134F :                     i       set i + 1
(1)   27/    134F :                             endm
(1)   27/    134F : 34                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1350 : =$1                 i       set i + 1
(1)   27/    1350 : 48                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1351 : =$2                 i       set i + 1
(1)   27/    1351 : 45                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1352 : =$3                 i       set i + 1
(1)   27/    1352 : 00                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1353 : =$4                 i       set i + 1
(1)   27/    1353 : 28                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1354 : =$5                 i       set i + 1
(1)   27/    1354 : 49                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1355 : =$6                 i       set i + 1
(1)   27/    1355 : 53                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1356 : =$7                 i       set i + 1
(1)   27/    1356 : 54                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1357 : =$8                 i       set i + 1
(1)   27/    1357 : 4F                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1358 : =$9                 i       set i + 1
(1)   27/    1358 : 52                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1359 : =$A                 i       set i + 1
(1)   27/    1359 : 59                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    135A : =$B                 i       set i + 1
(1)   27/    135A : 00                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    135B : =$C                 i       set i + 1
(1)   27/    135B : 22                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    135C : =$D                 i       set i + 1
(1)   27/    135C : 45                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 49 - 7/13/2025 17:28:33


(1)   27/    135D : =$E                 i       set i + 1
(1)   27/    135D : 48                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    135E : =$F                 i       set i + 1
(1)   27/    135E : 49                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    135F : =$10                i       set i + 1
(1)   27/    135F : 4E                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1360 : =$11                i       set i + 1
(1)   27/    1360 : 44                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1361 : =$12                i       set i + 1
(1)   27/    1361 : 00                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1362 : =$13                i       set i + 1
(1)   27/    1362 : 54                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1363 : =$14                i       set i + 1
(1)   27/    1363 : 48                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1364 : =$15                i       set i + 1
(1)   27/    1364 : 45                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1365 : =$16                i       set i + 1
(1)   27/    1365 : 00                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1366 : =$17                i       set i + 1
(1)   27/    1366 : 16                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1367 : =$18                i       set i + 1
(1)   27/    1367 : 18                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1368 : =$19                i       set i + 1
(1)   27/    1368 : 10                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    1369 : =$1A                i       set i + 1
(1)   27/    1369 : 10                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    136A : =$1B                i       set i + 1
(1)   27/    136A : 10                          dc.b    (substr("The History Behind the 68000", i, 1) - $20)
(1)   27/    136B : =$1C                i       set i + 1
(1)   27/    136B :                     
(1)   28/    136B : (MACRO)[681]        	String22:	dfntxt "Launched: 1979 - Discontinued: 1996"
(1)   28/    136B : =$0                 i       set     0
(1)   28/    136B :                             while i < strlen("Launched: 1979 - Discontinued: 1996")
(1)   28/    136B :                             dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    136B :                     i       set i + 1
(1)   28/    136B :                             endm
(1)   28/    136B : 2C                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    136C : =$1                 i       set i + 1
(1)   28/    136C : 41                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    136D : =$2                 i       set i + 1
(1)   28/    136D : 55                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    136E : =$3                 i       set i + 1
(1)   28/    136E : 4E                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    136F : =$4                 i       set i + 1
(1)   28/    136F : 43                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1370 : =$5                 i       set i + 1
(1)   28/    1370 : 48                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1371 : =$6                 i       set i + 1
(1)   28/    1371 : 45                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1372 : =$7                 i       set i + 1
(1)   28/    1372 : 44                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1373 : =$8                 i       set i + 1
(1)   28/    1373 : 1A                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1374 : =$9                 i       set i + 1
(1)   28/    1374 : 00                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1375 : =$A                 i       set i + 1
(1)   28/    1375 : 11                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1376 : =$B                 i       set i + 1
(1)   28/    1376 : 19                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1377 : =$C                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 50 - 7/13/2025 17:28:33


(1)   28/    1377 : 17                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1378 : =$D                 i       set i + 1
(1)   28/    1378 : 19                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1379 : =$E                 i       set i + 1
(1)   28/    1379 : 00                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    137A : =$F                 i       set i + 1
(1)   28/    137A : 0D                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    137B : =$10                i       set i + 1
(1)   28/    137B : 00                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    137C : =$11                i       set i + 1
(1)   28/    137C : 24                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    137D : =$12                i       set i + 1
(1)   28/    137D : 49                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    137E : =$13                i       set i + 1
(1)   28/    137E : 53                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    137F : =$14                i       set i + 1
(1)   28/    137F : 43                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1380 : =$15                i       set i + 1
(1)   28/    1380 : 4F                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1381 : =$16                i       set i + 1
(1)   28/    1381 : 4E                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1382 : =$17                i       set i + 1
(1)   28/    1382 : 54                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1383 : =$18                i       set i + 1
(1)   28/    1383 : 49                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1384 : =$19                i       set i + 1
(1)   28/    1384 : 4E                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1385 : =$1A                i       set i + 1
(1)   28/    1385 : 55                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1386 : =$1B                i       set i + 1
(1)   28/    1386 : 45                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1387 : =$1C                i       set i + 1
(1)   28/    1387 : 44                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1388 : =$1D                i       set i + 1
(1)   28/    1388 : 1A                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    1389 : =$1E                i       set i + 1
(1)   28/    1389 : 00                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    138A : =$1F                i       set i + 1
(1)   28/    138A : 11                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    138B : =$20                i       set i + 1
(1)   28/    138B : 19                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    138C : =$21                i       set i + 1
(1)   28/    138C : 19                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    138D : =$22                i       set i + 1
(1)   28/    138D : 16                          dc.b    (substr("Launched: 1979 - Discontinued: 1996", i, 1) - $20)
(1)   28/    138E : =$23                i       set i + 1
(1)   28/    138E :                     
(1)   29/    138E : (MACRO)[718]        	String23:	dfntxt "It lies on its own architecture,"
(1)   29/    138E : =$0                 i       set     0
(1)   29/    138E :                             while i < strlen("It lies on its own architecture,")
(1)   29/    138E :                             dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    138E :                     i       set i + 1
(1)   29/    138E :                             endm
(1)   29/    138E : 29                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    138F : =$1                 i       set i + 1
(1)   29/    138F : 54                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    1390 : =$2                 i       set i + 1
(1)   29/    1390 : 00                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    1391 : =$3                 i       set i + 1
(1)   29/    1391 : 4C                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 51 - 7/13/2025 17:28:33


(1)   29/    1392 : =$4                 i       set i + 1
(1)   29/    1392 : 49                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    1393 : =$5                 i       set i + 1
(1)   29/    1393 : 45                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    1394 : =$6                 i       set i + 1
(1)   29/    1394 : 53                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    1395 : =$7                 i       set i + 1
(1)   29/    1395 : 00                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    1396 : =$8                 i       set i + 1
(1)   29/    1396 : 4F                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    1397 : =$9                 i       set i + 1
(1)   29/    1397 : 4E                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    1398 : =$A                 i       set i + 1
(1)   29/    1398 : 00                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    1399 : =$B                 i       set i + 1
(1)   29/    1399 : 49                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    139A : =$C                 i       set i + 1
(1)   29/    139A : 54                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    139B : =$D                 i       set i + 1
(1)   29/    139B : 53                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    139C : =$E                 i       set i + 1
(1)   29/    139C : 00                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    139D : =$F                 i       set i + 1
(1)   29/    139D : 4F                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    139E : =$10                i       set i + 1
(1)   29/    139E : 57                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    139F : =$11                i       set i + 1
(1)   29/    139F : 4E                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13A0 : =$12                i       set i + 1
(1)   29/    13A0 : 00                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13A1 : =$13                i       set i + 1
(1)   29/    13A1 : 41                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13A2 : =$14                i       set i + 1
(1)   29/    13A2 : 52                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13A3 : =$15                i       set i + 1
(1)   29/    13A3 : 43                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13A4 : =$16                i       set i + 1
(1)   29/    13A4 : 48                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13A5 : =$17                i       set i + 1
(1)   29/    13A5 : 49                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13A6 : =$18                i       set i + 1
(1)   29/    13A6 : 54                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13A7 : =$19                i       set i + 1
(1)   29/    13A7 : 45                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13A8 : =$1A                i       set i + 1
(1)   29/    13A8 : 43                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13A9 : =$1B                i       set i + 1
(1)   29/    13A9 : 54                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13AA : =$1C                i       set i + 1
(1)   29/    13AA : 55                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13AB : =$1D                i       set i + 1
(1)   29/    13AB : 52                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13AC : =$1E                i       set i + 1
(1)   29/    13AC : 45                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13AD : =$1F                i       set i + 1
(1)   29/    13AD : 0C                          dc.b    (substr("It lies on its own architecture,", i, 1) - $20)
(1)   29/    13AE : =$20                i       set i + 1
(1)   29/    13AE :                     
(1)   30/    13AE : (MACRO)[752]        	String24:	dfntxt "the Motorola 68000 one,"
(1)   30/    13AE : =$0                 i       set     0
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 52 - 7/13/2025 17:28:33


(1)   30/    13AE :                             while i < strlen("the Motorola 68000 one,")
(1)   30/    13AE :                             dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13AE :                     i       set i + 1
(1)   30/    13AE :                             endm
(1)   30/    13AE : 54                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13AF : =$1                 i       set i + 1
(1)   30/    13AF : 48                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13B0 : =$2                 i       set i + 1
(1)   30/    13B0 : 45                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13B1 : =$3                 i       set i + 1
(1)   30/    13B1 : 00                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13B2 : =$4                 i       set i + 1
(1)   30/    13B2 : 2D                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13B3 : =$5                 i       set i + 1
(1)   30/    13B3 : 4F                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13B4 : =$6                 i       set i + 1
(1)   30/    13B4 : 54                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13B5 : =$7                 i       set i + 1
(1)   30/    13B5 : 4F                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13B6 : =$8                 i       set i + 1
(1)   30/    13B6 : 52                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13B7 : =$9                 i       set i + 1
(1)   30/    13B7 : 4F                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13B8 : =$A                 i       set i + 1
(1)   30/    13B8 : 4C                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13B9 : =$B                 i       set i + 1
(1)   30/    13B9 : 41                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13BA : =$C                 i       set i + 1
(1)   30/    13BA : 00                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13BB : =$D                 i       set i + 1
(1)   30/    13BB : 16                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13BC : =$E                 i       set i + 1
(1)   30/    13BC : 18                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13BD : =$F                 i       set i + 1
(1)   30/    13BD : 10                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13BE : =$10                i       set i + 1
(1)   30/    13BE : 10                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13BF : =$11                i       set i + 1
(1)   30/    13BF : 10                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13C0 : =$12                i       set i + 1
(1)   30/    13C0 : 00                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13C1 : =$13                i       set i + 1
(1)   30/    13C1 : 4F                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13C2 : =$14                i       set i + 1
(1)   30/    13C2 : 4E                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13C3 : =$15                i       set i + 1
(1)   30/    13C3 : 45                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13C4 : =$16                i       set i + 1
(1)   30/    13C4 : 0C                          dc.b    (substr("the Motorola 68000 one,", i, 1) - $20)
(1)   30/    13C5 : =$17                i       set i + 1
(1)   30/    13C5 :                     
(1)   31/    13C5 : (MACRO)[777]        	String25:	dfntxt "which is a still-in-use standard."
(1)   31/    13C5 : =$0                 i       set     0
(1)   31/    13C5 :                             while i < strlen("which is a still-in-use standard.")
(1)   31/    13C5 :                             dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13C5 :                     i       set i + 1
(1)   31/    13C5 :                             endm
(1)   31/    13C5 : 57                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13C6 : =$1                 i       set i + 1
(1)   31/    13C6 : 48                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 53 - 7/13/2025 17:28:33


(1)   31/    13C7 : =$2                 i       set i + 1
(1)   31/    13C7 : 49                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13C8 : =$3                 i       set i + 1
(1)   31/    13C8 : 43                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13C9 : =$4                 i       set i + 1
(1)   31/    13C9 : 48                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13CA : =$5                 i       set i + 1
(1)   31/    13CA : 00                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13CB : =$6                 i       set i + 1
(1)   31/    13CB : 49                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13CC : =$7                 i       set i + 1
(1)   31/    13CC : 53                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13CD : =$8                 i       set i + 1
(1)   31/    13CD : 00                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13CE : =$9                 i       set i + 1
(1)   31/    13CE : 41                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13CF : =$A                 i       set i + 1
(1)   31/    13CF : 00                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13D0 : =$B                 i       set i + 1
(1)   31/    13D0 : 53                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13D1 : =$C                 i       set i + 1
(1)   31/    13D1 : 54                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13D2 : =$D                 i       set i + 1
(1)   31/    13D2 : 49                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13D3 : =$E                 i       set i + 1
(1)   31/    13D3 : 4C                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13D4 : =$F                 i       set i + 1
(1)   31/    13D4 : 4C                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13D5 : =$10                i       set i + 1
(1)   31/    13D5 : 0D                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13D6 : =$11                i       set i + 1
(1)   31/    13D6 : 49                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13D7 : =$12                i       set i + 1
(1)   31/    13D7 : 4E                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13D8 : =$13                i       set i + 1
(1)   31/    13D8 : 0D                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13D9 : =$14                i       set i + 1
(1)   31/    13D9 : 55                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13DA : =$15                i       set i + 1
(1)   31/    13DA : 53                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13DB : =$16                i       set i + 1
(1)   31/    13DB : 45                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13DC : =$17                i       set i + 1
(1)   31/    13DC : 00                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13DD : =$18                i       set i + 1
(1)   31/    13DD : 53                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13DE : =$19                i       set i + 1
(1)   31/    13DE : 54                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13DF : =$1A                i       set i + 1
(1)   31/    13DF : 41                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13E0 : =$1B                i       set i + 1
(1)   31/    13E0 : 4E                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13E1 : =$1C                i       set i + 1
(1)   31/    13E1 : 44                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13E2 : =$1D                i       set i + 1
(1)   31/    13E2 : 41                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13E3 : =$1E                i       set i + 1
(1)   31/    13E3 : 52                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13E4 : =$1F                i       set i + 1
(1)   31/    13E4 : 44                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 54 - 7/13/2025 17:28:33


(1)   31/    13E5 : =$20                i       set i + 1
(1)   31/    13E5 : 0E                          dc.b    (substr("which is a still-in-use standard.", i, 1) - $20)
(1)   31/    13E6 : =$21                i       set i + 1
(1)   31/    13E6 :                     
(1)   32/    13E6 : (MACRO)[812]        	String26:	dfntxt "It was widely used in GUI PCs, including"
(1)   32/    13E6 : =$0                 i       set     0
(1)   32/    13E6 :                             while i < strlen("It was widely used in GUI PCs, including")
(1)   32/    13E6 :                             dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13E6 :                     i       set i + 1
(1)   32/    13E6 :                             endm
(1)   32/    13E6 : 29                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13E7 : =$1                 i       set i + 1
(1)   32/    13E7 : 54                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13E8 : =$2                 i       set i + 1
(1)   32/    13E8 : 00                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13E9 : =$3                 i       set i + 1
(1)   32/    13E9 : 57                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13EA : =$4                 i       set i + 1
(1)   32/    13EA : 41                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13EB : =$5                 i       set i + 1
(1)   32/    13EB : 53                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13EC : =$6                 i       set i + 1
(1)   32/    13EC : 00                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13ED : =$7                 i       set i + 1
(1)   32/    13ED : 57                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13EE : =$8                 i       set i + 1
(1)   32/    13EE : 49                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13EF : =$9                 i       set i + 1
(1)   32/    13EF : 44                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13F0 : =$A                 i       set i + 1
(1)   32/    13F0 : 45                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13F1 : =$B                 i       set i + 1
(1)   32/    13F1 : 4C                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13F2 : =$C                 i       set i + 1
(1)   32/    13F2 : 59                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13F3 : =$D                 i       set i + 1
(1)   32/    13F3 : 00                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13F4 : =$E                 i       set i + 1
(1)   32/    13F4 : 55                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13F5 : =$F                 i       set i + 1
(1)   32/    13F5 : 53                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13F6 : =$10                i       set i + 1
(1)   32/    13F6 : 45                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13F7 : =$11                i       set i + 1
(1)   32/    13F7 : 44                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13F8 : =$12                i       set i + 1
(1)   32/    13F8 : 00                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13F9 : =$13                i       set i + 1
(1)   32/    13F9 : 49                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13FA : =$14                i       set i + 1
(1)   32/    13FA : 4E                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13FB : =$15                i       set i + 1
(1)   32/    13FB : 00                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13FC : =$16                i       set i + 1
(1)   32/    13FC : 27                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13FD : =$17                i       set i + 1
(1)   32/    13FD : 35                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13FE : =$18                i       set i + 1
(1)   32/    13FE : 29                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    13FF : =$19                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 55 - 7/13/2025 17:28:33


(1)   32/    13FF : 00                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    1400 : =$1A                i       set i + 1
(1)   32/    1400 : 30                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    1401 : =$1B                i       set i + 1
(1)   32/    1401 : 23                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    1402 : =$1C                i       set i + 1
(1)   32/    1402 : 53                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    1403 : =$1D                i       set i + 1
(1)   32/    1403 : 0C                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    1404 : =$1E                i       set i + 1
(1)   32/    1404 : 00                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    1405 : =$1F                i       set i + 1
(1)   32/    1405 : 49                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    1406 : =$20                i       set i + 1
(1)   32/    1406 : 4E                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    1407 : =$21                i       set i + 1
(1)   32/    1407 : 43                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    1408 : =$22                i       set i + 1
(1)   32/    1408 : 4C                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    1409 : =$23                i       set i + 1
(1)   32/    1409 : 55                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    140A : =$24                i       set i + 1
(1)   32/    140A : 44                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    140B : =$25                i       set i + 1
(1)   32/    140B : 49                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    140C : =$26                i       set i + 1
(1)   32/    140C : 4E                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    140D : =$27                i       set i + 1
(1)   32/    140D : 47                          dc.b    (substr("It was widely used in GUI PCs, including", i, 1) - $20)
(1)   32/    140E : =$28                i       set i + 1
(1)   32/    140E :                     
(1)   33/    140E : (MACRO)[854]        	String27:	dfntxt "several Macintosh machines,"
(1)   33/    140E : =$0                 i       set     0
(1)   33/    140E :                             while i < strlen("several Macintosh machines,")
(1)   33/    140E :                             dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    140E :                     i       set i + 1
(1)   33/    140E :                             endm
(1)   33/    140E : 53                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    140F : =$1                 i       set i + 1
(1)   33/    140F : 45                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1410 : =$2                 i       set i + 1
(1)   33/    1410 : 56                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1411 : =$3                 i       set i + 1
(1)   33/    1411 : 45                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1412 : =$4                 i       set i + 1
(1)   33/    1412 : 52                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1413 : =$5                 i       set i + 1
(1)   33/    1413 : 41                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1414 : =$6                 i       set i + 1
(1)   33/    1414 : 4C                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1415 : =$7                 i       set i + 1
(1)   33/    1415 : 00                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1416 : =$8                 i       set i + 1
(1)   33/    1416 : 2D                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1417 : =$9                 i       set i + 1
(1)   33/    1417 : 41                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1418 : =$A                 i       set i + 1
(1)   33/    1418 : 43                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1419 : =$B                 i       set i + 1
(1)   33/    1419 : 49                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 56 - 7/13/2025 17:28:33


(1)   33/    141A : =$C                 i       set i + 1
(1)   33/    141A : 4E                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    141B : =$D                 i       set i + 1
(1)   33/    141B : 54                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    141C : =$E                 i       set i + 1
(1)   33/    141C : 4F                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    141D : =$F                 i       set i + 1
(1)   33/    141D : 53                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    141E : =$10                i       set i + 1
(1)   33/    141E : 48                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    141F : =$11                i       set i + 1
(1)   33/    141F : 00                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1420 : =$12                i       set i + 1
(1)   33/    1420 : 4D                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1421 : =$13                i       set i + 1
(1)   33/    1421 : 41                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1422 : =$14                i       set i + 1
(1)   33/    1422 : 43                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1423 : =$15                i       set i + 1
(1)   33/    1423 : 48                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1424 : =$16                i       set i + 1
(1)   33/    1424 : 49                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1425 : =$17                i       set i + 1
(1)   33/    1425 : 4E                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1426 : =$18                i       set i + 1
(1)   33/    1426 : 45                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1427 : =$19                i       set i + 1
(1)   33/    1427 : 53                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1428 : =$1A                i       set i + 1
(1)   33/    1428 : 0C                          dc.b    (substr("several Macintosh machines,", i, 1) - $20)
(1)   33/    1429 : =$1B                i       set i + 1
(1)   33/    1429 :                     
(1)   34/    1429 : (MACRO)[883]        	String28:	dfntxt "the (Commodore) Amiga,"
(1)   34/    1429 : =$0                 i       set     0
(1)   34/    1429 :                             while i < strlen("the (Commodore) Amiga,")
(1)   34/    1429 :                             dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1429 :                     i       set i + 1
(1)   34/    1429 :                             endm
(1)   34/    1429 : 54                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    142A : =$1                 i       set i + 1
(1)   34/    142A : 48                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    142B : =$2                 i       set i + 1
(1)   34/    142B : 45                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    142C : =$3                 i       set i + 1
(1)   34/    142C : 00                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    142D : =$4                 i       set i + 1
(1)   34/    142D : 08                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    142E : =$5                 i       set i + 1
(1)   34/    142E : 23                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    142F : =$6                 i       set i + 1
(1)   34/    142F : 4F                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1430 : =$7                 i       set i + 1
(1)   34/    1430 : 4D                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1431 : =$8                 i       set i + 1
(1)   34/    1431 : 4D                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1432 : =$9                 i       set i + 1
(1)   34/    1432 : 4F                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1433 : =$A                 i       set i + 1
(1)   34/    1433 : 44                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1434 : =$B                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 57 - 7/13/2025 17:28:33


(1)   34/    1434 : 4F                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1435 : =$C                 i       set i + 1
(1)   34/    1435 : 52                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1436 : =$D                 i       set i + 1
(1)   34/    1436 : 45                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1437 : =$E                 i       set i + 1
(1)   34/    1437 : 09                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1438 : =$F                 i       set i + 1
(1)   34/    1438 : 00                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    1439 : =$10                i       set i + 1
(1)   34/    1439 : 21                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    143A : =$11                i       set i + 1
(1)   34/    143A : 4D                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    143B : =$12                i       set i + 1
(1)   34/    143B : 49                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    143C : =$13                i       set i + 1
(1)   34/    143C : 47                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    143D : =$14                i       set i + 1
(1)   34/    143D : 41                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    143E : =$15                i       set i + 1
(1)   34/    143E : 0C                          dc.b    (substr("the (Commodore) Amiga,", i, 1) - $20)
(1)   34/    143F : =$16                i       set i + 1
(1)   34/    143F :                     
(1)   35/    143F : (MACRO)[907]        	String29:	dfntxt "the Atari ST,"
(1)   35/    143F : =$0                 i       set     0
(1)   35/    143F :                             while i < strlen("the Atari ST,")
(1)   35/    143F :                             dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    143F :                     i       set i + 1
(1)   35/    143F :                             endm
(1)   35/    143F : 54                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    1440 : =$1                 i       set i + 1
(1)   35/    1440 : 48                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    1441 : =$2                 i       set i + 1
(1)   35/    1441 : 45                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    1442 : =$3                 i       set i + 1
(1)   35/    1442 : 00                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    1443 : =$4                 i       set i + 1
(1)   35/    1443 : 21                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    1444 : =$5                 i       set i + 1
(1)   35/    1444 : 54                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    1445 : =$6                 i       set i + 1
(1)   35/    1445 : 41                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    1446 : =$7                 i       set i + 1
(1)   35/    1446 : 52                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    1447 : =$8                 i       set i + 1
(1)   35/    1447 : 49                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    1448 : =$9                 i       set i + 1
(1)   35/    1448 : 00                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    1449 : =$A                 i       set i + 1
(1)   35/    1449 : 33                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    144A : =$B                 i       set i + 1
(1)   35/    144A : 34                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    144B : =$C                 i       set i + 1
(1)   35/    144B : 0C                          dc.b    (substr("the Atari ST,", i, 1) - $20)
(1)   35/    144C : =$D                 i       set i + 1
(1)   35/    144C :                     
(1)   36/    144C : (MACRO)[922]        	String30:	dfntxt "the (Sharp) X68000."
(1)   36/    144C : =$0                 i       set     0
(1)   36/    144C :                             while i < strlen("the (Sharp) X68000.")
(1)   36/    144C :                             dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 58 - 7/13/2025 17:28:33


(1)   36/    144C :                     i       set i + 1
(1)   36/    144C :                             endm
(1)   36/    144C : 54                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    144D : =$1                 i       set i + 1
(1)   36/    144D : 48                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    144E : =$2                 i       set i + 1
(1)   36/    144E : 45                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    144F : =$3                 i       set i + 1
(1)   36/    144F : 00                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    1450 : =$4                 i       set i + 1
(1)   36/    1450 : 08                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    1451 : =$5                 i       set i + 1
(1)   36/    1451 : 33                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    1452 : =$6                 i       set i + 1
(1)   36/    1452 : 48                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    1453 : =$7                 i       set i + 1
(1)   36/    1453 : 41                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    1454 : =$8                 i       set i + 1
(1)   36/    1454 : 52                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    1455 : =$9                 i       set i + 1
(1)   36/    1455 : 50                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    1456 : =$A                 i       set i + 1
(1)   36/    1456 : 09                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    1457 : =$B                 i       set i + 1
(1)   36/    1457 : 00                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    1458 : =$C                 i       set i + 1
(1)   36/    1458 : 38                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    1459 : =$D                 i       set i + 1
(1)   36/    1459 : 16                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    145A : =$E                 i       set i + 1
(1)   36/    145A : 18                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    145B : =$F                 i       set i + 1
(1)   36/    145B : 10                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    145C : =$10                i       set i + 1
(1)   36/    145C : 10                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    145D : =$11                i       set i + 1
(1)   36/    145D : 10                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    145E : =$12                i       set i + 1
(1)   36/    145E : 0E                          dc.b    (substr("the (Sharp) X68000.", i, 1) - $20)
(1)   36/    145F : =$13                i       set i + 1
(1)   36/    145F :                     
(1)   37/    145F : (MACRO)[943]        	String31:	dfntxt "You know what?"
(1)   37/    145F : =$0                 i       set     0
(1)   37/    145F :                             while i < strlen("You know what?")
(1)   37/    145F :                             dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    145F :                     i       set i + 1
(1)   37/    145F :                             endm
(1)   37/    145F : 39                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    1460 : =$1                 i       set i + 1
(1)   37/    1460 : 4F                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    1461 : =$2                 i       set i + 1
(1)   37/    1461 : 55                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    1462 : =$3                 i       set i + 1
(1)   37/    1462 : 00                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    1463 : =$4                 i       set i + 1
(1)   37/    1463 : 4B                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    1464 : =$5                 i       set i + 1
(1)   37/    1464 : 4E                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    1465 : =$6                 i       set i + 1
(1)   37/    1465 : 4F                          dc.b    (substr("You know what?", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 59 - 7/13/2025 17:28:33


(1)   37/    1466 : =$7                 i       set i + 1
(1)   37/    1466 : 57                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    1467 : =$8                 i       set i + 1
(1)   37/    1467 : 00                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    1468 : =$9                 i       set i + 1
(1)   37/    1468 : 57                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    1469 : =$A                 i       set i + 1
(1)   37/    1469 : 48                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    146A : =$B                 i       set i + 1
(1)   37/    146A : 41                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    146B : =$C                 i       set i + 1
(1)   37/    146B : 54                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    146C : =$D                 i       set i + 1
(1)   37/    146C : 1F                          dc.b    (substr("You know what?", i, 1) - $20)
(1)   37/    146D : =$E                 i       set i + 1
(1)   37/    146D :                     
(1)   38/    146D : (MACRO)[959]        	String32:	dfntxt "This videogame console is"
(1)   38/    146D : =$0                 i       set     0
(1)   38/    146D :                             while i < strlen("This videogame console is")
(1)   38/    146D :                             dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    146D :                     i       set i + 1
(1)   38/    146D :                             endm
(1)   38/    146D : 34                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    146E : =$1                 i       set i + 1
(1)   38/    146E : 48                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    146F : =$2                 i       set i + 1
(1)   38/    146F : 49                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1470 : =$3                 i       set i + 1
(1)   38/    1470 : 53                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1471 : =$4                 i       set i + 1
(1)   38/    1471 : 00                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1472 : =$5                 i       set i + 1
(1)   38/    1472 : 56                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1473 : =$6                 i       set i + 1
(1)   38/    1473 : 49                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1474 : =$7                 i       set i + 1
(1)   38/    1474 : 44                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1475 : =$8                 i       set i + 1
(1)   38/    1475 : 45                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1476 : =$9                 i       set i + 1
(1)   38/    1476 : 4F                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1477 : =$A                 i       set i + 1
(1)   38/    1477 : 47                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1478 : =$B                 i       set i + 1
(1)   38/    1478 : 41                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1479 : =$C                 i       set i + 1
(1)   38/    1479 : 4D                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    147A : =$D                 i       set i + 1
(1)   38/    147A : 45                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    147B : =$E                 i       set i + 1
(1)   38/    147B : 00                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    147C : =$F                 i       set i + 1
(1)   38/    147C : 43                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    147D : =$10                i       set i + 1
(1)   38/    147D : 4F                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    147E : =$11                i       set i + 1
(1)   38/    147E : 4E                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    147F : =$12                i       set i + 1
(1)   38/    147F : 53                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1480 : =$13                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 60 - 7/13/2025 17:28:33


(1)   38/    1480 : 4F                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1481 : =$14                i       set i + 1
(1)   38/    1481 : 4C                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1482 : =$15                i       set i + 1
(1)   38/    1482 : 45                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1483 : =$16                i       set i + 1
(1)   38/    1483 : 00                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1484 : =$17                i       set i + 1
(1)   38/    1484 : 49                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1485 : =$18                i       set i + 1
(1)   38/    1485 : 53                          dc.b    (substr("This videogame console is", i, 1) - $20)
(1)   38/    1486 : =$19                i       set i + 1
(1)   38/    1486 :                     
(1)   39/    1486 : (MACRO)[986]        	String33:	dfntxt "being powered"
(1)   39/    1486 : =$0                 i       set     0
(1)   39/    1486 :                             while i < strlen("being powered")
(1)   39/    1486 :                             dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    1486 :                     i       set i + 1
(1)   39/    1486 :                             endm
(1)   39/    1486 : 42                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    1487 : =$1                 i       set i + 1
(1)   39/    1487 : 45                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    1488 : =$2                 i       set i + 1
(1)   39/    1488 : 49                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    1489 : =$3                 i       set i + 1
(1)   39/    1489 : 4E                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    148A : =$4                 i       set i + 1
(1)   39/    148A : 47                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    148B : =$5                 i       set i + 1
(1)   39/    148B : 00                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    148C : =$6                 i       set i + 1
(1)   39/    148C : 50                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    148D : =$7                 i       set i + 1
(1)   39/    148D : 4F                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    148E : =$8                 i       set i + 1
(1)   39/    148E : 57                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    148F : =$9                 i       set i + 1
(1)   39/    148F : 45                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    1490 : =$A                 i       set i + 1
(1)   39/    1490 : 52                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    1491 : =$B                 i       set i + 1
(1)   39/    1491 : 45                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    1492 : =$C                 i       set i + 1
(1)   39/    1492 : 44                          dc.b    (substr("being powered", i, 1) - $20)
(1)   39/    1493 : =$D                 i       set i + 1
(1)   39/    1493 :                     
(1)   40/    1493 : (MACRO)[1001]       	String34:	dfntxt "by this CPU!"
(1)   40/    1493 : =$0                 i       set     0
(1)   40/    1493 :                             while i < strlen("by this CPU!")
(1)   40/    1493 :                             dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    1493 :                     i       set i + 1
(1)   40/    1493 :                             endm
(1)   40/    1493 : 42                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    1494 : =$1                 i       set i + 1
(1)   40/    1494 : 59                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    1495 : =$2                 i       set i + 1
(1)   40/    1495 : 00                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    1496 : =$3                 i       set i + 1
(1)   40/    1496 : 54                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    1497 : =$4                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 61 - 7/13/2025 17:28:33


(1)   40/    1497 : 48                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    1498 : =$5                 i       set i + 1
(1)   40/    1498 : 49                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    1499 : =$6                 i       set i + 1
(1)   40/    1499 : 53                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    149A : =$7                 i       set i + 1
(1)   40/    149A : 00                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    149B : =$8                 i       set i + 1
(1)   40/    149B : 23                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    149C : =$9                 i       set i + 1
(1)   40/    149C : 30                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    149D : =$A                 i       set i + 1
(1)   40/    149D : 35                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    149E : =$B                 i       set i + 1
(1)   40/    149E : 01                          dc.b    (substr("by this CPU!", i, 1) - $20)
(1)   40/    149F : =$C                 i       set i + 1
(1)   40/    149F :                     
(1)   41/    149F : (MACRO)[1015]       	String35:	dfntxt "Technical Specifications"
(1)   41/    149F : =$0                 i       set     0
(1)   41/    149F :                             while i < strlen("Technical Specifications")
(1)   41/    149F :                             dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    149F :                     i       set i + 1
(1)   41/    149F :                             endm
(1)   41/    149F : 34                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14A0 : =$1                 i       set i + 1
(1)   41/    14A0 : 45                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14A1 : =$2                 i       set i + 1
(1)   41/    14A1 : 43                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14A2 : =$3                 i       set i + 1
(1)   41/    14A2 : 48                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14A3 : =$4                 i       set i + 1
(1)   41/    14A3 : 4E                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14A4 : =$5                 i       set i + 1
(1)   41/    14A4 : 49                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14A5 : =$6                 i       set i + 1
(1)   41/    14A5 : 43                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14A6 : =$7                 i       set i + 1
(1)   41/    14A6 : 41                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14A7 : =$8                 i       set i + 1
(1)   41/    14A7 : 4C                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14A8 : =$9                 i       set i + 1
(1)   41/    14A8 : 00                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14A9 : =$A                 i       set i + 1
(1)   41/    14A9 : 33                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14AA : =$B                 i       set i + 1
(1)   41/    14AA : 50                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14AB : =$C                 i       set i + 1
(1)   41/    14AB : 45                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14AC : =$D                 i       set i + 1
(1)   41/    14AC : 43                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14AD : =$E                 i       set i + 1
(1)   41/    14AD : 49                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14AE : =$F                 i       set i + 1
(1)   41/    14AE : 46                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14AF : =$10                i       set i + 1
(1)   41/    14AF : 49                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14B0 : =$11                i       set i + 1
(1)   41/    14B0 : 43                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14B1 : =$12                i       set i + 1
(1)   41/    14B1 : 41                          dc.b    (substr("Technical Specifications", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 62 - 7/13/2025 17:28:33


(1)   41/    14B2 : =$13                i       set i + 1
(1)   41/    14B2 : 54                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14B3 : =$14                i       set i + 1
(1)   41/    14B3 : 49                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14B4 : =$15                i       set i + 1
(1)   41/    14B4 : 4F                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14B5 : =$16                i       set i + 1
(1)   41/    14B5 : 4E                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14B6 : =$17                i       set i + 1
(1)   41/    14B6 : 53                          dc.b    (substr("Technical Specifications", i, 1) - $20)
(1)   41/    14B7 : =$18                i       set i + 1
(1)   41/    14B7 :                     
(1)   42/    14B7 : (MACRO)[1041]       	String36:	dfntxt "Instruction set: Motorola 68000 series"
(1)   42/    14B7 : =$0                 i       set     0
(1)   42/    14B7 :                             while i < strlen("Instruction set: Motorola 68000 series")
(1)   42/    14B7 :                             dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14B7 :                     i       set i + 1
(1)   42/    14B7 :                             endm
(1)   42/    14B7 : 29                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14B8 : =$1                 i       set i + 1
(1)   42/    14B8 : 4E                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14B9 : =$2                 i       set i + 1
(1)   42/    14B9 : 53                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14BA : =$3                 i       set i + 1
(1)   42/    14BA : 54                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14BB : =$4                 i       set i + 1
(1)   42/    14BB : 52                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14BC : =$5                 i       set i + 1
(1)   42/    14BC : 55                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14BD : =$6                 i       set i + 1
(1)   42/    14BD : 43                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14BE : =$7                 i       set i + 1
(1)   42/    14BE : 54                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14BF : =$8                 i       set i + 1
(1)   42/    14BF : 49                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14C0 : =$9                 i       set i + 1
(1)   42/    14C0 : 4F                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14C1 : =$A                 i       set i + 1
(1)   42/    14C1 : 4E                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14C2 : =$B                 i       set i + 1
(1)   42/    14C2 : 00                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14C3 : =$C                 i       set i + 1
(1)   42/    14C3 : 53                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14C4 : =$D                 i       set i + 1
(1)   42/    14C4 : 45                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14C5 : =$E                 i       set i + 1
(1)   42/    14C5 : 54                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14C6 : =$F                 i       set i + 1
(1)   42/    14C6 : 1A                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14C7 : =$10                i       set i + 1
(1)   42/    14C7 : 00                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14C8 : =$11                i       set i + 1
(1)   42/    14C8 : 2D                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14C9 : =$12                i       set i + 1
(1)   42/    14C9 : 4F                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14CA : =$13                i       set i + 1
(1)   42/    14CA : 54                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14CB : =$14                i       set i + 1
(1)   42/    14CB : 4F                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14CC : =$15                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 63 - 7/13/2025 17:28:33


(1)   42/    14CC : 52                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14CD : =$16                i       set i + 1
(1)   42/    14CD : 4F                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14CE : =$17                i       set i + 1
(1)   42/    14CE : 4C                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14CF : =$18                i       set i + 1
(1)   42/    14CF : 41                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14D0 : =$19                i       set i + 1
(1)   42/    14D0 : 00                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14D1 : =$1A                i       set i + 1
(1)   42/    14D1 : 16                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14D2 : =$1B                i       set i + 1
(1)   42/    14D2 : 18                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14D3 : =$1C                i       set i + 1
(1)   42/    14D3 : 10                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14D4 : =$1D                i       set i + 1
(1)   42/    14D4 : 10                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14D5 : =$1E                i       set i + 1
(1)   42/    14D5 : 10                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14D6 : =$1F                i       set i + 1
(1)   42/    14D6 : 00                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14D7 : =$20                i       set i + 1
(1)   42/    14D7 : 53                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14D8 : =$21                i       set i + 1
(1)   42/    14D8 : 45                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14D9 : =$22                i       set i + 1
(1)   42/    14D9 : 52                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14DA : =$23                i       set i + 1
(1)   42/    14DA : 49                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14DB : =$24                i       set i + 1
(1)   42/    14DB : 45                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14DC : =$25                i       set i + 1
(1)   42/    14DC : 53                          dc.b    (substr("Instruction set: Motorola 68000 series", i, 1) - $20)
(1)   42/    14DD : =$26                i       set i + 1
(1)   42/    14DD :                     
(1)   43/    14DD : (MACRO)[1081]       	String37:	dfntxt "Transistors: 68000 (hence the name)"
(1)   43/    14DD : =$0                 i       set     0
(1)   43/    14DD :                             while i < strlen("Transistors: 68000 (hence the name)")
(1)   43/    14DD :                             dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14DD :                     i       set i + 1
(1)   43/    14DD :                             endm
(1)   43/    14DD : 34                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14DE : =$1                 i       set i + 1
(1)   43/    14DE : 52                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14DF : =$2                 i       set i + 1
(1)   43/    14DF : 41                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14E0 : =$3                 i       set i + 1
(1)   43/    14E0 : 4E                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14E1 : =$4                 i       set i + 1
(1)   43/    14E1 : 53                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14E2 : =$5                 i       set i + 1
(1)   43/    14E2 : 49                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14E3 : =$6                 i       set i + 1
(1)   43/    14E3 : 53                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14E4 : =$7                 i       set i + 1
(1)   43/    14E4 : 54                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14E5 : =$8                 i       set i + 1
(1)   43/    14E5 : 4F                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14E6 : =$9                 i       set i + 1
(1)   43/    14E6 : 52                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 64 - 7/13/2025 17:28:33


(1)   43/    14E7 : =$A                 i       set i + 1
(1)   43/    14E7 : 53                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14E8 : =$B                 i       set i + 1
(1)   43/    14E8 : 1A                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14E9 : =$C                 i       set i + 1
(1)   43/    14E9 : 00                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14EA : =$D                 i       set i + 1
(1)   43/    14EA : 16                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14EB : =$E                 i       set i + 1
(1)   43/    14EB : 18                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14EC : =$F                 i       set i + 1
(1)   43/    14EC : 10                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14ED : =$10                i       set i + 1
(1)   43/    14ED : 10                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14EE : =$11                i       set i + 1
(1)   43/    14EE : 10                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14EF : =$12                i       set i + 1
(1)   43/    14EF : 00                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14F0 : =$13                i       set i + 1
(1)   43/    14F0 : 08                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14F1 : =$14                i       set i + 1
(1)   43/    14F1 : 48                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14F2 : =$15                i       set i + 1
(1)   43/    14F2 : 45                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14F3 : =$16                i       set i + 1
(1)   43/    14F3 : 4E                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14F4 : =$17                i       set i + 1
(1)   43/    14F4 : 43                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14F5 : =$18                i       set i + 1
(1)   43/    14F5 : 45                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14F6 : =$19                i       set i + 1
(1)   43/    14F6 : 00                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14F7 : =$1A                i       set i + 1
(1)   43/    14F7 : 54                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14F8 : =$1B                i       set i + 1
(1)   43/    14F8 : 48                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14F9 : =$1C                i       set i + 1
(1)   43/    14F9 : 45                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14FA : =$1D                i       set i + 1
(1)   43/    14FA : 00                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14FB : =$1E                i       set i + 1
(1)   43/    14FB : 4E                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14FC : =$1F                i       set i + 1
(1)   43/    14FC : 41                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14FD : =$20                i       set i + 1
(1)   43/    14FD : 4D                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14FE : =$21                i       set i + 1
(1)   43/    14FE : 45                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    14FF : =$22                i       set i + 1
(1)   43/    14FF : 09                          dc.b    (substr("Transistors: 68000 (hence the name)", i, 1) - $20)
(1)   43/    1500 : =$23                i       set i + 1
(1)   43/    1500 :                     
(1)   44/    1500 : (MACRO)[1118]       	String38:	dfntxt "Technology node: 3500 nm"
(1)   44/    1500 : =$0                 i       set     0
(1)   44/    1500 :                             while i < strlen("Technology node: 3500 nm")
(1)   44/    1500 :                             dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1500 :                     i       set i + 1
(1)   44/    1500 :                             endm
(1)   44/    1500 : 34                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1501 : =$1                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 65 - 7/13/2025 17:28:33


(1)   44/    1501 : 45                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1502 : =$2                 i       set i + 1
(1)   44/    1502 : 43                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1503 : =$3                 i       set i + 1
(1)   44/    1503 : 48                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1504 : =$4                 i       set i + 1
(1)   44/    1504 : 4E                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1505 : =$5                 i       set i + 1
(1)   44/    1505 : 4F                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1506 : =$6                 i       set i + 1
(1)   44/    1506 : 4C                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1507 : =$7                 i       set i + 1
(1)   44/    1507 : 4F                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1508 : =$8                 i       set i + 1
(1)   44/    1508 : 47                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1509 : =$9                 i       set i + 1
(1)   44/    1509 : 59                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    150A : =$A                 i       set i + 1
(1)   44/    150A : 00                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    150B : =$B                 i       set i + 1
(1)   44/    150B : 4E                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    150C : =$C                 i       set i + 1
(1)   44/    150C : 4F                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    150D : =$D                 i       set i + 1
(1)   44/    150D : 44                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    150E : =$E                 i       set i + 1
(1)   44/    150E : 45                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    150F : =$F                 i       set i + 1
(1)   44/    150F : 1A                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1510 : =$10                i       set i + 1
(1)   44/    1510 : 00                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1511 : =$11                i       set i + 1
(1)   44/    1511 : 13                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1512 : =$12                i       set i + 1
(1)   44/    1512 : 15                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1513 : =$13                i       set i + 1
(1)   44/    1513 : 10                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1514 : =$14                i       set i + 1
(1)   44/    1514 : 10                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1515 : =$15                i       set i + 1
(1)   44/    1515 : 00                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1516 : =$16                i       set i + 1
(1)   44/    1516 : 4E                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1517 : =$17                i       set i + 1
(1)   44/    1517 : 4D                          dc.b    (substr("Technology node: 3500 nm", i, 1) - $20)
(1)   44/    1518 : =$18                i       set i + 1
(1)   44/    1518 :                     
(1)   45/    1518 : (MACRO)[1144]       	String39:	dfntxt "Clock ranges: 4 MHz - 16,67 MHz"
(1)   45/    1518 : =$0                 i       set     0
(1)   45/    1518 :                             while i < strlen("Clock ranges: 4 MHz - 16,67 MHz")
(1)   45/    1518 :                             dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1518 :                     i       set i + 1
(1)   45/    1518 :                             endm
(1)   45/    1518 : 23                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1519 : =$1                 i       set i + 1
(1)   45/    1519 : 4C                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    151A : =$2                 i       set i + 1
(1)   45/    151A : 4F                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    151B : =$3                 i       set i + 1
(1)   45/    151B : 43                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 66 - 7/13/2025 17:28:33


(1)   45/    151C : =$4                 i       set i + 1
(1)   45/    151C : 4B                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    151D : =$5                 i       set i + 1
(1)   45/    151D : 00                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    151E : =$6                 i       set i + 1
(1)   45/    151E : 52                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    151F : =$7                 i       set i + 1
(1)   45/    151F : 41                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1520 : =$8                 i       set i + 1
(1)   45/    1520 : 4E                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1521 : =$9                 i       set i + 1
(1)   45/    1521 : 47                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1522 : =$A                 i       set i + 1
(1)   45/    1522 : 45                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1523 : =$B                 i       set i + 1
(1)   45/    1523 : 53                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1524 : =$C                 i       set i + 1
(1)   45/    1524 : 1A                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1525 : =$D                 i       set i + 1
(1)   45/    1525 : 00                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1526 : =$E                 i       set i + 1
(1)   45/    1526 : 14                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1527 : =$F                 i       set i + 1
(1)   45/    1527 : 00                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1528 : =$10                i       set i + 1
(1)   45/    1528 : 2D                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1529 : =$11                i       set i + 1
(1)   45/    1529 : 28                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    152A : =$12                i       set i + 1
(1)   45/    152A : 5A                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    152B : =$13                i       set i + 1
(1)   45/    152B : 00                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    152C : =$14                i       set i + 1
(1)   45/    152C : 0D                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    152D : =$15                i       set i + 1
(1)   45/    152D : 00                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    152E : =$16                i       set i + 1
(1)   45/    152E : 11                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    152F : =$17                i       set i + 1
(1)   45/    152F : 16                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1530 : =$18                i       set i + 1
(1)   45/    1530 : 0C                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1531 : =$19                i       set i + 1
(1)   45/    1531 : 16                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1532 : =$1A                i       set i + 1
(1)   45/    1532 : 17                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1533 : =$1B                i       set i + 1
(1)   45/    1533 : 00                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1534 : =$1C                i       set i + 1
(1)   45/    1534 : 2D                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1535 : =$1D                i       set i + 1
(1)   45/    1535 : 28                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1536 : =$1E                i       set i + 1
(1)   45/    1536 : 5A                          dc.b    (substr("Clock ranges: 4 MHz - 16,67 MHz", i, 1) - $20)
(1)   45/    1537 : =$1F                i       set i + 1
(1)   45/    1537 :                     
(1)   46/    1537 :                     
(1)   47/    1537 : (MACRO)[1177]       	String40:	dfntxt "Architecture Comparison"
(1)   47/    1537 : =$0                 i       set     0
(1)   47/    1537 :                             while i < strlen("Architecture Comparison")
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 67 - 7/13/2025 17:28:33


(1)   47/    1537 :                             dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1537 :                     i       set i + 1
(1)   47/    1537 :                             endm
(1)   47/    1537 : 21                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1538 : =$1                 i       set i + 1
(1)   47/    1538 : 52                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1539 : =$2                 i       set i + 1
(1)   47/    1539 : 43                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    153A : =$3                 i       set i + 1
(1)   47/    153A : 48                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    153B : =$4                 i       set i + 1
(1)   47/    153B : 49                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    153C : =$5                 i       set i + 1
(1)   47/    153C : 54                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    153D : =$6                 i       set i + 1
(1)   47/    153D : 45                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    153E : =$7                 i       set i + 1
(1)   47/    153E : 43                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    153F : =$8                 i       set i + 1
(1)   47/    153F : 54                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1540 : =$9                 i       set i + 1
(1)   47/    1540 : 55                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1541 : =$A                 i       set i + 1
(1)   47/    1541 : 52                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1542 : =$B                 i       set i + 1
(1)   47/    1542 : 45                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1543 : =$C                 i       set i + 1
(1)   47/    1543 : 00                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1544 : =$D                 i       set i + 1
(1)   47/    1544 : 23                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1545 : =$E                 i       set i + 1
(1)   47/    1545 : 4F                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1546 : =$F                 i       set i + 1
(1)   47/    1546 : 4D                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1547 : =$10                i       set i + 1
(1)   47/    1547 : 50                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1548 : =$11                i       set i + 1
(1)   47/    1548 : 41                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    1549 : =$12                i       set i + 1
(1)   47/    1549 : 52                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    154A : =$13                i       set i + 1
(1)   47/    154A : 49                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    154B : =$14                i       set i + 1
(1)   47/    154B : 53                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    154C : =$15                i       set i + 1
(1)   47/    154C : 4F                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    154D : =$16                i       set i + 1
(1)   47/    154D : 4E                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   47/    154E : =$17                i       set i + 1
(1)   47/    154E :                     
(1)   48/    154E : (MACRO)[1202]       	String41:	dfntxt "Intel 8086 Contents and Syntax"
(1)   48/    154E : =$0                 i       set     0
(1)   48/    154E :                             while i < strlen("Intel 8086 Contents and Syntax")
(1)   48/    154E :                             dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    154E :                     i       set i + 1
(1)   48/    154E :                             endm
(1)   48/    154E : 29                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    154F : =$1                 i       set i + 1
(1)   48/    154F : 4E                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1550 : =$2                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 68 - 7/13/2025 17:28:33


(1)   48/    1550 : 54                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1551 : =$3                 i       set i + 1
(1)   48/    1551 : 45                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1552 : =$4                 i       set i + 1
(1)   48/    1552 : 4C                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1553 : =$5                 i       set i + 1
(1)   48/    1553 : 00                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1554 : =$6                 i       set i + 1
(1)   48/    1554 : 18                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1555 : =$7                 i       set i + 1
(1)   48/    1555 : 10                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1556 : =$8                 i       set i + 1
(1)   48/    1556 : 18                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1557 : =$9                 i       set i + 1
(1)   48/    1557 : 16                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1558 : =$A                 i       set i + 1
(1)   48/    1558 : 00                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1559 : =$B                 i       set i + 1
(1)   48/    1559 : 23                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    155A : =$C                 i       set i + 1
(1)   48/    155A : 4F                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    155B : =$D                 i       set i + 1
(1)   48/    155B : 4E                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    155C : =$E                 i       set i + 1
(1)   48/    155C : 54                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    155D : =$F                 i       set i + 1
(1)   48/    155D : 45                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    155E : =$10                i       set i + 1
(1)   48/    155E : 4E                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    155F : =$11                i       set i + 1
(1)   48/    155F : 54                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1560 : =$12                i       set i + 1
(1)   48/    1560 : 53                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1561 : =$13                i       set i + 1
(1)   48/    1561 : 00                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1562 : =$14                i       set i + 1
(1)   48/    1562 : 41                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1563 : =$15                i       set i + 1
(1)   48/    1563 : 4E                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1564 : =$16                i       set i + 1
(1)   48/    1564 : 44                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1565 : =$17                i       set i + 1
(1)   48/    1565 : 00                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1566 : =$18                i       set i + 1
(1)   48/    1566 : 33                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1567 : =$19                i       set i + 1
(1)   48/    1567 : 59                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1568 : =$1A                i       set i + 1
(1)   48/    1568 : 4E                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    1569 : =$1B                i       set i + 1
(1)   48/    1569 : 54                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    156A : =$1C                i       set i + 1
(1)   48/    156A : 41                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    156B : =$1D                i       set i + 1
(1)   48/    156B : 58                          dc.b    (substr("Intel 8086 Contents and Syntax", i, 1) - $20)
(1)   48/    156C : =$1E                i       set i + 1
(1)   48/    156C :                     
(1)   49/    156C : (MACRO)[1234]       	String42:	dfntxt "General purpose registers:"
(1)   49/    156C : =$0                 i       set     0
(1)   49/    156C :                             while i < strlen("General purpose registers:")
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 69 - 7/13/2025 17:28:33


(1)   49/    156C :                             dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    156C :                     i       set i + 1
(1)   49/    156C :                             endm
(1)   49/    156C : 27                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    156D : =$1                 i       set i + 1
(1)   49/    156D : 45                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    156E : =$2                 i       set i + 1
(1)   49/    156E : 4E                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    156F : =$3                 i       set i + 1
(1)   49/    156F : 45                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1570 : =$4                 i       set i + 1
(1)   49/    1570 : 52                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1571 : =$5                 i       set i + 1
(1)   49/    1571 : 41                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1572 : =$6                 i       set i + 1
(1)   49/    1572 : 4C                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1573 : =$7                 i       set i + 1
(1)   49/    1573 : 00                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1574 : =$8                 i       set i + 1
(1)   49/    1574 : 50                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1575 : =$9                 i       set i + 1
(1)   49/    1575 : 55                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1576 : =$A                 i       set i + 1
(1)   49/    1576 : 52                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1577 : =$B                 i       set i + 1
(1)   49/    1577 : 50                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1578 : =$C                 i       set i + 1
(1)   49/    1578 : 4F                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1579 : =$D                 i       set i + 1
(1)   49/    1579 : 53                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    157A : =$E                 i       set i + 1
(1)   49/    157A : 45                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    157B : =$F                 i       set i + 1
(1)   49/    157B : 00                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    157C : =$10                i       set i + 1
(1)   49/    157C : 52                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    157D : =$11                i       set i + 1
(1)   49/    157D : 45                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    157E : =$12                i       set i + 1
(1)   49/    157E : 47                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    157F : =$13                i       set i + 1
(1)   49/    157F : 49                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1580 : =$14                i       set i + 1
(1)   49/    1580 : 53                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1581 : =$15                i       set i + 1
(1)   49/    1581 : 54                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1582 : =$16                i       set i + 1
(1)   49/    1582 : 45                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1583 : =$17                i       set i + 1
(1)   49/    1583 : 52                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1584 : =$18                i       set i + 1
(1)   49/    1584 : 53                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1585 : =$19                i       set i + 1
(1)   49/    1585 : 1A                          dc.b    (substr("General purpose registers:", i, 1) - $20)
(1)   49/    1586 : =$1A                i       set i + 1
(1)   49/    1586 :                     
(1)   50/    1586 : (MACRO)[1262]       	String43:	dfntxt "16-bit"
(1)   50/    1586 : =$0                 i       set     0
(1)   50/    1586 :                             while i < strlen("16-bit")
(1)   50/    1586 :                             dc.b    (substr("16-bit", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 70 - 7/13/2025 17:28:33


(1)   50/    1586 :                     i       set i + 1
(1)   50/    1586 :                             endm
(1)   50/    1586 : 11                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   50/    1587 : =$1                 i       set i + 1
(1)   50/    1587 : 16                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   50/    1588 : =$2                 i       set i + 1
(1)   50/    1588 : 0D                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   50/    1589 : =$3                 i       set i + 1
(1)   50/    1589 : 42                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   50/    158A : =$4                 i       set i + 1
(1)   50/    158A : 49                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   50/    158B : =$5                 i       set i + 1
(1)   50/    158B : 54                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   50/    158C : =$6                 i       set i + 1
(1)   50/    158C :                     
(1)   51/    158C : (MACRO)[1270]       	String44:	dfntxt "AX    [BX]    CX     DX"
(1)   51/    158C : =$0                 i       set     0
(1)   51/    158C :                             while i < strlen("AX    [BX]    CX     DX")
(1)   51/    158C :                             dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    158C :                     i       set i + 1
(1)   51/    158C :                             endm
(1)   51/    158C : 21                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    158D : =$1                 i       set i + 1
(1)   51/    158D : 38                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    158E : =$2                 i       set i + 1
(1)   51/    158E : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    158F : =$3                 i       set i + 1
(1)   51/    158F : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    1590 : =$4                 i       set i + 1
(1)   51/    1590 : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    1591 : =$5                 i       set i + 1
(1)   51/    1591 : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    1592 : =$6                 i       set i + 1
(1)   51/    1592 : 3B                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    1593 : =$7                 i       set i + 1
(1)   51/    1593 : 22                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    1594 : =$8                 i       set i + 1
(1)   51/    1594 : 38                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    1595 : =$9                 i       set i + 1
(1)   51/    1595 : 3D                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    1596 : =$A                 i       set i + 1
(1)   51/    1596 : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    1597 : =$B                 i       set i + 1
(1)   51/    1597 : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    1598 : =$C                 i       set i + 1
(1)   51/    1598 : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    1599 : =$D                 i       set i + 1
(1)   51/    1599 : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    159A : =$E                 i       set i + 1
(1)   51/    159A : 23                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    159B : =$F                 i       set i + 1
(1)   51/    159B : 38                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    159C : =$10                i       set i + 1
(1)   51/    159C : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    159D : =$11                i       set i + 1
(1)   51/    159D : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    159E : =$12                i       set i + 1
(1)   51/    159E : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    159F : =$13                i       set i + 1
(1)   51/    159F : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 71 - 7/13/2025 17:28:33


(1)   51/    15A0 : =$14                i       set i + 1
(1)   51/    15A0 : 00                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    15A1 : =$15                i       set i + 1
(1)   51/    15A1 : 24                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    15A2 : =$16                i       set i + 1
(1)   51/    15A2 : 38                          dc.b    (substr("AX    [BX]    CX     DX", i, 1) - $20)
(1)   51/    15A3 : =$17                i       set i + 1
(1)   51/    15A3 :                     
(1)   52/    15A3 : (MACRO)[1295]       	String45:	dfntxt "|____| |____| |____| |____|"
(1)   52/    15A3 : =$0                 i       set     0
(1)   52/    15A3 :                             while i < strlen("|____| |____| |____| |____|")
(1)   52/    15A3 :                             dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15A3 :                     i       set i + 1
(1)   52/    15A3 :                             endm
(1)   52/    15A3 : 5C                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15A4 : =$1                 i       set i + 1
(1)   52/    15A4 : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15A5 : =$2                 i       set i + 1
(1)   52/    15A5 : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15A6 : =$3                 i       set i + 1
(1)   52/    15A6 : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15A7 : =$4                 i       set i + 1
(1)   52/    15A7 : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15A8 : =$5                 i       set i + 1
(1)   52/    15A8 : 5C                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15A9 : =$6                 i       set i + 1
(1)   52/    15A9 : 00                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15AA : =$7                 i       set i + 1
(1)   52/    15AA : 5C                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15AB : =$8                 i       set i + 1
(1)   52/    15AB : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15AC : =$9                 i       set i + 1
(1)   52/    15AC : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15AD : =$A                 i       set i + 1
(1)   52/    15AD : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15AE : =$B                 i       set i + 1
(1)   52/    15AE : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15AF : =$C                 i       set i + 1
(1)   52/    15AF : 5C                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15B0 : =$D                 i       set i + 1
(1)   52/    15B0 : 00                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15B1 : =$E                 i       set i + 1
(1)   52/    15B1 : 5C                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15B2 : =$F                 i       set i + 1
(1)   52/    15B2 : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15B3 : =$10                i       set i + 1
(1)   52/    15B3 : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15B4 : =$11                i       set i + 1
(1)   52/    15B4 : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15B5 : =$12                i       set i + 1
(1)   52/    15B5 : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15B6 : =$13                i       set i + 1
(1)   52/    15B6 : 5C                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15B7 : =$14                i       set i + 1
(1)   52/    15B7 : 00                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15B8 : =$15                i       set i + 1
(1)   52/    15B8 : 5C                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15B9 : =$16                i       set i + 1
(1)   52/    15B9 : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15BA : =$17                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 72 - 7/13/2025 17:28:33


(1)   52/    15BA : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15BB : =$18                i       set i + 1
(1)   52/    15BB : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15BC : =$19                i       set i + 1
(1)   52/    15BC : 3F                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15BD : =$1A                i       set i + 1
(1)   52/    15BD : 5C                          dc.b    (substr("|____| |____| |____| |____|", i, 1) - $20)
(1)   52/    15BE : =$1B                i       set i + 1
(1)   52/    15BE :                     
(1)   53/    15BE : (MACRO)[1324]       	String46:	dfntxt "|      |      |      |"
(1)   53/    15BE : =$0                 i       set     0
(1)   53/    15BE :                             while i < strlen("|      |      |      |")
(1)   53/    15BE :                             dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15BE :                     i       set i + 1
(1)   53/    15BE :                             endm
(1)   53/    15BE : 5C                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15BF : =$1                 i       set i + 1
(1)   53/    15BF : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15C0 : =$2                 i       set i + 1
(1)   53/    15C0 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15C1 : =$3                 i       set i + 1
(1)   53/    15C1 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15C2 : =$4                 i       set i + 1
(1)   53/    15C2 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15C3 : =$5                 i       set i + 1
(1)   53/    15C3 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15C4 : =$6                 i       set i + 1
(1)   53/    15C4 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15C5 : =$7                 i       set i + 1
(1)   53/    15C5 : 5C                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15C6 : =$8                 i       set i + 1
(1)   53/    15C6 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15C7 : =$9                 i       set i + 1
(1)   53/    15C7 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15C8 : =$A                 i       set i + 1
(1)   53/    15C8 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15C9 : =$B                 i       set i + 1
(1)   53/    15C9 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15CA : =$C                 i       set i + 1
(1)   53/    15CA : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15CB : =$D                 i       set i + 1
(1)   53/    15CB : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15CC : =$E                 i       set i + 1
(1)   53/    15CC : 5C                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15CD : =$F                 i       set i + 1
(1)   53/    15CD : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15CE : =$10                i       set i + 1
(1)   53/    15CE : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15CF : =$11                i       set i + 1
(1)   53/    15CF : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15D0 : =$12                i       set i + 1
(1)   53/    15D0 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15D1 : =$13                i       set i + 1
(1)   53/    15D1 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15D2 : =$14                i       set i + 1
(1)   53/    15D2 : 00                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15D3 : =$15                i       set i + 1
(1)   53/    15D3 : 5C                          dc.b    (substr("|      |      |      |", i, 1) - $20)
(1)   53/    15D4 : =$16                i       set i + 1
(1)   53/    15D4 :                     
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 73 - 7/13/2025 17:28:33


(1)   54/    15D4 : (MACRO)[1348]       	String47:	dfntxt "AH AL  BH BL  CH CL  DH DL"
(1)   54/    15D4 : =$0                 i       set     0
(1)   54/    15D4 :                             while i < strlen("AH AL  BH BL  CH CL  DH DL")
(1)   54/    15D4 :                             dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15D4 :                     i       set i + 1
(1)   54/    15D4 :                             endm
(1)   54/    15D4 : 21                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15D5 : =$1                 i       set i + 1
(1)   54/    15D5 : 28                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15D6 : =$2                 i       set i + 1
(1)   54/    15D6 : 00                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15D7 : =$3                 i       set i + 1
(1)   54/    15D7 : 21                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15D8 : =$4                 i       set i + 1
(1)   54/    15D8 : 2C                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15D9 : =$5                 i       set i + 1
(1)   54/    15D9 : 00                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15DA : =$6                 i       set i + 1
(1)   54/    15DA : 00                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15DB : =$7                 i       set i + 1
(1)   54/    15DB : 22                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15DC : =$8                 i       set i + 1
(1)   54/    15DC : 28                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15DD : =$9                 i       set i + 1
(1)   54/    15DD : 00                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15DE : =$A                 i       set i + 1
(1)   54/    15DE : 22                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15DF : =$B                 i       set i + 1
(1)   54/    15DF : 2C                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15E0 : =$C                 i       set i + 1
(1)   54/    15E0 : 00                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15E1 : =$D                 i       set i + 1
(1)   54/    15E1 : 00                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15E2 : =$E                 i       set i + 1
(1)   54/    15E2 : 23                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15E3 : =$F                 i       set i + 1
(1)   54/    15E3 : 28                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15E4 : =$10                i       set i + 1
(1)   54/    15E4 : 00                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15E5 : =$11                i       set i + 1
(1)   54/    15E5 : 23                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15E6 : =$12                i       set i + 1
(1)   54/    15E6 : 2C                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15E7 : =$13                i       set i + 1
(1)   54/    15E7 : 00                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15E8 : =$14                i       set i + 1
(1)   54/    15E8 : 00                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15E9 : =$15                i       set i + 1
(1)   54/    15E9 : 24                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15EA : =$16                i       set i + 1
(1)   54/    15EA : 28                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15EB : =$17                i       set i + 1
(1)   54/    15EB : 00                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15EC : =$18                i       set i + 1
(1)   54/    15EC : 24                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15ED : =$19                i       set i + 1
(1)   54/    15ED : 2C                          dc.b    (substr("AH AL  BH BL  CH CL  DH DL", i, 1) - $20)
(1)   54/    15EE : =$1A                i       set i + 1
(1)   54/    15EE :                     
(1)   55/    15EE : (MACRO)[1376]       	String48:	dfntxt "8-bit"
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 74 - 7/13/2025 17:28:33


(1)   55/    15EE : =$0                 i       set     0
(1)   55/    15EE :                             while i < strlen("8-bit")
(1)   55/    15EE :                             dc.b    (substr("8-bit", i, 1) - $20)
(1)   55/    15EE :                     i       set i + 1
(1)   55/    15EE :                             endm
(1)   55/    15EE : 18                          dc.b    (substr("8-bit", i, 1) - $20)
(1)   55/    15EF : =$1                 i       set i + 1
(1)   55/    15EF : 0D                          dc.b    (substr("8-bit", i, 1) - $20)
(1)   55/    15F0 : =$2                 i       set i + 1
(1)   55/    15F0 : 42                          dc.b    (substr("8-bit", i, 1) - $20)
(1)   55/    15F1 : =$3                 i       set i + 1
(1)   55/    15F1 : 49                          dc.b    (substr("8-bit", i, 1) - $20)
(1)   55/    15F2 : =$4                 i       set i + 1
(1)   55/    15F2 : 54                          dc.b    (substr("8-bit", i, 1) - $20)
(1)   55/    15F3 : =$5                 i       set i + 1
(1)   55/    15F3 :                     
(1)   56/    15F3 : (MACRO)[1383]       	String49:	dfntxt "16-bit"
(1)   56/    15F3 : =$0                 i       set     0
(1)   56/    15F3 :                             while i < strlen("16-bit")
(1)   56/    15F3 :                             dc.b    (substr("16-bit", i, 1) - $20)
(1)   56/    15F3 :                     i       set i + 1
(1)   56/    15F3 :                             endm
(1)   56/    15F3 : 11                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   56/    15F4 : =$1                 i       set i + 1
(1)   56/    15F4 : 16                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   56/    15F5 : =$2                 i       set i + 1
(1)   56/    15F5 : 0D                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   56/    15F6 : =$3                 i       set i + 1
(1)   56/    15F6 : 42                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   56/    15F7 : =$4                 i       set i + 1
(1)   56/    15F7 : 49                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   56/    15F8 : =$5                 i       set i + 1
(1)   56/    15F8 : 54                          dc.b    (substr("16-bit", i, 1) - $20)
(1)   56/    15F9 : =$6                 i       set i + 1
(1)   56/    15F9 :                     
(1)   57/    15F9 : (MACRO)[1391]       	String50:	dfntxt "[SI]  [DI]  [BP]  [SP]  [IP]"
(1)   57/    15F9 : =$0                 i       set     0
(1)   57/    15F9 :                             while i < strlen("[SI]  [DI]  [BP]  [SP]  [IP]")
(1)   57/    15F9 :                             dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    15F9 :                     i       set i + 1
(1)   57/    15F9 :                             endm
(1)   57/    15F9 : 3B                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    15FA : =$1                 i       set i + 1
(1)   57/    15FA : 33                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    15FB : =$2                 i       set i + 1
(1)   57/    15FB : 29                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    15FC : =$3                 i       set i + 1
(1)   57/    15FC : 3D                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    15FD : =$4                 i       set i + 1
(1)   57/    15FD : 00                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    15FE : =$5                 i       set i + 1
(1)   57/    15FE : 00                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    15FF : =$6                 i       set i + 1
(1)   57/    15FF : 3B                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1600 : =$7                 i       set i + 1
(1)   57/    1600 : 24                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1601 : =$8                 i       set i + 1
(1)   57/    1601 : 29                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1602 : =$9                 i       set i + 1
(1)   57/    1602 : 3D                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 75 - 7/13/2025 17:28:33


(1)   57/    1603 : =$A                 i       set i + 1
(1)   57/    1603 : 00                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1604 : =$B                 i       set i + 1
(1)   57/    1604 : 00                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1605 : =$C                 i       set i + 1
(1)   57/    1605 : 3B                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1606 : =$D                 i       set i + 1
(1)   57/    1606 : 22                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1607 : =$E                 i       set i + 1
(1)   57/    1607 : 30                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1608 : =$F                 i       set i + 1
(1)   57/    1608 : 3D                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1609 : =$10                i       set i + 1
(1)   57/    1609 : 00                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    160A : =$11                i       set i + 1
(1)   57/    160A : 00                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    160B : =$12                i       set i + 1
(1)   57/    160B : 3B                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    160C : =$13                i       set i + 1
(1)   57/    160C : 33                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    160D : =$14                i       set i + 1
(1)   57/    160D : 30                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    160E : =$15                i       set i + 1
(1)   57/    160E : 3D                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    160F : =$16                i       set i + 1
(1)   57/    160F : 00                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1610 : =$17                i       set i + 1
(1)   57/    1610 : 00                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1611 : =$18                i       set i + 1
(1)   57/    1611 : 3B                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1612 : =$19                i       set i + 1
(1)   57/    1612 : 29                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1613 : =$1A                i       set i + 1
(1)   57/    1613 : 30                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1614 : =$1B                i       set i + 1
(1)   57/    1614 : 3D                          dc.b    (substr("[SI]  [DI]  [BP]  [SP]  [IP]", i, 1) - $20)
(1)   57/    1615 : =$1C                i       set i + 1
(1)   57/    1615 :                     
(1)   58/    1615 : (MACRO)[1421]       	String51:	dfntxt "MOV BX,0200"
(1)   58/    1615 : =$0                 i       set     0
(1)   58/    1615 :                             while i < strlen("MOV BX,0200")
(1)   58/    1615 :                             dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    1615 :                     i       set i + 1
(1)   58/    1615 :                             endm
(1)   58/    1615 : 2D                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    1616 : =$1                 i       set i + 1
(1)   58/    1616 : 2F                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    1617 : =$2                 i       set i + 1
(1)   58/    1617 : 36                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    1618 : =$3                 i       set i + 1
(1)   58/    1618 : 00                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    1619 : =$4                 i       set i + 1
(1)   58/    1619 : 22                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    161A : =$5                 i       set i + 1
(1)   58/    161A : 38                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    161B : =$6                 i       set i + 1
(1)   58/    161B : 0C                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    161C : =$7                 i       set i + 1
(1)   58/    161C : 10                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    161D : =$8                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 76 - 7/13/2025 17:28:33


(1)   58/    161D : 12                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    161E : =$9                 i       set i + 1
(1)   58/    161E : 10                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    161F : =$A                 i       set i + 1
(1)   58/    161F : 10                          dc.b    (substr("MOV BX,0200", i, 1) - $20)
(1)   58/    1620 : =$B                 i       set i + 1
(1)   58/    1620 :                     
(1)   59/    1620 : (MACRO)[1434]       	String52:	dfntxt "MOV AX,[BX]"
(1)   59/    1620 : =$0                 i       set     0
(1)   59/    1620 :                             while i < strlen("MOV AX,[BX]")
(1)   59/    1620 :                             dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    1620 :                     i       set i + 1
(1)   59/    1620 :                             endm
(1)   59/    1620 : 2D                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    1621 : =$1                 i       set i + 1
(1)   59/    1621 : 2F                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    1622 : =$2                 i       set i + 1
(1)   59/    1622 : 36                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    1623 : =$3                 i       set i + 1
(1)   59/    1623 : 00                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    1624 : =$4                 i       set i + 1
(1)   59/    1624 : 21                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    1625 : =$5                 i       set i + 1
(1)   59/    1625 : 38                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    1626 : =$6                 i       set i + 1
(1)   59/    1626 : 0C                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    1627 : =$7                 i       set i + 1
(1)   59/    1627 : 3B                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    1628 : =$8                 i       set i + 1
(1)   59/    1628 : 22                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    1629 : =$9                 i       set i + 1
(1)   59/    1629 : 38                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    162A : =$A                 i       set i + 1
(1)   59/    162A : 3D                          dc.b    (substr("MOV AX,[BX]", i, 1) - $20)
(1)   59/    162B : =$B                 i       set i + 1
(1)   59/    162B :                     
(1)   60/    162B : (MACRO)[1447]       	String53:	dfntxt "Segment registers:"
(1)   60/    162B : =$0                 i       set     0
(1)   60/    162B :                             while i < strlen("Segment registers:")
(1)   60/    162B :                             dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    162B :                     i       set i + 1
(1)   60/    162B :                             endm
(1)   60/    162B : 33                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    162C : =$1                 i       set i + 1
(1)   60/    162C : 45                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    162D : =$2                 i       set i + 1
(1)   60/    162D : 47                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    162E : =$3                 i       set i + 1
(1)   60/    162E : 4D                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    162F : =$4                 i       set i + 1
(1)   60/    162F : 45                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    1630 : =$5                 i       set i + 1
(1)   60/    1630 : 4E                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    1631 : =$6                 i       set i + 1
(1)   60/    1631 : 54                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    1632 : =$7                 i       set i + 1
(1)   60/    1632 : 00                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    1633 : =$8                 i       set i + 1
(1)   60/    1633 : 52                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    1634 : =$9                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 77 - 7/13/2025 17:28:33


(1)   60/    1634 : 45                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    1635 : =$A                 i       set i + 1
(1)   60/    1635 : 47                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    1636 : =$B                 i       set i + 1
(1)   60/    1636 : 49                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    1637 : =$C                 i       set i + 1
(1)   60/    1637 : 53                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    1638 : =$D                 i       set i + 1
(1)   60/    1638 : 54                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    1639 : =$E                 i       set i + 1
(1)   60/    1639 : 45                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    163A : =$F                 i       set i + 1
(1)   60/    163A : 52                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    163B : =$10                i       set i + 1
(1)   60/    163B : 53                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    163C : =$11                i       set i + 1
(1)   60/    163C : 1A                          dc.b    (substr("Segment registers:", i, 1) - $20)
(1)   60/    163D : =$12                i       set i + 1
(1)   60/    163D :                     
(1)   61/    163D : (MACRO)[1467]       	String54:	dfntxt "CS  DS  SS  ES"
(1)   61/    163D : =$0                 i       set     0
(1)   61/    163D :                             while i < strlen("CS  DS  SS  ES")
(1)   61/    163D :                             dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    163D :                     i       set i + 1
(1)   61/    163D :                             endm
(1)   61/    163D : 23                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    163E : =$1                 i       set i + 1
(1)   61/    163E : 33                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    163F : =$2                 i       set i + 1
(1)   61/    163F : 00                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    1640 : =$3                 i       set i + 1
(1)   61/    1640 : 00                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    1641 : =$4                 i       set i + 1
(1)   61/    1641 : 24                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    1642 : =$5                 i       set i + 1
(1)   61/    1642 : 33                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    1643 : =$6                 i       set i + 1
(1)   61/    1643 : 00                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    1644 : =$7                 i       set i + 1
(1)   61/    1644 : 00                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    1645 : =$8                 i       set i + 1
(1)   61/    1645 : 33                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    1646 : =$9                 i       set i + 1
(1)   61/    1646 : 33                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    1647 : =$A                 i       set i + 1
(1)   61/    1647 : 00                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    1648 : =$B                 i       set i + 1
(1)   61/    1648 : 00                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    1649 : =$C                 i       set i + 1
(1)   61/    1649 : 25                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    164A : =$D                 i       set i + 1
(1)   61/    164A : 33                          dc.b    (substr("CS  DS  SS  ES", i, 1) - $20)
(1)   61/    164B : =$E                 i       set i + 1
(1)   61/    164B :                     
(1)   62/    164B : (MACRO)[1483]       	String55:	dfntxt "Flags:"
(1)   62/    164B : =$0                 i       set     0
(1)   62/    164B :                             while i < strlen("Flags:")
(1)   62/    164B :                             dc.b    (substr("Flags:", i, 1) - $20)
(1)   62/    164B :                     i       set i + 1
(1)   62/    164B :                             endm
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 78 - 7/13/2025 17:28:33


(1)   62/    164B : 26                          dc.b    (substr("Flags:", i, 1) - $20)
(1)   62/    164C : =$1                 i       set i + 1
(1)   62/    164C : 4C                          dc.b    (substr("Flags:", i, 1) - $20)
(1)   62/    164D : =$2                 i       set i + 1
(1)   62/    164D : 41                          dc.b    (substr("Flags:", i, 1) - $20)
(1)   62/    164E : =$3                 i       set i + 1
(1)   62/    164E : 47                          dc.b    (substr("Flags:", i, 1) - $20)
(1)   62/    164F : =$4                 i       set i + 1
(1)   62/    164F : 53                          dc.b    (substr("Flags:", i, 1) - $20)
(1)   62/    1650 : =$5                 i       set i + 1
(1)   62/    1650 : 1A                          dc.b    (substr("Flags:", i, 1) - $20)
(1)   62/    1651 : =$6                 i       set i + 1
(1)   62/    1651 :                     
(1)   63/    1651 : (MACRO)[1491]       	String56:	dfntxt "ODITSZAPC"
(1)   63/    1651 : =$0                 i       set     0
(1)   63/    1651 :                             while i < strlen("ODITSZAPC")
(1)   63/    1651 :                             dc.b    (substr("ODITSZAPC", i, 1) - $20)
(1)   63/    1651 :                     i       set i + 1
(1)   63/    1651 :                             endm
(1)   63/    1651 : 2F                          dc.b    (substr("ODITSZAPC", i, 1) - $20)
(1)   63/    1652 : =$1                 i       set i + 1
(1)   63/    1652 : 24                          dc.b    (substr("ODITSZAPC", i, 1) - $20)
(1)   63/    1653 : =$2                 i       set i + 1
(1)   63/    1653 : 29                          dc.b    (substr("ODITSZAPC", i, 1) - $20)
(1)   63/    1654 : =$3                 i       set i + 1
(1)   63/    1654 : 34                          dc.b    (substr("ODITSZAPC", i, 1) - $20)
(1)   63/    1655 : =$4                 i       set i + 1
(1)   63/    1655 : 33                          dc.b    (substr("ODITSZAPC", i, 1) - $20)
(1)   63/    1656 : =$5                 i       set i + 1
(1)   63/    1656 : 3A                          dc.b    (substr("ODITSZAPC", i, 1) - $20)
(1)   63/    1657 : =$6                 i       set i + 1
(1)   63/    1657 : 21                          dc.b    (substr("ODITSZAPC", i, 1) - $20)
(1)   63/    1658 : =$7                 i       set i + 1
(1)   63/    1658 : 30                          dc.b    (substr("ODITSZAPC", i, 1) - $20)
(1)   63/    1659 : =$8                 i       set i + 1
(1)   63/    1659 : 23                          dc.b    (substr("ODITSZAPC", i, 1) - $20)
(1)   63/    165A : =$9                 i       set i + 1
(1)   63/    165A :                     
(1)   64/    165A :                     
(1)   65/    165A : (MACRO)[1502]       	String57:	dfntxt "Architecture Comparison"
(1)   65/    165A : =$0                 i       set     0
(1)   65/    165A :                             while i < strlen("Architecture Comparison")
(1)   65/    165A :                             dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    165A :                     i       set i + 1
(1)   65/    165A :                             endm
(1)   65/    165A : 21                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    165B : =$1                 i       set i + 1
(1)   65/    165B : 52                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    165C : =$2                 i       set i + 1
(1)   65/    165C : 43                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    165D : =$3                 i       set i + 1
(1)   65/    165D : 48                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    165E : =$4                 i       set i + 1
(1)   65/    165E : 49                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    165F : =$5                 i       set i + 1
(1)   65/    165F : 54                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1660 : =$6                 i       set i + 1
(1)   65/    1660 : 45                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1661 : =$7                 i       set i + 1
(1)   65/    1661 : 43                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 79 - 7/13/2025 17:28:33


(1)   65/    1662 : =$8                 i       set i + 1
(1)   65/    1662 : 54                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1663 : =$9                 i       set i + 1
(1)   65/    1663 : 55                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1664 : =$A                 i       set i + 1
(1)   65/    1664 : 52                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1665 : =$B                 i       set i + 1
(1)   65/    1665 : 45                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1666 : =$C                 i       set i + 1
(1)   65/    1666 : 00                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1667 : =$D                 i       set i + 1
(1)   65/    1667 : 23                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1668 : =$E                 i       set i + 1
(1)   65/    1668 : 4F                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1669 : =$F                 i       set i + 1
(1)   65/    1669 : 4D                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    166A : =$10                i       set i + 1
(1)   65/    166A : 50                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    166B : =$11                i       set i + 1
(1)   65/    166B : 41                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    166C : =$12                i       set i + 1
(1)   65/    166C : 52                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    166D : =$13                i       set i + 1
(1)   65/    166D : 49                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    166E : =$14                i       set i + 1
(1)   65/    166E : 53                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    166F : =$15                i       set i + 1
(1)   65/    166F : 4F                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1670 : =$16                i       set i + 1
(1)   65/    1670 : 4E                          dc.b    (substr("Architecture Comparison", i, 1) - $20)
(1)   65/    1671 : =$17                i       set i + 1
(1)   65/    1671 :                     
(1)   66/    1671 : (MACRO)[1527]       	String58:	dfntxt "Motorola 68000 Contents and Syntax"
(1)   66/    1671 : =$0                 i       set     0
(1)   66/    1671 :                             while i < strlen("Motorola 68000 Contents and Syntax")
(1)   66/    1671 :                             dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1671 :                     i       set i + 1
(1)   66/    1671 :                             endm
(1)   66/    1671 : 2D                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1672 : =$1                 i       set i + 1
(1)   66/    1672 : 4F                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1673 : =$2                 i       set i + 1
(1)   66/    1673 : 54                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1674 : =$3                 i       set i + 1
(1)   66/    1674 : 4F                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1675 : =$4                 i       set i + 1
(1)   66/    1675 : 52                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1676 : =$5                 i       set i + 1
(1)   66/    1676 : 4F                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1677 : =$6                 i       set i + 1
(1)   66/    1677 : 4C                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1678 : =$7                 i       set i + 1
(1)   66/    1678 : 41                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1679 : =$8                 i       set i + 1
(1)   66/    1679 : 00                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    167A : =$9                 i       set i + 1
(1)   66/    167A : 16                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    167B : =$A                 i       set i + 1
(1)   66/    167B : 18                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    167C : =$B                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 80 - 7/13/2025 17:28:33


(1)   66/    167C : 10                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    167D : =$C                 i       set i + 1
(1)   66/    167D : 10                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    167E : =$D                 i       set i + 1
(1)   66/    167E : 10                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    167F : =$E                 i       set i + 1
(1)   66/    167F : 00                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1680 : =$F                 i       set i + 1
(1)   66/    1680 : 23                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1681 : =$10                i       set i + 1
(1)   66/    1681 : 4F                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1682 : =$11                i       set i + 1
(1)   66/    1682 : 4E                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1683 : =$12                i       set i + 1
(1)   66/    1683 : 54                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1684 : =$13                i       set i + 1
(1)   66/    1684 : 45                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1685 : =$14                i       set i + 1
(1)   66/    1685 : 4E                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1686 : =$15                i       set i + 1
(1)   66/    1686 : 54                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1687 : =$16                i       set i + 1
(1)   66/    1687 : 53                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1688 : =$17                i       set i + 1
(1)   66/    1688 : 00                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1689 : =$18                i       set i + 1
(1)   66/    1689 : 41                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    168A : =$19                i       set i + 1
(1)   66/    168A : 4E                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    168B : =$1A                i       set i + 1
(1)   66/    168B : 44                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    168C : =$1B                i       set i + 1
(1)   66/    168C : 00                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    168D : =$1C                i       set i + 1
(1)   66/    168D : 33                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    168E : =$1D                i       set i + 1
(1)   66/    168E : 59                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    168F : =$1E                i       set i + 1
(1)   66/    168F : 4E                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1690 : =$1F                i       set i + 1
(1)   66/    1690 : 54                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1691 : =$20                i       set i + 1
(1)   66/    1691 : 41                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1692 : =$21                i       set i + 1
(1)   66/    1692 : 58                          dc.b    (substr("Motorola 68000 Contents and Syntax", i, 1) - $20)
(1)   66/    1693 : =$22                i       set i + 1
(1)   66/    1693 :                     
(1)   67/    1693 : (MACRO)[1563]       	String59:	dfntxt "Data registers (general purpose):"
(1)   67/    1693 : =$0                 i       set     0
(1)   67/    1693 :                             while i < strlen("Data registers (general purpose):")
(1)   67/    1693 :                             dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    1693 :                     i       set i + 1
(1)   67/    1693 :                             endm
(1)   67/    1693 : 24                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    1694 : =$1                 i       set i + 1
(1)   67/    1694 : 41                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    1695 : =$2                 i       set i + 1
(1)   67/    1695 : 54                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    1696 : =$3                 i       set i + 1
(1)   67/    1696 : 41                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 81 - 7/13/2025 17:28:33


(1)   67/    1697 : =$4                 i       set i + 1
(1)   67/    1697 : 00                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    1698 : =$5                 i       set i + 1
(1)   67/    1698 : 52                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    1699 : =$6                 i       set i + 1
(1)   67/    1699 : 45                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    169A : =$7                 i       set i + 1
(1)   67/    169A : 47                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    169B : =$8                 i       set i + 1
(1)   67/    169B : 49                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    169C : =$9                 i       set i + 1
(1)   67/    169C : 53                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    169D : =$A                 i       set i + 1
(1)   67/    169D : 54                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    169E : =$B                 i       set i + 1
(1)   67/    169E : 45                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    169F : =$C                 i       set i + 1
(1)   67/    169F : 52                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16A0 : =$D                 i       set i + 1
(1)   67/    16A0 : 53                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16A1 : =$E                 i       set i + 1
(1)   67/    16A1 : 00                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16A2 : =$F                 i       set i + 1
(1)   67/    16A2 : 08                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16A3 : =$10                i       set i + 1
(1)   67/    16A3 : 47                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16A4 : =$11                i       set i + 1
(1)   67/    16A4 : 45                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16A5 : =$12                i       set i + 1
(1)   67/    16A5 : 4E                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16A6 : =$13                i       set i + 1
(1)   67/    16A6 : 45                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16A7 : =$14                i       set i + 1
(1)   67/    16A7 : 52                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16A8 : =$15                i       set i + 1
(1)   67/    16A8 : 41                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16A9 : =$16                i       set i + 1
(1)   67/    16A9 : 4C                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16AA : =$17                i       set i + 1
(1)   67/    16AA : 00                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16AB : =$18                i       set i + 1
(1)   67/    16AB : 50                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16AC : =$19                i       set i + 1
(1)   67/    16AC : 55                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16AD : =$1A                i       set i + 1
(1)   67/    16AD : 52                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16AE : =$1B                i       set i + 1
(1)   67/    16AE : 50                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16AF : =$1C                i       set i + 1
(1)   67/    16AF : 4F                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16B0 : =$1D                i       set i + 1
(1)   67/    16B0 : 53                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16B1 : =$1E                i       set i + 1
(1)   67/    16B1 : 45                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16B2 : =$1F                i       set i + 1
(1)   67/    16B2 : 09                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16B3 : =$20                i       set i + 1
(1)   67/    16B3 : 1A                          dc.b    (substr("Data registers (general purpose):", i, 1) - $20)
(1)   67/    16B4 : =$21                i       set i + 1
(1)   67/    16B4 :                     
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 82 - 7/13/2025 17:28:33


(1)   68/    16B4 : (MACRO)[1598]       	String60:	dfntxt "32-bit"
(1)   68/    16B4 : =$0                 i       set     0
(1)   68/    16B4 :                             while i < strlen("32-bit")
(1)   68/    16B4 :                             dc.b    (substr("32-bit", i, 1) - $20)
(1)   68/    16B4 :                     i       set i + 1
(1)   68/    16B4 :                             endm
(1)   68/    16B4 : 13                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   68/    16B5 : =$1                 i       set i + 1
(1)   68/    16B5 : 12                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   68/    16B6 : =$2                 i       set i + 1
(1)   68/    16B6 : 0D                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   68/    16B7 : =$3                 i       set i + 1
(1)   68/    16B7 : 42                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   68/    16B8 : =$4                 i       set i + 1
(1)   68/    16B8 : 49                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   68/    16B9 : =$5                 i       set i + 1
(1)   68/    16B9 : 54                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   68/    16BA : =$6                 i       set i + 1
(1)   68/    16BA :                     
(1)   69/    16BA : (MACRO)[1606]       	String61:	dfntxt "d0  d1  d2  d3  d4  d5  d6  d7"
(1)   69/    16BA : =$0                 i       set     0
(1)   69/    16BA :                             while i < strlen("d0  d1  d2  d3  d4  d5  d6  d7")
(1)   69/    16BA :                             dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16BA :                     i       set i + 1
(1)   69/    16BA :                             endm
(1)   69/    16BA : 44                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16BB : =$1                 i       set i + 1
(1)   69/    16BB : 10                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16BC : =$2                 i       set i + 1
(1)   69/    16BC : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16BD : =$3                 i       set i + 1
(1)   69/    16BD : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16BE : =$4                 i       set i + 1
(1)   69/    16BE : 44                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16BF : =$5                 i       set i + 1
(1)   69/    16BF : 11                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16C0 : =$6                 i       set i + 1
(1)   69/    16C0 : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16C1 : =$7                 i       set i + 1
(1)   69/    16C1 : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16C2 : =$8                 i       set i + 1
(1)   69/    16C2 : 44                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16C3 : =$9                 i       set i + 1
(1)   69/    16C3 : 12                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16C4 : =$A                 i       set i + 1
(1)   69/    16C4 : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16C5 : =$B                 i       set i + 1
(1)   69/    16C5 : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16C6 : =$C                 i       set i + 1
(1)   69/    16C6 : 44                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16C7 : =$D                 i       set i + 1
(1)   69/    16C7 : 13                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16C8 : =$E                 i       set i + 1
(1)   69/    16C8 : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16C9 : =$F                 i       set i + 1
(1)   69/    16C9 : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16CA : =$10                i       set i + 1
(1)   69/    16CA : 44                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16CB : =$11                i       set i + 1
(1)   69/    16CB : 14                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 83 - 7/13/2025 17:28:33


(1)   69/    16CC : =$12                i       set i + 1
(1)   69/    16CC : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16CD : =$13                i       set i + 1
(1)   69/    16CD : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16CE : =$14                i       set i + 1
(1)   69/    16CE : 44                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16CF : =$15                i       set i + 1
(1)   69/    16CF : 15                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16D0 : =$16                i       set i + 1
(1)   69/    16D0 : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16D1 : =$17                i       set i + 1
(1)   69/    16D1 : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16D2 : =$18                i       set i + 1
(1)   69/    16D2 : 44                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16D3 : =$19                i       set i + 1
(1)   69/    16D3 : 16                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16D4 : =$1A                i       set i + 1
(1)   69/    16D4 : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16D5 : =$1B                i       set i + 1
(1)   69/    16D5 : 00                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16D6 : =$1C                i       set i + 1
(1)   69/    16D6 : 44                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16D7 : =$1D                i       set i + 1
(1)   69/    16D7 : 17                          dc.b    (substr("d0  d1  d2  d3  d4  d5  d6  d7", i, 1) - $20)
(1)   69/    16D8 : =$1E                i       set i + 1
(1)   69/    16D8 :                     
(1)   70/    16D8 : (MACRO)[1638]       	String62:	dfntxt "Address registers:"
(1)   70/    16D8 : =$0                 i       set     0
(1)   70/    16D8 :                             while i < strlen("Address registers:")
(1)   70/    16D8 :                             dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16D8 :                     i       set i + 1
(1)   70/    16D8 :                             endm
(1)   70/    16D8 : 21                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16D9 : =$1                 i       set i + 1
(1)   70/    16D9 : 44                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16DA : =$2                 i       set i + 1
(1)   70/    16DA : 44                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16DB : =$3                 i       set i + 1
(1)   70/    16DB : 52                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16DC : =$4                 i       set i + 1
(1)   70/    16DC : 45                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16DD : =$5                 i       set i + 1
(1)   70/    16DD : 53                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16DE : =$6                 i       set i + 1
(1)   70/    16DE : 53                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16DF : =$7                 i       set i + 1
(1)   70/    16DF : 00                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16E0 : =$8                 i       set i + 1
(1)   70/    16E0 : 52                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16E1 : =$9                 i       set i + 1
(1)   70/    16E1 : 45                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16E2 : =$A                 i       set i + 1
(1)   70/    16E2 : 47                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16E3 : =$B                 i       set i + 1
(1)   70/    16E3 : 49                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16E4 : =$C                 i       set i + 1
(1)   70/    16E4 : 53                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16E5 : =$D                 i       set i + 1
(1)   70/    16E5 : 54                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16E6 : =$E                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 84 - 7/13/2025 17:28:33


(1)   70/    16E6 : 45                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16E7 : =$F                 i       set i + 1
(1)   70/    16E7 : 52                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16E8 : =$10                i       set i + 1
(1)   70/    16E8 : 53                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16E9 : =$11                i       set i + 1
(1)   70/    16E9 : 1A                          dc.b    (substr("Address registers:", i, 1) - $20)
(1)   70/    16EA : =$12                i       set i + 1
(1)   70/    16EA :                     
(1)   71/    16EA : (MACRO)[1658]       	String63:	dfntxt "32-bit"
(1)   71/    16EA : =$0                 i       set     0
(1)   71/    16EA :                             while i < strlen("32-bit")
(1)   71/    16EA :                             dc.b    (substr("32-bit", i, 1) - $20)
(1)   71/    16EA :                     i       set i + 1
(1)   71/    16EA :                             endm
(1)   71/    16EA : 13                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   71/    16EB : =$1                 i       set i + 1
(1)   71/    16EB : 12                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   71/    16EC : =$2                 i       set i + 1
(1)   71/    16EC : 0D                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   71/    16ED : =$3                 i       set i + 1
(1)   71/    16ED : 42                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   71/    16EE : =$4                 i       set i + 1
(1)   71/    16EE : 49                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   71/    16EF : =$5                 i       set i + 1
(1)   71/    16EF : 54                          dc.b    (substr("32-bit", i, 1) - $20)
(1)   71/    16F0 : =$6                 i       set i + 1
(1)   71/    16F0 :                     
(1)   72/    16F0 : (MACRO)[1666]       	String64:	dfntxt "(a0)(a1)(a2)(a3)(a4)(a5)(a6)"
(1)   72/    16F0 : =$0                 i       set     0
(1)   72/    16F0 :                             while i < strlen("(a0)(a1)(a2)(a3)(a4)(a5)(a6)")
(1)   72/    16F0 :                             dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16F0 :                     i       set i + 1
(1)   72/    16F0 :                             endm
(1)   72/    16F0 : 08                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16F1 : =$1                 i       set i + 1
(1)   72/    16F1 : 41                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16F2 : =$2                 i       set i + 1
(1)   72/    16F2 : 10                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16F3 : =$3                 i       set i + 1
(1)   72/    16F3 : 09                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16F4 : =$4                 i       set i + 1
(1)   72/    16F4 : 08                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16F5 : =$5                 i       set i + 1
(1)   72/    16F5 : 41                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16F6 : =$6                 i       set i + 1
(1)   72/    16F6 : 11                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16F7 : =$7                 i       set i + 1
(1)   72/    16F7 : 09                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16F8 : =$8                 i       set i + 1
(1)   72/    16F8 : 08                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16F9 : =$9                 i       set i + 1
(1)   72/    16F9 : 41                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16FA : =$A                 i       set i + 1
(1)   72/    16FA : 12                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16FB : =$B                 i       set i + 1
(1)   72/    16FB : 09                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16FC : =$C                 i       set i + 1
(1)   72/    16FC : 08                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16FD : =$D                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 85 - 7/13/2025 17:28:33


(1)   72/    16FD : 41                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16FE : =$E                 i       set i + 1
(1)   72/    16FE : 13                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    16FF : =$F                 i       set i + 1
(1)   72/    16FF : 09                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    1700 : =$10                i       set i + 1
(1)   72/    1700 : 08                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    1701 : =$11                i       set i + 1
(1)   72/    1701 : 41                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    1702 : =$12                i       set i + 1
(1)   72/    1702 : 14                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    1703 : =$13                i       set i + 1
(1)   72/    1703 : 09                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    1704 : =$14                i       set i + 1
(1)   72/    1704 : 08                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    1705 : =$15                i       set i + 1
(1)   72/    1705 : 41                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    1706 : =$16                i       set i + 1
(1)   72/    1706 : 15                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    1707 : =$17                i       set i + 1
(1)   72/    1707 : 09                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    1708 : =$18                i       set i + 1
(1)   72/    1708 : 08                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    1709 : =$19                i       set i + 1
(1)   72/    1709 : 41                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    170A : =$1A                i       set i + 1
(1)   72/    170A : 16                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    170B : =$1B                i       set i + 1
(1)   72/    170B : 09                          dc.b    (substr("(a0)(a1)(a2)(a3)(a4)(a5)(a6)", i, 1) - $20)
(1)   72/    170C : =$1C                i       set i + 1
(1)   72/    170C :                     
(1)   73/    170C : (MACRO)[1696]       	String65:	dfntxt "(a7) -> (sp) - not general purpose"
(1)   73/    170C : =$0                 i       set     0
(1)   73/    170C :                             while i < strlen("(a7) -> (sp) - not general purpose")
(1)   73/    170C :                             dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    170C :                     i       set i + 1
(1)   73/    170C :                             endm
(1)   73/    170C : 08                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    170D : =$1                 i       set i + 1
(1)   73/    170D : 41                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    170E : =$2                 i       set i + 1
(1)   73/    170E : 17                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    170F : =$3                 i       set i + 1
(1)   73/    170F : 09                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1710 : =$4                 i       set i + 1
(1)   73/    1710 : 00                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1711 : =$5                 i       set i + 1
(1)   73/    1711 : 0D                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1712 : =$6                 i       set i + 1
(1)   73/    1712 : 1E                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1713 : =$7                 i       set i + 1
(1)   73/    1713 : 00                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1714 : =$8                 i       set i + 1
(1)   73/    1714 : 08                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1715 : =$9                 i       set i + 1
(1)   73/    1715 : 53                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1716 : =$A                 i       set i + 1
(1)   73/    1716 : 50                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1717 : =$B                 i       set i + 1
(1)   73/    1717 : 09                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 86 - 7/13/2025 17:28:33


(1)   73/    1718 : =$C                 i       set i + 1
(1)   73/    1718 : 00                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1719 : =$D                 i       set i + 1
(1)   73/    1719 : 0D                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    171A : =$E                 i       set i + 1
(1)   73/    171A : 00                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    171B : =$F                 i       set i + 1
(1)   73/    171B : 4E                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    171C : =$10                i       set i + 1
(1)   73/    171C : 4F                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    171D : =$11                i       set i + 1
(1)   73/    171D : 54                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    171E : =$12                i       set i + 1
(1)   73/    171E : 00                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    171F : =$13                i       set i + 1
(1)   73/    171F : 47                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1720 : =$14                i       set i + 1
(1)   73/    1720 : 45                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1721 : =$15                i       set i + 1
(1)   73/    1721 : 4E                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1722 : =$16                i       set i + 1
(1)   73/    1722 : 45                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1723 : =$17                i       set i + 1
(1)   73/    1723 : 52                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1724 : =$18                i       set i + 1
(1)   73/    1724 : 41                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1725 : =$19                i       set i + 1
(1)   73/    1725 : 4C                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1726 : =$1A                i       set i + 1
(1)   73/    1726 : 00                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1727 : =$1B                i       set i + 1
(1)   73/    1727 : 50                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1728 : =$1C                i       set i + 1
(1)   73/    1728 : 55                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    1729 : =$1D                i       set i + 1
(1)   73/    1729 : 52                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    172A : =$1E                i       set i + 1
(1)   73/    172A : 50                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    172B : =$1F                i       set i + 1
(1)   73/    172B : 4F                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    172C : =$20                i       set i + 1
(1)   73/    172C : 53                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    172D : =$21                i       set i + 1
(1)   73/    172D : 45                          dc.b    (substr("(a7) -> (sp) - not general purpose", i, 1) - $20)
(1)   73/    172E : =$22                i       set i + 1
(1)   73/    172E :                     
(1)   74/    172E : (MACRO)[1732]       	String66:	dfntxt "(ss)(us) - not really necessary"
(1)   74/    172E : =$0                 i       set     0
(1)   74/    172E :                             while i < strlen("(ss)(us) - not really necessary")
(1)   74/    172E :                             dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    172E :                     i       set i + 1
(1)   74/    172E :                             endm
(1)   74/    172E : 08                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    172F : =$1                 i       set i + 1
(1)   74/    172F : 53                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1730 : =$2                 i       set i + 1
(1)   74/    1730 : 53                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1731 : =$3                 i       set i + 1
(1)   74/    1731 : 09                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1732 : =$4                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 87 - 7/13/2025 17:28:33


(1)   74/    1732 : 08                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1733 : =$5                 i       set i + 1
(1)   74/    1733 : 55                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1734 : =$6                 i       set i + 1
(1)   74/    1734 : 53                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1735 : =$7                 i       set i + 1
(1)   74/    1735 : 09                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1736 : =$8                 i       set i + 1
(1)   74/    1736 : 00                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1737 : =$9                 i       set i + 1
(1)   74/    1737 : 0D                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1738 : =$A                 i       set i + 1
(1)   74/    1738 : 00                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1739 : =$B                 i       set i + 1
(1)   74/    1739 : 4E                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    173A : =$C                 i       set i + 1
(1)   74/    173A : 4F                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    173B : =$D                 i       set i + 1
(1)   74/    173B : 54                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    173C : =$E                 i       set i + 1
(1)   74/    173C : 00                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    173D : =$F                 i       set i + 1
(1)   74/    173D : 52                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    173E : =$10                i       set i + 1
(1)   74/    173E : 45                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    173F : =$11                i       set i + 1
(1)   74/    173F : 41                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1740 : =$12                i       set i + 1
(1)   74/    1740 : 4C                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1741 : =$13                i       set i + 1
(1)   74/    1741 : 4C                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1742 : =$14                i       set i + 1
(1)   74/    1742 : 59                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1743 : =$15                i       set i + 1
(1)   74/    1743 : 00                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1744 : =$16                i       set i + 1
(1)   74/    1744 : 4E                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1745 : =$17                i       set i + 1
(1)   74/    1745 : 45                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1746 : =$18                i       set i + 1
(1)   74/    1746 : 43                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1747 : =$19                i       set i + 1
(1)   74/    1747 : 45                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1748 : =$1A                i       set i + 1
(1)   74/    1748 : 53                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    1749 : =$1B                i       set i + 1
(1)   74/    1749 : 53                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    174A : =$1C                i       set i + 1
(1)   74/    174A : 41                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    174B : =$1D                i       set i + 1
(1)   74/    174B : 52                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    174C : =$1E                i       set i + 1
(1)   74/    174C : 59                          dc.b    (substr("(ss)(us) - not really necessary", i, 1) - $20)
(1)   74/    174D : =$1F                i       set i + 1
(1)   74/    174D :                     
(1)   75/    174D : (MACRO)[1765]       	String67:	dfntxt "(pc) - basically the same as [IP]"
(1)   75/    174D : =$0                 i       set     0
(1)   75/    174D :                             while i < strlen("(pc) - basically the same as [IP]")
(1)   75/    174D :                             dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    174D :                     i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 88 - 7/13/2025 17:28:33


(1)   75/    174D :                             endm
(1)   75/    174D : 08                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    174E : =$1                 i       set i + 1
(1)   75/    174E : 50                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    174F : =$2                 i       set i + 1
(1)   75/    174F : 43                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1750 : =$3                 i       set i + 1
(1)   75/    1750 : 09                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1751 : =$4                 i       set i + 1
(1)   75/    1751 : 00                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1752 : =$5                 i       set i + 1
(1)   75/    1752 : 0D                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1753 : =$6                 i       set i + 1
(1)   75/    1753 : 00                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1754 : =$7                 i       set i + 1
(1)   75/    1754 : 42                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1755 : =$8                 i       set i + 1
(1)   75/    1755 : 41                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1756 : =$9                 i       set i + 1
(1)   75/    1756 : 53                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1757 : =$A                 i       set i + 1
(1)   75/    1757 : 49                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1758 : =$B                 i       set i + 1
(1)   75/    1758 : 43                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1759 : =$C                 i       set i + 1
(1)   75/    1759 : 41                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    175A : =$D                 i       set i + 1
(1)   75/    175A : 4C                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    175B : =$E                 i       set i + 1
(1)   75/    175B : 4C                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    175C : =$F                 i       set i + 1
(1)   75/    175C : 59                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    175D : =$10                i       set i + 1
(1)   75/    175D : 00                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    175E : =$11                i       set i + 1
(1)   75/    175E : 54                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    175F : =$12                i       set i + 1
(1)   75/    175F : 48                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1760 : =$13                i       set i + 1
(1)   75/    1760 : 45                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1761 : =$14                i       set i + 1
(1)   75/    1761 : 00                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1762 : =$15                i       set i + 1
(1)   75/    1762 : 53                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1763 : =$16                i       set i + 1
(1)   75/    1763 : 41                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1764 : =$17                i       set i + 1
(1)   75/    1764 : 4D                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1765 : =$18                i       set i + 1
(1)   75/    1765 : 45                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1766 : =$19                i       set i + 1
(1)   75/    1766 : 00                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1767 : =$1A                i       set i + 1
(1)   75/    1767 : 41                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1768 : =$1B                i       set i + 1
(1)   75/    1768 : 53                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    1769 : =$1C                i       set i + 1
(1)   75/    1769 : 00                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    176A : =$1D                i       set i + 1
(1)   75/    176A : 3B                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 89 - 7/13/2025 17:28:33


(1)   75/    176B : =$1E                i       set i + 1
(1)   75/    176B : 29                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    176C : =$1F                i       set i + 1
(1)   75/    176C : 30                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    176D : =$20                i       set i + 1
(1)   75/    176D : 3D                          dc.b    (substr("(pc) - basically the same as [IP]", i, 1) - $20)
(1)   75/    176E : =$21                i       set i + 1
(1)   75/    176E :                     
(1)   76/    176E : (MACRO)[1800]       	String68:	dfntxt "Note: for addressing the"
(1)   76/    176E : =$0                 i       set     0
(1)   76/    176E :                             while i < strlen("Note: for addressing the")
(1)   76/    176E :                             dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    176E :                     i       set i + 1
(1)   76/    176E :                             endm
(1)   76/    176E : 2E                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    176F : =$1                 i       set i + 1
(1)   76/    176F : 4F                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1770 : =$2                 i       set i + 1
(1)   76/    1770 : 54                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1771 : =$3                 i       set i + 1
(1)   76/    1771 : 45                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1772 : =$4                 i       set i + 1
(1)   76/    1772 : 1A                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1773 : =$5                 i       set i + 1
(1)   76/    1773 : 00                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1774 : =$6                 i       set i + 1
(1)   76/    1774 : 46                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1775 : =$7                 i       set i + 1
(1)   76/    1775 : 4F                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1776 : =$8                 i       set i + 1
(1)   76/    1776 : 52                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1777 : =$9                 i       set i + 1
(1)   76/    1777 : 00                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1778 : =$A                 i       set i + 1
(1)   76/    1778 : 41                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1779 : =$B                 i       set i + 1
(1)   76/    1779 : 44                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    177A : =$C                 i       set i + 1
(1)   76/    177A : 44                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    177B : =$D                 i       set i + 1
(1)   76/    177B : 52                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    177C : =$E                 i       set i + 1
(1)   76/    177C : 45                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    177D : =$F                 i       set i + 1
(1)   76/    177D : 53                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    177E : =$10                i       set i + 1
(1)   76/    177E : 53                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    177F : =$11                i       set i + 1
(1)   76/    177F : 49                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1780 : =$12                i       set i + 1
(1)   76/    1780 : 4E                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1781 : =$13                i       set i + 1
(1)   76/    1781 : 47                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1782 : =$14                i       set i + 1
(1)   76/    1782 : 00                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1783 : =$15                i       set i + 1
(1)   76/    1783 : 54                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1784 : =$16                i       set i + 1
(1)   76/    1784 : 48                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1785 : =$17                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 90 - 7/13/2025 17:28:33


(1)   76/    1785 : 45                          dc.b    (substr("Note: for addressing the", i, 1) - $20)
(1)   76/    1786 : =$18                i       set i + 1
(1)   76/    1786 :                     
(1)   77/    1786 : (MACRO)[1826]       	String69:	dfntxt "round brackets () are used instead."
(1)   77/    1786 : =$0                 i       set     0
(1)   77/    1786 :                             while i < strlen("round brackets () are used instead.")
(1)   77/    1786 :                             dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1786 :                     i       set i + 1
(1)   77/    1786 :                             endm
(1)   77/    1786 : 52                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1787 : =$1                 i       set i + 1
(1)   77/    1787 : 4F                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1788 : =$2                 i       set i + 1
(1)   77/    1788 : 55                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1789 : =$3                 i       set i + 1
(1)   77/    1789 : 4E                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    178A : =$4                 i       set i + 1
(1)   77/    178A : 44                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    178B : =$5                 i       set i + 1
(1)   77/    178B : 00                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    178C : =$6                 i       set i + 1
(1)   77/    178C : 42                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    178D : =$7                 i       set i + 1
(1)   77/    178D : 52                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    178E : =$8                 i       set i + 1
(1)   77/    178E : 41                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    178F : =$9                 i       set i + 1
(1)   77/    178F : 43                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1790 : =$A                 i       set i + 1
(1)   77/    1790 : 4B                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1791 : =$B                 i       set i + 1
(1)   77/    1791 : 45                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1792 : =$C                 i       set i + 1
(1)   77/    1792 : 54                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1793 : =$D                 i       set i + 1
(1)   77/    1793 : 53                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1794 : =$E                 i       set i + 1
(1)   77/    1794 : 00                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1795 : =$F                 i       set i + 1
(1)   77/    1795 : 08                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1796 : =$10                i       set i + 1
(1)   77/    1796 : 09                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1797 : =$11                i       set i + 1
(1)   77/    1797 : 00                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1798 : =$12                i       set i + 1
(1)   77/    1798 : 41                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    1799 : =$13                i       set i + 1
(1)   77/    1799 : 52                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    179A : =$14                i       set i + 1
(1)   77/    179A : 45                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    179B : =$15                i       set i + 1
(1)   77/    179B : 00                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    179C : =$16                i       set i + 1
(1)   77/    179C : 55                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    179D : =$17                i       set i + 1
(1)   77/    179D : 53                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    179E : =$18                i       set i + 1
(1)   77/    179E : 45                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    179F : =$19                i       set i + 1
(1)   77/    179F : 44                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 91 - 7/13/2025 17:28:33


(1)   77/    17A0 : =$1A                i       set i + 1
(1)   77/    17A0 : 00                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    17A1 : =$1B                i       set i + 1
(1)   77/    17A1 : 49                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    17A2 : =$1C                i       set i + 1
(1)   77/    17A2 : 4E                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    17A3 : =$1D                i       set i + 1
(1)   77/    17A3 : 53                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    17A4 : =$1E                i       set i + 1
(1)   77/    17A4 : 54                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    17A5 : =$1F                i       set i + 1
(1)   77/    17A5 : 45                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    17A6 : =$20                i       set i + 1
(1)   77/    17A6 : 41                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    17A7 : =$21                i       set i + 1
(1)   77/    17A7 : 44                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    17A8 : =$22                i       set i + 1
(1)   77/    17A8 : 0E                          dc.b    (substr("round brackets () are used instead.", i, 1) - $20)
(1)   77/    17A9 : =$23                i       set i + 1
(1)   77/    17A9 :                     
(1)   78/    17A9 : (MACRO)[1863]       	String70:	dfntxt "Flags (register ccr):"
(1)   78/    17A9 : =$0                 i       set     0
(1)   78/    17A9 :                             while i < strlen("Flags (register ccr):")
(1)   78/    17A9 :                             dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17A9 :                     i       set i + 1
(1)   78/    17A9 :                             endm
(1)   78/    17A9 : 26                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17AA : =$1                 i       set i + 1
(1)   78/    17AA : 4C                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17AB : =$2                 i       set i + 1
(1)   78/    17AB : 41                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17AC : =$3                 i       set i + 1
(1)   78/    17AC : 47                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17AD : =$4                 i       set i + 1
(1)   78/    17AD : 53                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17AE : =$5                 i       set i + 1
(1)   78/    17AE : 00                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17AF : =$6                 i       set i + 1
(1)   78/    17AF : 08                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17B0 : =$7                 i       set i + 1
(1)   78/    17B0 : 52                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17B1 : =$8                 i       set i + 1
(1)   78/    17B1 : 45                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17B2 : =$9                 i       set i + 1
(1)   78/    17B2 : 47                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17B3 : =$A                 i       set i + 1
(1)   78/    17B3 : 49                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17B4 : =$B                 i       set i + 1
(1)   78/    17B4 : 53                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17B5 : =$C                 i       set i + 1
(1)   78/    17B5 : 54                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17B6 : =$D                 i       set i + 1
(1)   78/    17B6 : 45                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17B7 : =$E                 i       set i + 1
(1)   78/    17B7 : 52                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17B8 : =$F                 i       set i + 1
(1)   78/    17B8 : 00                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17B9 : =$10                i       set i + 1
(1)   78/    17B9 : 43                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17BA : =$11                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 92 - 7/13/2025 17:28:33


(1)   78/    17BA : 43                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17BB : =$12                i       set i + 1
(1)   78/    17BB : 52                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17BC : =$13                i       set i + 1
(1)   78/    17BC : 09                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17BD : =$14                i       set i + 1
(1)   78/    17BD : 1A                          dc.b    (substr("Flags (register ccr):", i, 1) - $20)
(1)   78/    17BE : =$15                i       set i + 1
(1)   78/    17BE :                     
(1)   79/    17BE : (MACRO)[1886]       	String71:	dfntxt "XNZVC"
(1)   79/    17BE : =$0                 i       set     0
(1)   79/    17BE :                             while i < strlen("XNZVC")
(1)   79/    17BE :                             dc.b    (substr("XNZVC", i, 1) - $20)
(1)   79/    17BE :                     i       set i + 1
(1)   79/    17BE :                             endm
(1)   79/    17BE : 38                          dc.b    (substr("XNZVC", i, 1) - $20)
(1)   79/    17BF : =$1                 i       set i + 1
(1)   79/    17BF : 2E                          dc.b    (substr("XNZVC", i, 1) - $20)
(1)   79/    17C0 : =$2                 i       set i + 1
(1)   79/    17C0 : 3A                          dc.b    (substr("XNZVC", i, 1) - $20)
(1)   79/    17C1 : =$3                 i       set i + 1
(1)   79/    17C1 : 36                          dc.b    (substr("XNZVC", i, 1) - $20)
(1)   79/    17C2 : =$4                 i       set i + 1
(1)   79/    17C2 : 23                          dc.b    (substr("XNZVC", i, 1) - $20)
(1)   79/    17C3 : =$5                 i       set i + 1
(1)   79/    17C3 :                     
(1)   80/    17C3 :                     
(1)   81/    17C3 : (MACRO)[1893]       	String72:	dfntxt "Instruction Set Differences"
(1)   81/    17C3 : =$0                 i       set     0
(1)   81/    17C3 :                             while i < strlen("Instruction Set Differences")
(1)   81/    17C3 :                             dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17C3 :                     i       set i + 1
(1)   81/    17C3 :                             endm
(1)   81/    17C3 : 29                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17C4 : =$1                 i       set i + 1
(1)   81/    17C4 : 4E                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17C5 : =$2                 i       set i + 1
(1)   81/    17C5 : 53                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17C6 : =$3                 i       set i + 1
(1)   81/    17C6 : 54                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17C7 : =$4                 i       set i + 1
(1)   81/    17C7 : 52                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17C8 : =$5                 i       set i + 1
(1)   81/    17C8 : 55                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17C9 : =$6                 i       set i + 1
(1)   81/    17C9 : 43                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17CA : =$7                 i       set i + 1
(1)   81/    17CA : 54                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17CB : =$8                 i       set i + 1
(1)   81/    17CB : 49                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17CC : =$9                 i       set i + 1
(1)   81/    17CC : 4F                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17CD : =$A                 i       set i + 1
(1)   81/    17CD : 4E                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17CE : =$B                 i       set i + 1
(1)   81/    17CE : 00                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17CF : =$C                 i       set i + 1
(1)   81/    17CF : 33                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17D0 : =$D                 i       set i + 1
(1)   81/    17D0 : 45                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 93 - 7/13/2025 17:28:33


(1)   81/    17D1 : =$E                 i       set i + 1
(1)   81/    17D1 : 54                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17D2 : =$F                 i       set i + 1
(1)   81/    17D2 : 00                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17D3 : =$10                i       set i + 1
(1)   81/    17D3 : 24                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17D4 : =$11                i       set i + 1
(1)   81/    17D4 : 49                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17D5 : =$12                i       set i + 1
(1)   81/    17D5 : 46                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17D6 : =$13                i       set i + 1
(1)   81/    17D6 : 46                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17D7 : =$14                i       set i + 1
(1)   81/    17D7 : 45                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17D8 : =$15                i       set i + 1
(1)   81/    17D8 : 52                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17D9 : =$16                i       set i + 1
(1)   81/    17D9 : 45                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17DA : =$17                i       set i + 1
(1)   81/    17DA : 4E                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17DB : =$18                i       set i + 1
(1)   81/    17DB : 43                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17DC : =$19                i       set i + 1
(1)   81/    17DC : 45                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17DD : =$1A                i       set i + 1
(1)   81/    17DD : 53                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)   81/    17DE : =$1B                i       set i + 1
(1)   81/    17DE :                     
(1)   82/    17DE : (MACRO)[1922]       	String73:	dfntxt "How to MOVe data around"
(1)   82/    17DE : =$0                 i       set     0
(1)   82/    17DE :                             while i < strlen("How to MOVe data around")
(1)   82/    17DE :                             dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17DE :                     i       set i + 1
(1)   82/    17DE :                             endm
(1)   82/    17DE : 28                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17DF : =$1                 i       set i + 1
(1)   82/    17DF : 4F                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17E0 : =$2                 i       set i + 1
(1)   82/    17E0 : 57                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17E1 : =$3                 i       set i + 1
(1)   82/    17E1 : 00                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17E2 : =$4                 i       set i + 1
(1)   82/    17E2 : 54                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17E3 : =$5                 i       set i + 1
(1)   82/    17E3 : 4F                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17E4 : =$6                 i       set i + 1
(1)   82/    17E4 : 00                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17E5 : =$7                 i       set i + 1
(1)   82/    17E5 : 2D                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17E6 : =$8                 i       set i + 1
(1)   82/    17E6 : 2F                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17E7 : =$9                 i       set i + 1
(1)   82/    17E7 : 36                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17E8 : =$A                 i       set i + 1
(1)   82/    17E8 : 45                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17E9 : =$B                 i       set i + 1
(1)   82/    17E9 : 00                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17EA : =$C                 i       set i + 1
(1)   82/    17EA : 44                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17EB : =$D                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 94 - 7/13/2025 17:28:33


(1)   82/    17EB : 41                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17EC : =$E                 i       set i + 1
(1)   82/    17EC : 54                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17ED : =$F                 i       set i + 1
(1)   82/    17ED : 41                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17EE : =$10                i       set i + 1
(1)   82/    17EE : 00                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17EF : =$11                i       set i + 1
(1)   82/    17EF : 41                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17F0 : =$12                i       set i + 1
(1)   82/    17F0 : 52                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17F1 : =$13                i       set i + 1
(1)   82/    17F1 : 4F                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17F2 : =$14                i       set i + 1
(1)   82/    17F2 : 55                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17F3 : =$15                i       set i + 1
(1)   82/    17F3 : 4E                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17F4 : =$16                i       set i + 1
(1)   82/    17F4 : 44                          dc.b    (substr("How to MOVe data around", i, 1) - $20)
(1)   82/    17F5 : =$17                i       set i + 1
(1)   82/    17F5 :                     
(1)   83/    17F5 : (MACRO)[1947]       	String74:	dfntxt "Intel 8086"
(1)   83/    17F5 : =$0                 i       set     0
(1)   83/    17F5 :                             while i < strlen("Intel 8086")
(1)   83/    17F5 :                             dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17F5 :                     i       set i + 1
(1)   83/    17F5 :                             endm
(1)   83/    17F5 : 29                          dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17F6 : =$1                 i       set i + 1
(1)   83/    17F6 : 4E                          dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17F7 : =$2                 i       set i + 1
(1)   83/    17F7 : 54                          dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17F8 : =$3                 i       set i + 1
(1)   83/    17F8 : 45                          dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17F9 : =$4                 i       set i + 1
(1)   83/    17F9 : 4C                          dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17FA : =$5                 i       set i + 1
(1)   83/    17FA : 00                          dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17FB : =$6                 i       set i + 1
(1)   83/    17FB : 18                          dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17FC : =$7                 i       set i + 1
(1)   83/    17FC : 10                          dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17FD : =$8                 i       set i + 1
(1)   83/    17FD : 18                          dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17FE : =$9                 i       set i + 1
(1)   83/    17FE : 16                          dc.b    (substr("Intel 8086", i, 1) - $20)
(1)   83/    17FF : =$A                 i       set i + 1
(1)   83/    17FF :                     
(1)   84/    17FF : (MACRO)[1959]       	String75:	dfntxt "16-bit values (0-FFFF)"
(1)   84/    17FF : =$0                 i       set     0
(1)   84/    17FF :                             while i < strlen("16-bit values (0-FFFF)")
(1)   84/    17FF :                             dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    17FF :                     i       set i + 1
(1)   84/    17FF :                             endm
(1)   84/    17FF : 11                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1800 : =$1                 i       set i + 1
(1)   84/    1800 : 16                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1801 : =$2                 i       set i + 1
(1)   84/    1801 : 0D                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1802 : =$3                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 95 - 7/13/2025 17:28:33


(1)   84/    1802 : 42                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1803 : =$4                 i       set i + 1
(1)   84/    1803 : 49                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1804 : =$5                 i       set i + 1
(1)   84/    1804 : 54                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1805 : =$6                 i       set i + 1
(1)   84/    1805 : 00                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1806 : =$7                 i       set i + 1
(1)   84/    1806 : 56                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1807 : =$8                 i       set i + 1
(1)   84/    1807 : 41                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1808 : =$9                 i       set i + 1
(1)   84/    1808 : 4C                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1809 : =$A                 i       set i + 1
(1)   84/    1809 : 55                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    180A : =$B                 i       set i + 1
(1)   84/    180A : 45                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    180B : =$C                 i       set i + 1
(1)   84/    180B : 53                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    180C : =$D                 i       set i + 1
(1)   84/    180C : 00                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    180D : =$E                 i       set i + 1
(1)   84/    180D : 08                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    180E : =$F                 i       set i + 1
(1)   84/    180E : 10                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    180F : =$10                i       set i + 1
(1)   84/    180F : 0D                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1810 : =$11                i       set i + 1
(1)   84/    1810 : 26                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1811 : =$12                i       set i + 1
(1)   84/    1811 : 26                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1812 : =$13                i       set i + 1
(1)   84/    1812 : 26                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1813 : =$14                i       set i + 1
(1)   84/    1813 : 26                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1814 : =$15                i       set i + 1
(1)   84/    1814 : 09                          dc.b    (substr("16-bit values (0-FFFF)", i, 1) - $20)
(1)   84/    1815 : =$16                i       set i + 1
(1)   84/    1815 :                     
(1)   85/    1815 : (MACRO)[1983]       	String76:	dfntxt "MOV CX,37D5"
(1)   85/    1815 : =$0                 i       set     0
(1)   85/    1815 :                             while i < strlen("MOV CX,37D5")
(1)   85/    1815 :                             dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    1815 :                     i       set i + 1
(1)   85/    1815 :                             endm
(1)   85/    1815 : 2D                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    1816 : =$1                 i       set i + 1
(1)   85/    1816 : 2F                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    1817 : =$2                 i       set i + 1
(1)   85/    1817 : 36                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    1818 : =$3                 i       set i + 1
(1)   85/    1818 : 00                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    1819 : =$4                 i       set i + 1
(1)   85/    1819 : 23                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    181A : =$5                 i       set i + 1
(1)   85/    181A : 38                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    181B : =$6                 i       set i + 1
(1)   85/    181B : 0C                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    181C : =$7                 i       set i + 1
(1)   85/    181C : 13                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 96 - 7/13/2025 17:28:33


(1)   85/    181D : =$8                 i       set i + 1
(1)   85/    181D : 17                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    181E : =$9                 i       set i + 1
(1)   85/    181E : 24                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    181F : =$A                 i       set i + 1
(1)   85/    181F : 15                          dc.b    (substr("MOV CX,37D5", i, 1) - $20)
(1)   85/    1820 : =$B                 i       set i + 1
(1)   85/    1820 :                     
(1)   86/    1820 : (MACRO)[1996]       	String77:	dfntxt "MOV [F600],DX"
(1)   86/    1820 : =$0                 i       set     0
(1)   86/    1820 :                             while i < strlen("MOV [F600],DX")
(1)   86/    1820 :                             dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    1820 :                     i       set i + 1
(1)   86/    1820 :                             endm
(1)   86/    1820 : 2D                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    1821 : =$1                 i       set i + 1
(1)   86/    1821 : 2F                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    1822 : =$2                 i       set i + 1
(1)   86/    1822 : 36                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    1823 : =$3                 i       set i + 1
(1)   86/    1823 : 00                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    1824 : =$4                 i       set i + 1
(1)   86/    1824 : 3B                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    1825 : =$5                 i       set i + 1
(1)   86/    1825 : 26                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    1826 : =$6                 i       set i + 1
(1)   86/    1826 : 16                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    1827 : =$7                 i       set i + 1
(1)   86/    1827 : 10                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    1828 : =$8                 i       set i + 1
(1)   86/    1828 : 10                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    1829 : =$9                 i       set i + 1
(1)   86/    1829 : 3D                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    182A : =$A                 i       set i + 1
(1)   86/    182A : 0C                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    182B : =$B                 i       set i + 1
(1)   86/    182B : 24                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    182C : =$C                 i       set i + 1
(1)   86/    182C : 38                          dc.b    (substr("MOV [F600],DX", i, 1) - $20)
(1)   86/    182D : =$D                 i       set i + 1
(1)   86/    182D :                     
(1)   87/    182D : (MACRO)[2011]       	String78:	dfntxt "MOV BX,[BX]"
(1)   87/    182D : =$0                 i       set     0
(1)   87/    182D :                             while i < strlen("MOV BX,[BX]")
(1)   87/    182D :                             dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    182D :                     i       set i + 1
(1)   87/    182D :                             endm
(1)   87/    182D : 2D                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    182E : =$1                 i       set i + 1
(1)   87/    182E : 2F                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    182F : =$2                 i       set i + 1
(1)   87/    182F : 36                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    1830 : =$3                 i       set i + 1
(1)   87/    1830 : 00                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    1831 : =$4                 i       set i + 1
(1)   87/    1831 : 22                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    1832 : =$5                 i       set i + 1
(1)   87/    1832 : 38                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    1833 : =$6                 i       set i + 1
(1)   87/    1833 : 0C                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 97 - 7/13/2025 17:28:33


(1)   87/    1834 : =$7                 i       set i + 1
(1)   87/    1834 : 3B                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    1835 : =$8                 i       set i + 1
(1)   87/    1835 : 22                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    1836 : =$9                 i       set i + 1
(1)   87/    1836 : 38                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    1837 : =$A                 i       set i + 1
(1)   87/    1837 : 3D                          dc.b    (substr("MOV BX,[BX]", i, 1) - $20)
(1)   87/    1838 : =$B                 i       set i + 1
(1)   87/    1838 :                     
(1)   88/    1838 : (MACRO)[2024]       	String79:	dfntxt "MOV [SI],CX"
(1)   88/    1838 : =$0                 i       set     0
(1)   88/    1838 :                             while i < strlen("MOV [SI],CX")
(1)   88/    1838 :                             dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    1838 :                     i       set i + 1
(1)   88/    1838 :                             endm
(1)   88/    1838 : 2D                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    1839 : =$1                 i       set i + 1
(1)   88/    1839 : 2F                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    183A : =$2                 i       set i + 1
(1)   88/    183A : 36                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    183B : =$3                 i       set i + 1
(1)   88/    183B : 00                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    183C : =$4                 i       set i + 1
(1)   88/    183C : 3B                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    183D : =$5                 i       set i + 1
(1)   88/    183D : 33                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    183E : =$6                 i       set i + 1
(1)   88/    183E : 29                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    183F : =$7                 i       set i + 1
(1)   88/    183F : 3D                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    1840 : =$8                 i       set i + 1
(1)   88/    1840 : 0C                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    1841 : =$9                 i       set i + 1
(1)   88/    1841 : 23                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    1842 : =$A                 i       set i + 1
(1)   88/    1842 : 38                          dc.b    (substr("MOV [SI],CX", i, 1) - $20)
(1)   88/    1843 : =$B                 i       set i + 1
(1)   88/    1843 :                     
(1)   89/    1843 : (MACRO)[2037]       	String80:	dfntxt "8-bit values (0-FF)"
(1)   89/    1843 : =$0                 i       set     0
(1)   89/    1843 :                             while i < strlen("8-bit values (0-FF)")
(1)   89/    1843 :                             dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1843 :                     i       set i + 1
(1)   89/    1843 :                             endm
(1)   89/    1843 : 18                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1844 : =$1                 i       set i + 1
(1)   89/    1844 : 0D                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1845 : =$2                 i       set i + 1
(1)   89/    1845 : 42                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1846 : =$3                 i       set i + 1
(1)   89/    1846 : 49                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1847 : =$4                 i       set i + 1
(1)   89/    1847 : 54                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1848 : =$5                 i       set i + 1
(1)   89/    1848 : 00                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1849 : =$6                 i       set i + 1
(1)   89/    1849 : 56                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    184A : =$7                 i       set i + 1
(1)   89/    184A : 41                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 98 - 7/13/2025 17:28:33


(1)   89/    184B : =$8                 i       set i + 1
(1)   89/    184B : 4C                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    184C : =$9                 i       set i + 1
(1)   89/    184C : 55                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    184D : =$A                 i       set i + 1
(1)   89/    184D : 45                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    184E : =$B                 i       set i + 1
(1)   89/    184E : 53                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    184F : =$C                 i       set i + 1
(1)   89/    184F : 00                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1850 : =$D                 i       set i + 1
(1)   89/    1850 : 08                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1851 : =$E                 i       set i + 1
(1)   89/    1851 : 10                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1852 : =$F                 i       set i + 1
(1)   89/    1852 : 0D                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1853 : =$10                i       set i + 1
(1)   89/    1853 : 26                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1854 : =$11                i       set i + 1
(1)   89/    1854 : 26                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1855 : =$12                i       set i + 1
(1)   89/    1855 : 09                          dc.b    (substr("8-bit values (0-FF)", i, 1) - $20)
(1)   89/    1856 : =$13                i       set i + 1
(1)   89/    1856 :                     
(1)   90/    1856 : (MACRO)[2058]       	String81:	dfntxt "MOV AL,[0AC0]"
(1)   90/    1856 : =$0                 i       set     0
(1)   90/    1856 :                             while i < strlen("MOV AL,[0AC0]")
(1)   90/    1856 :                             dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    1856 :                     i       set i + 1
(1)   90/    1856 :                             endm
(1)   90/    1856 : 2D                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    1857 : =$1                 i       set i + 1
(1)   90/    1857 : 2F                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    1858 : =$2                 i       set i + 1
(1)   90/    1858 : 36                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    1859 : =$3                 i       set i + 1
(1)   90/    1859 : 00                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    185A : =$4                 i       set i + 1
(1)   90/    185A : 21                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    185B : =$5                 i       set i + 1
(1)   90/    185B : 2C                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    185C : =$6                 i       set i + 1
(1)   90/    185C : 0C                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    185D : =$7                 i       set i + 1
(1)   90/    185D : 3B                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    185E : =$8                 i       set i + 1
(1)   90/    185E : 10                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    185F : =$9                 i       set i + 1
(1)   90/    185F : 21                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    1860 : =$A                 i       set i + 1
(1)   90/    1860 : 23                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    1861 : =$B                 i       set i + 1
(1)   90/    1861 : 10                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    1862 : =$C                 i       set i + 1
(1)   90/    1862 : 3D                          dc.b    (substr("MOV AL,[0AC0]", i, 1) - $20)
(1)   90/    1863 : =$D                 i       set i + 1
(1)   90/    1863 :                     
(1)   91/    1863 : (MACRO)[2073]       	String82:	dfntxt "MOV DL,AX"
(1)   91/    1863 : =$0                 i       set     0
(1)   91/    1863 :                             while i < strlen("MOV DL,AX")
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 99 - 7/13/2025 17:28:33


(1)   91/    1863 :                             dc.b    (substr("MOV DL,AX", i, 1) - $20)
(1)   91/    1863 :                     i       set i + 1
(1)   91/    1863 :                             endm
(1)   91/    1863 : 2D                          dc.b    (substr("MOV DL,AX", i, 1) - $20)
(1)   91/    1864 : =$1                 i       set i + 1
(1)   91/    1864 : 2F                          dc.b    (substr("MOV DL,AX", i, 1) - $20)
(1)   91/    1865 : =$2                 i       set i + 1
(1)   91/    1865 : 36                          dc.b    (substr("MOV DL,AX", i, 1) - $20)
(1)   91/    1866 : =$3                 i       set i + 1
(1)   91/    1866 : 00                          dc.b    (substr("MOV DL,AX", i, 1) - $20)
(1)   91/    1867 : =$4                 i       set i + 1
(1)   91/    1867 : 24                          dc.b    (substr("MOV DL,AX", i, 1) - $20)
(1)   91/    1868 : =$5                 i       set i + 1
(1)   91/    1868 : 2C                          dc.b    (substr("MOV DL,AX", i, 1) - $20)
(1)   91/    1869 : =$6                 i       set i + 1
(1)   91/    1869 : 0C                          dc.b    (substr("MOV DL,AX", i, 1) - $20)
(1)   91/    186A : =$7                 i       set i + 1
(1)   91/    186A : 21                          dc.b    (substr("MOV DL,AX", i, 1) - $20)
(1)   91/    186B : =$8                 i       set i + 1
(1)   91/    186B : 38                          dc.b    (substr("MOV DL,AX", i, 1) - $20)
(1)   91/    186C : =$9                 i       set i + 1
(1)   91/    186C :                     
(1)   92/    186C : (MACRO)[2084]       	String83:	dfntxt "However, there are some limitations:"
(1)   92/    186C : =$0                 i       set     0
(1)   92/    186C :                             while i < strlen("However, there are some limitations:")
(1)   92/    186C :                             dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    186C :                     i       set i + 1
(1)   92/    186C :                             endm
(1)   92/    186C : 28                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    186D : =$1                 i       set i + 1
(1)   92/    186D : 4F                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    186E : =$2                 i       set i + 1
(1)   92/    186E : 57                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    186F : =$3                 i       set i + 1
(1)   92/    186F : 45                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1870 : =$4                 i       set i + 1
(1)   92/    1870 : 56                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1871 : =$5                 i       set i + 1
(1)   92/    1871 : 45                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1872 : =$6                 i       set i + 1
(1)   92/    1872 : 52                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1873 : =$7                 i       set i + 1
(1)   92/    1873 : 0C                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1874 : =$8                 i       set i + 1
(1)   92/    1874 : 00                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1875 : =$9                 i       set i + 1
(1)   92/    1875 : 54                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1876 : =$A                 i       set i + 1
(1)   92/    1876 : 48                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1877 : =$B                 i       set i + 1
(1)   92/    1877 : 45                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1878 : =$C                 i       set i + 1
(1)   92/    1878 : 52                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1879 : =$D                 i       set i + 1
(1)   92/    1879 : 45                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    187A : =$E                 i       set i + 1
(1)   92/    187A : 00                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    187B : =$F                 i       set i + 1
(1)   92/    187B : 41                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    187C : =$10                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 100 - 7/13/2025 17:28:33


(1)   92/    187C : 52                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    187D : =$11                i       set i + 1
(1)   92/    187D : 45                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    187E : =$12                i       set i + 1
(1)   92/    187E : 00                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    187F : =$13                i       set i + 1
(1)   92/    187F : 53                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1880 : =$14                i       set i + 1
(1)   92/    1880 : 4F                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1881 : =$15                i       set i + 1
(1)   92/    1881 : 4D                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1882 : =$16                i       set i + 1
(1)   92/    1882 : 45                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1883 : =$17                i       set i + 1
(1)   92/    1883 : 00                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1884 : =$18                i       set i + 1
(1)   92/    1884 : 4C                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1885 : =$19                i       set i + 1
(1)   92/    1885 : 49                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1886 : =$1A                i       set i + 1
(1)   92/    1886 : 4D                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1887 : =$1B                i       set i + 1
(1)   92/    1887 : 49                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1888 : =$1C                i       set i + 1
(1)   92/    1888 : 54                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1889 : =$1D                i       set i + 1
(1)   92/    1889 : 41                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    188A : =$1E                i       set i + 1
(1)   92/    188A : 54                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    188B : =$1F                i       set i + 1
(1)   92/    188B : 49                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    188C : =$20                i       set i + 1
(1)   92/    188C : 4F                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    188D : =$21                i       set i + 1
(1)   92/    188D : 4E                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    188E : =$22                i       set i + 1
(1)   92/    188E : 53                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    188F : =$23                i       set i + 1
(1)   92/    188F : 1A                          dc.b    (substr("However, there are some limitations:", i, 1) - $20)
(1)   92/    1890 : =$24                i       set i + 1
(1)   92/    1890 :                     
(1)   93/    1890 : (MACRO)[2122]       	String84:	dfntxt "MOV [0200],A03B"
(1)   93/    1890 : =$0                 i       set     0
(1)   93/    1890 :                             while i < strlen("MOV [0200],A03B")
(1)   93/    1890 :                             dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    1890 :                     i       set i + 1
(1)   93/    1890 :                             endm
(1)   93/    1890 : 2D                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    1891 : =$1                 i       set i + 1
(1)   93/    1891 : 2F                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    1892 : =$2                 i       set i + 1
(1)   93/    1892 : 36                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    1893 : =$3                 i       set i + 1
(1)   93/    1893 : 00                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    1894 : =$4                 i       set i + 1
(1)   93/    1894 : 3B                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    1895 : =$5                 i       set i + 1
(1)   93/    1895 : 10                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    1896 : =$6                 i       set i + 1
(1)   93/    1896 : 12                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 101 - 7/13/2025 17:28:33


(1)   93/    1897 : =$7                 i       set i + 1
(1)   93/    1897 : 10                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    1898 : =$8                 i       set i + 1
(1)   93/    1898 : 10                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    1899 : =$9                 i       set i + 1
(1)   93/    1899 : 3D                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    189A : =$A                 i       set i + 1
(1)   93/    189A : 0C                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    189B : =$B                 i       set i + 1
(1)   93/    189B : 21                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    189C : =$C                 i       set i + 1
(1)   93/    189C : 10                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    189D : =$D                 i       set i + 1
(1)   93/    189D : 13                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    189E : =$E                 i       set i + 1
(1)   93/    189E : 22                          dc.b    (substr("MOV [0200],A03B", i, 1) - $20)
(1)   93/    189F : =$F                 i       set i + 1
(1)   93/    189F :                     
(1)   94/    189F : (MACRO)[2139]       	String85:	dfntxt "-> must specify the size"
(1)   94/    189F : =$0                 i       set     0
(1)   94/    189F :                             while i < strlen("-> must specify the size")
(1)   94/    189F :                             dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    189F :                     i       set i + 1
(1)   94/    189F :                             endm
(1)   94/    189F : 0D                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18A0 : =$1                 i       set i + 1
(1)   94/    18A0 : 1E                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18A1 : =$2                 i       set i + 1
(1)   94/    18A1 : 00                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18A2 : =$3                 i       set i + 1
(1)   94/    18A2 : 4D                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18A3 : =$4                 i       set i + 1
(1)   94/    18A3 : 55                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18A4 : =$5                 i       set i + 1
(1)   94/    18A4 : 53                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18A5 : =$6                 i       set i + 1
(1)   94/    18A5 : 54                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18A6 : =$7                 i       set i + 1
(1)   94/    18A6 : 00                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18A7 : =$8                 i       set i + 1
(1)   94/    18A7 : 53                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18A8 : =$9                 i       set i + 1
(1)   94/    18A8 : 50                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18A9 : =$A                 i       set i + 1
(1)   94/    18A9 : 45                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18AA : =$B                 i       set i + 1
(1)   94/    18AA : 43                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18AB : =$C                 i       set i + 1
(1)   94/    18AB : 49                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18AC : =$D                 i       set i + 1
(1)   94/    18AC : 46                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18AD : =$E                 i       set i + 1
(1)   94/    18AD : 59                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18AE : =$F                 i       set i + 1
(1)   94/    18AE : 00                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18AF : =$10                i       set i + 1
(1)   94/    18AF : 54                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18B0 : =$11                i       set i + 1
(1)   94/    18B0 : 48                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18B1 : =$12                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 102 - 7/13/2025 17:28:33


(1)   94/    18B1 : 45                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18B2 : =$13                i       set i + 1
(1)   94/    18B2 : 00                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18B3 : =$14                i       set i + 1
(1)   94/    18B3 : 53                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18B4 : =$15                i       set i + 1
(1)   94/    18B4 : 49                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18B5 : =$16                i       set i + 1
(1)   94/    18B5 : 5A                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18B6 : =$17                i       set i + 1
(1)   94/    18B6 : 45                          dc.b    (substr("-> must specify the size", i, 1) - $20)
(1)   94/    18B7 : =$18                i       set i + 1
(1)   94/    18B7 :                     
(1)   95/    18B7 : (MACRO)[2165]       	String86:	dfntxt "MOV [0000],[0100]"
(1)   95/    18B7 : =$0                 i       set     0
(1)   95/    18B7 :                             while i < strlen("MOV [0000],[0100]")
(1)   95/    18B7 :                             dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18B7 :                     i       set i + 1
(1)   95/    18B7 :                             endm
(1)   95/    18B7 : 2D                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18B8 : =$1                 i       set i + 1
(1)   95/    18B8 : 2F                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18B9 : =$2                 i       set i + 1
(1)   95/    18B9 : 36                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18BA : =$3                 i       set i + 1
(1)   95/    18BA : 00                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18BB : =$4                 i       set i + 1
(1)   95/    18BB : 3B                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18BC : =$5                 i       set i + 1
(1)   95/    18BC : 10                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18BD : =$6                 i       set i + 1
(1)   95/    18BD : 10                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18BE : =$7                 i       set i + 1
(1)   95/    18BE : 10                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18BF : =$8                 i       set i + 1
(1)   95/    18BF : 10                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18C0 : =$9                 i       set i + 1
(1)   95/    18C0 : 3D                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18C1 : =$A                 i       set i + 1
(1)   95/    18C1 : 0C                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18C2 : =$B                 i       set i + 1
(1)   95/    18C2 : 3B                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18C3 : =$C                 i       set i + 1
(1)   95/    18C3 : 10                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18C4 : =$D                 i       set i + 1
(1)   95/    18C4 : 11                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18C5 : =$E                 i       set i + 1
(1)   95/    18C5 : 10                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18C6 : =$F                 i       set i + 1
(1)   95/    18C6 : 10                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18C7 : =$10                i       set i + 1
(1)   95/    18C7 : 3D                          dc.b    (substr("MOV [0000],[0100]", i, 1) - $20)
(1)   95/    18C8 : =$11                i       set i + 1
(1)   95/    18C8 :                     
(1)   96/    18C8 : (MACRO)[2184]       	String87:	dfntxt "-> not possible"
(1)   96/    18C8 : =$0                 i       set     0
(1)   96/    18C8 :                             while i < strlen("-> not possible")
(1)   96/    18C8 :                             dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18C8 :                     i       set i + 1
(1)   96/    18C8 :                             endm
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 103 - 7/13/2025 17:28:33


(1)   96/    18C8 : 0D                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18C9 : =$1                 i       set i + 1
(1)   96/    18C9 : 1E                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18CA : =$2                 i       set i + 1
(1)   96/    18CA : 00                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18CB : =$3                 i       set i + 1
(1)   96/    18CB : 4E                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18CC : =$4                 i       set i + 1
(1)   96/    18CC : 4F                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18CD : =$5                 i       set i + 1
(1)   96/    18CD : 54                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18CE : =$6                 i       set i + 1
(1)   96/    18CE : 00                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18CF : =$7                 i       set i + 1
(1)   96/    18CF : 50                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18D0 : =$8                 i       set i + 1
(1)   96/    18D0 : 4F                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18D1 : =$9                 i       set i + 1
(1)   96/    18D1 : 53                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18D2 : =$A                 i       set i + 1
(1)   96/    18D2 : 53                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18D3 : =$B                 i       set i + 1
(1)   96/    18D3 : 49                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18D4 : =$C                 i       set i + 1
(1)   96/    18D4 : 42                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18D5 : =$D                 i       set i + 1
(1)   96/    18D5 : 4C                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18D6 : =$E                 i       set i + 1
(1)   96/    18D6 : 45                          dc.b    (substr("-> not possible", i, 1) - $20)
(1)   96/    18D7 : =$F                 i       set i + 1
(1)   96/    18D7 :                     
(1)   97/    18D7 : (MACRO)[2201]       	String88:	dfntxt "Motorola 68000"
(1)   97/    18D7 : =$0                 i       set     0
(1)   97/    18D7 :                             while i < strlen("Motorola 68000")
(1)   97/    18D7 :                             dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18D7 :                     i       set i + 1
(1)   97/    18D7 :                             endm
(1)   97/    18D7 : 2D                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18D8 : =$1                 i       set i + 1
(1)   97/    18D8 : 4F                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18D9 : =$2                 i       set i + 1
(1)   97/    18D9 : 54                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18DA : =$3                 i       set i + 1
(1)   97/    18DA : 4F                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18DB : =$4                 i       set i + 1
(1)   97/    18DB : 52                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18DC : =$5                 i       set i + 1
(1)   97/    18DC : 4F                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18DD : =$6                 i       set i + 1
(1)   97/    18DD : 4C                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18DE : =$7                 i       set i + 1
(1)   97/    18DE : 41                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18DF : =$8                 i       set i + 1
(1)   97/    18DF : 00                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18E0 : =$9                 i       set i + 1
(1)   97/    18E0 : 16                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18E1 : =$A                 i       set i + 1
(1)   97/    18E1 : 18                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18E2 : =$B                 i       set i + 1
(1)   97/    18E2 : 10                          dc.b    (substr("Motorola 68000", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 104 - 7/13/2025 17:28:33


(1)   97/    18E3 : =$C                 i       set i + 1
(1)   97/    18E3 : 10                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18E4 : =$D                 i       set i + 1
(1)   97/    18E4 : 10                          dc.b    (substr("Motorola 68000", i, 1) - $20)
(1)   97/    18E5 : =$E                 i       set i + 1
(1)   97/    18E5 :                     
(1)   98/    18E5 : (MACRO)[2217]       	String89:	dfntxt "move.w #$37D5,d1"
(1)   98/    18E5 : =$0                 i       set     0
(1)   98/    18E5 :                             while i < strlen("move.w #$37D5,d1")
(1)   98/    18E5 :                             dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18E5 :                     i       set i + 1
(1)   98/    18E5 :                             endm
(1)   98/    18E5 : 4D                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18E6 : =$1                 i       set i + 1
(1)   98/    18E6 : 4F                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18E7 : =$2                 i       set i + 1
(1)   98/    18E7 : 56                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18E8 : =$3                 i       set i + 1
(1)   98/    18E8 : 45                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18E9 : =$4                 i       set i + 1
(1)   98/    18E9 : 0E                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18EA : =$5                 i       set i + 1
(1)   98/    18EA : 57                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18EB : =$6                 i       set i + 1
(1)   98/    18EB : 00                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18EC : =$7                 i       set i + 1
(1)   98/    18EC : 03                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18ED : =$8                 i       set i + 1
(1)   98/    18ED : 04                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18EE : =$9                 i       set i + 1
(1)   98/    18EE : 13                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18EF : =$A                 i       set i + 1
(1)   98/    18EF : 17                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18F0 : =$B                 i       set i + 1
(1)   98/    18F0 : 24                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18F1 : =$C                 i       set i + 1
(1)   98/    18F1 : 15                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18F2 : =$D                 i       set i + 1
(1)   98/    18F2 : 0C                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18F3 : =$E                 i       set i + 1
(1)   98/    18F3 : 44                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18F4 : =$F                 i       set i + 1
(1)   98/    18F4 : 11                          dc.b    (substr("move.w #$37D5,d1", i, 1) - $20)
(1)   98/    18F5 : =$10                i       set i + 1
(1)   98/    18F5 :                     
(1)   99/    18F5 : (MACRO)[2235]       	String90:	dfntxt "move.w d4,$F600"
(1)   99/    18F5 : =$0                 i       set     0
(1)   99/    18F5 :                             while i < strlen("move.w d4,$F600")
(1)   99/    18F5 :                             dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    18F5 :                     i       set i + 1
(1)   99/    18F5 :                             endm
(1)   99/    18F5 : 4D                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    18F6 : =$1                 i       set i + 1
(1)   99/    18F6 : 4F                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    18F7 : =$2                 i       set i + 1
(1)   99/    18F7 : 56                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    18F8 : =$3                 i       set i + 1
(1)   99/    18F8 : 45                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    18F9 : =$4                 i       set i + 1
(1)   99/    18F9 : 0E                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 105 - 7/13/2025 17:28:33


(1)   99/    18FA : =$5                 i       set i + 1
(1)   99/    18FA : 57                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    18FB : =$6                 i       set i + 1
(1)   99/    18FB : 00                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    18FC : =$7                 i       set i + 1
(1)   99/    18FC : 44                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    18FD : =$8                 i       set i + 1
(1)   99/    18FD : 14                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    18FE : =$9                 i       set i + 1
(1)   99/    18FE : 0C                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    18FF : =$A                 i       set i + 1
(1)   99/    18FF : 04                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    1900 : =$B                 i       set i + 1
(1)   99/    1900 : 26                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    1901 : =$C                 i       set i + 1
(1)   99/    1901 : 16                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    1902 : =$D                 i       set i + 1
(1)   99/    1902 : 10                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    1903 : =$E                 i       set i + 1
(1)   99/    1903 : 10                          dc.b    (substr("move.w d4,$F600", i, 1) - $20)
(1)   99/    1904 : =$F                 i       set i + 1
(1)   99/    1904 :                     
(1)  100/    1904 : (MACRO)[2252]       	String91:	dfntxt "move.w (a0),a0"
(1)  100/    1904 : =$0                 i       set     0
(1)  100/    1904 :                             while i < strlen("move.w (a0),a0")
(1)  100/    1904 :                             dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    1904 :                     i       set i + 1
(1)  100/    1904 :                             endm
(1)  100/    1904 : 4D                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    1905 : =$1                 i       set i + 1
(1)  100/    1905 : 4F                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    1906 : =$2                 i       set i + 1
(1)  100/    1906 : 56                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    1907 : =$3                 i       set i + 1
(1)  100/    1907 : 45                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    1908 : =$4                 i       set i + 1
(1)  100/    1908 : 0E                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    1909 : =$5                 i       set i + 1
(1)  100/    1909 : 57                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    190A : =$6                 i       set i + 1
(1)  100/    190A : 00                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    190B : =$7                 i       set i + 1
(1)  100/    190B : 08                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    190C : =$8                 i       set i + 1
(1)  100/    190C : 41                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    190D : =$9                 i       set i + 1
(1)  100/    190D : 10                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    190E : =$A                 i       set i + 1
(1)  100/    190E : 09                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    190F : =$B                 i       set i + 1
(1)  100/    190F : 0C                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    1910 : =$C                 i       set i + 1
(1)  100/    1910 : 41                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    1911 : =$D                 i       set i + 1
(1)  100/    1911 : 10                          dc.b    (substr("move.w (a0),a0", i, 1) - $20)
(1)  100/    1912 : =$E                 i       set i + 1
(1)  100/    1912 :                     
(1)  101/    1912 : (MACRO)[2268]       	String92:	dfntxt "move.w (a1),d1"
(1)  101/    1912 : =$0                 i       set     0
(1)  101/    1912 :                             while i < strlen("move.w (a1),d1")
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 106 - 7/13/2025 17:28:33


(1)  101/    1912 :                             dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    1912 :                     i       set i + 1
(1)  101/    1912 :                             endm
(1)  101/    1912 : 4D                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    1913 : =$1                 i       set i + 1
(1)  101/    1913 : 4F                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    1914 : =$2                 i       set i + 1
(1)  101/    1914 : 56                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    1915 : =$3                 i       set i + 1
(1)  101/    1915 : 45                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    1916 : =$4                 i       set i + 1
(1)  101/    1916 : 0E                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    1917 : =$5                 i       set i + 1
(1)  101/    1917 : 57                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    1918 : =$6                 i       set i + 1
(1)  101/    1918 : 00                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    1919 : =$7                 i       set i + 1
(1)  101/    1919 : 08                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    191A : =$8                 i       set i + 1
(1)  101/    191A : 41                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    191B : =$9                 i       set i + 1
(1)  101/    191B : 11                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    191C : =$A                 i       set i + 1
(1)  101/    191C : 09                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    191D : =$B                 i       set i + 1
(1)  101/    191D : 0C                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    191E : =$C                 i       set i + 1
(1)  101/    191E : 44                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    191F : =$D                 i       set i + 1
(1)  101/    191F : 11                          dc.b    (substr("move.w (a1),d1", i, 1) - $20)
(1)  101/    1920 : =$E                 i       set i + 1
(1)  101/    1920 :                     
(1)  102/    1920 : (MACRO)[2284]       	String93:	dfntxt "move.b $0AC0,d0"
(1)  102/    1920 : =$0                 i       set     0
(1)  102/    1920 :                             while i < strlen("move.b $0AC0,d0")
(1)  102/    1920 :                             dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    1920 :                     i       set i + 1
(1)  102/    1920 :                             endm
(1)  102/    1920 : 4D                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    1921 : =$1                 i       set i + 1
(1)  102/    1921 : 4F                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    1922 : =$2                 i       set i + 1
(1)  102/    1922 : 56                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    1923 : =$3                 i       set i + 1
(1)  102/    1923 : 45                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    1924 : =$4                 i       set i + 1
(1)  102/    1924 : 0E                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    1925 : =$5                 i       set i + 1
(1)  102/    1925 : 42                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    1926 : =$6                 i       set i + 1
(1)  102/    1926 : 00                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    1927 : =$7                 i       set i + 1
(1)  102/    1927 : 04                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    1928 : =$8                 i       set i + 1
(1)  102/    1928 : 10                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    1929 : =$9                 i       set i + 1
(1)  102/    1929 : 21                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    192A : =$A                 i       set i + 1
(1)  102/    192A : 23                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    192B : =$B                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 107 - 7/13/2025 17:28:33


(1)  102/    192B : 10                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    192C : =$C                 i       set i + 1
(1)  102/    192C : 0C                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    192D : =$D                 i       set i + 1
(1)  102/    192D : 44                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    192E : =$E                 i       set i + 1
(1)  102/    192E : 10                          dc.b    (substr("move.b $0AC0,d0", i, 1) - $20)
(1)  102/    192F : =$F                 i       set i + 1
(1)  102/    192F :                     
(1)  103/    192F : (MACRO)[2301]       	String94:	dfntxt "move.b d2,d0"
(1)  103/    192F : =$0                 i       set     0
(1)  103/    192F :                             while i < strlen("move.b d2,d0")
(1)  103/    192F :                             dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    192F :                     i       set i + 1
(1)  103/    192F :                             endm
(1)  103/    192F : 4D                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    1930 : =$1                 i       set i + 1
(1)  103/    1930 : 4F                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    1931 : =$2                 i       set i + 1
(1)  103/    1931 : 56                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    1932 : =$3                 i       set i + 1
(1)  103/    1932 : 45                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    1933 : =$4                 i       set i + 1
(1)  103/    1933 : 0E                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    1934 : =$5                 i       set i + 1
(1)  103/    1934 : 42                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    1935 : =$6                 i       set i + 1
(1)  103/    1935 : 00                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    1936 : =$7                 i       set i + 1
(1)  103/    1936 : 44                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    1937 : =$8                 i       set i + 1
(1)  103/    1937 : 12                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    1938 : =$9                 i       set i + 1
(1)  103/    1938 : 0C                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    1939 : =$A                 i       set i + 1
(1)  103/    1939 : 44                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    193A : =$B                 i       set i + 1
(1)  103/    193A : 10                          dc.b    (substr("move.b d2,d0", i, 1) - $20)
(1)  103/    193B : =$C                 i       set i + 1
(1)  103/    193B :                     
(1)  104/    193B : (MACRO)[2315]       	String95:	dfntxt "In 68k architecture, these limits"
(1)  104/    193B : =$0                 i       set     0
(1)  104/    193B :                             while i < strlen("In 68k architecture, these limits")
(1)  104/    193B :                             dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    193B :                     i       set i + 1
(1)  104/    193B :                             endm
(1)  104/    193B : 29                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    193C : =$1                 i       set i + 1
(1)  104/    193C : 4E                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    193D : =$2                 i       set i + 1
(1)  104/    193D : 00                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    193E : =$3                 i       set i + 1
(1)  104/    193E : 16                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    193F : =$4                 i       set i + 1
(1)  104/    193F : 18                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1940 : =$5                 i       set i + 1
(1)  104/    1940 : 4B                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1941 : =$6                 i       set i + 1
(1)  104/    1941 : 00                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1942 : =$7                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 108 - 7/13/2025 17:28:33


(1)  104/    1942 : 41                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1943 : =$8                 i       set i + 1
(1)  104/    1943 : 52                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1944 : =$9                 i       set i + 1
(1)  104/    1944 : 43                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1945 : =$A                 i       set i + 1
(1)  104/    1945 : 48                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1946 : =$B                 i       set i + 1
(1)  104/    1946 : 49                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1947 : =$C                 i       set i + 1
(1)  104/    1947 : 54                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1948 : =$D                 i       set i + 1
(1)  104/    1948 : 45                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1949 : =$E                 i       set i + 1
(1)  104/    1949 : 43                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    194A : =$F                 i       set i + 1
(1)  104/    194A : 54                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    194B : =$10                i       set i + 1
(1)  104/    194B : 55                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    194C : =$11                i       set i + 1
(1)  104/    194C : 52                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    194D : =$12                i       set i + 1
(1)  104/    194D : 45                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    194E : =$13                i       set i + 1
(1)  104/    194E : 0C                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    194F : =$14                i       set i + 1
(1)  104/    194F : 00                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1950 : =$15                i       set i + 1
(1)  104/    1950 : 54                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1951 : =$16                i       set i + 1
(1)  104/    1951 : 48                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1952 : =$17                i       set i + 1
(1)  104/    1952 : 45                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1953 : =$18                i       set i + 1
(1)  104/    1953 : 53                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1954 : =$19                i       set i + 1
(1)  104/    1954 : 45                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1955 : =$1A                i       set i + 1
(1)  104/    1955 : 00                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1956 : =$1B                i       set i + 1
(1)  104/    1956 : 4C                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1957 : =$1C                i       set i + 1
(1)  104/    1957 : 49                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1958 : =$1D                i       set i + 1
(1)  104/    1958 : 4D                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    1959 : =$1E                i       set i + 1
(1)  104/    1959 : 49                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    195A : =$1F                i       set i + 1
(1)  104/    195A : 54                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    195B : =$20                i       set i + 1
(1)  104/    195B : 53                          dc.b    (substr("In 68k architecture, these limits", i, 1) - $20)
(1)  104/    195C : =$21                i       set i + 1
(1)  104/    195C :                     
(1)  105/    195C : (MACRO)[2350]       	String96:	dfntxt "do not exist!"
(1)  105/    195C : =$0                 i       set     0
(1)  105/    195C :                             while i < strlen("do not exist!")
(1)  105/    195C :                             dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    195C :                     i       set i + 1
(1)  105/    195C :                             endm
(1)  105/    195C : 44                          dc.b    (substr("do not exist!", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 109 - 7/13/2025 17:28:33


(1)  105/    195D : =$1                 i       set i + 1
(1)  105/    195D : 4F                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    195E : =$2                 i       set i + 1
(1)  105/    195E : 00                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    195F : =$3                 i       set i + 1
(1)  105/    195F : 4E                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    1960 : =$4                 i       set i + 1
(1)  105/    1960 : 4F                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    1961 : =$5                 i       set i + 1
(1)  105/    1961 : 54                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    1962 : =$6                 i       set i + 1
(1)  105/    1962 : 00                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    1963 : =$7                 i       set i + 1
(1)  105/    1963 : 45                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    1964 : =$8                 i       set i + 1
(1)  105/    1964 : 58                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    1965 : =$9                 i       set i + 1
(1)  105/    1965 : 49                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    1966 : =$A                 i       set i + 1
(1)  105/    1966 : 53                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    1967 : =$B                 i       set i + 1
(1)  105/    1967 : 54                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    1968 : =$C                 i       set i + 1
(1)  105/    1968 : 01                          dc.b    (substr("do not exist!", i, 1) - $20)
(1)  105/    1969 : =$D                 i       set i + 1
(1)  105/    1969 :                     
(1)  106/    1969 : (MACRO)[2365]       	String97:	dfntxt "If you noticed..."
(1)  106/    1969 : =$0                 i       set     0
(1)  106/    1969 :                             while i < strlen("If you noticed...")
(1)  106/    1969 :                             dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1969 :                     i       set i + 1
(1)  106/    1969 :                             endm
(1)  106/    1969 : 29                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    196A : =$1                 i       set i + 1
(1)  106/    196A : 46                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    196B : =$2                 i       set i + 1
(1)  106/    196B : 00                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    196C : =$3                 i       set i + 1
(1)  106/    196C : 59                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    196D : =$4                 i       set i + 1
(1)  106/    196D : 4F                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    196E : =$5                 i       set i + 1
(1)  106/    196E : 55                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    196F : =$6                 i       set i + 1
(1)  106/    196F : 00                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1970 : =$7                 i       set i + 1
(1)  106/    1970 : 4E                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1971 : =$8                 i       set i + 1
(1)  106/    1971 : 4F                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1972 : =$9                 i       set i + 1
(1)  106/    1972 : 54                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1973 : =$A                 i       set i + 1
(1)  106/    1973 : 49                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1974 : =$B                 i       set i + 1
(1)  106/    1974 : 43                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1975 : =$C                 i       set i + 1
(1)  106/    1975 : 45                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1976 : =$D                 i       set i + 1
(1)  106/    1976 : 44                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1977 : =$E                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 110 - 7/13/2025 17:28:33


(1)  106/    1977 : 0E                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1978 : =$F                 i       set i + 1
(1)  106/    1978 : 0E                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    1979 : =$10                i       set i + 1
(1)  106/    1979 : 0E                          dc.b    (substr("If you noticed...", i, 1) - $20)
(1)  106/    197A : =$11                i       set i + 1
(1)  106/    197A :                     
(1)  107/    197A : (MACRO)[2384]       	String98:	dfntxt "MOV *dest*,*sour*"
(1)  107/    197A : =$0                 i       set     0
(1)  107/    197A :                             while i < strlen("MOV *dest*,*sour*")
(1)  107/    197A :                             dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    197A :                     i       set i + 1
(1)  107/    197A :                             endm
(1)  107/    197A : 2D                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    197B : =$1                 i       set i + 1
(1)  107/    197B : 2F                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    197C : =$2                 i       set i + 1
(1)  107/    197C : 36                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    197D : =$3                 i       set i + 1
(1)  107/    197D : 00                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    197E : =$4                 i       set i + 1
(1)  107/    197E : 0A                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    197F : =$5                 i       set i + 1
(1)  107/    197F : 44                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    1980 : =$6                 i       set i + 1
(1)  107/    1980 : 45                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    1981 : =$7                 i       set i + 1
(1)  107/    1981 : 53                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    1982 : =$8                 i       set i + 1
(1)  107/    1982 : 54                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    1983 : =$9                 i       set i + 1
(1)  107/    1983 : 0A                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    1984 : =$A                 i       set i + 1
(1)  107/    1984 : 0C                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    1985 : =$B                 i       set i + 1
(1)  107/    1985 : 0A                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    1986 : =$C                 i       set i + 1
(1)  107/    1986 : 53                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    1987 : =$D                 i       set i + 1
(1)  107/    1987 : 4F                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    1988 : =$E                 i       set i + 1
(1)  107/    1988 : 55                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    1989 : =$F                 i       set i + 1
(1)  107/    1989 : 52                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    198A : =$10                i       set i + 1
(1)  107/    198A : 0A                          dc.b    (substr("MOV *dest*,*sour*", i, 1) - $20)
(1)  107/    198B : =$11                i       set i + 1
(1)  107/    198B :                     
(1)  108/    198B : (MACRO)[2403]       	String99:	dfntxt "move.w *sour*,*dest*"
(1)  108/    198B : =$0                 i       set     0
(1)  108/    198B :                             while i < strlen("move.w *sour*,*dest*")
(1)  108/    198B :                             dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    198B :                     i       set i + 1
(1)  108/    198B :                             endm
(1)  108/    198B : 4D                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    198C : =$1                 i       set i + 1
(1)  108/    198C : 4F                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    198D : =$2                 i       set i + 1
(1)  108/    198D : 56                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    198E : =$3                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 111 - 7/13/2025 17:28:33


(1)  108/    198E : 45                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    198F : =$4                 i       set i + 1
(1)  108/    198F : 0E                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    1990 : =$5                 i       set i + 1
(1)  108/    1990 : 57                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    1991 : =$6                 i       set i + 1
(1)  108/    1991 : 00                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    1992 : =$7                 i       set i + 1
(1)  108/    1992 : 0A                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    1993 : =$8                 i       set i + 1
(1)  108/    1993 : 53                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    1994 : =$9                 i       set i + 1
(1)  108/    1994 : 4F                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    1995 : =$A                 i       set i + 1
(1)  108/    1995 : 55                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    1996 : =$B                 i       set i + 1
(1)  108/    1996 : 52                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    1997 : =$C                 i       set i + 1
(1)  108/    1997 : 0A                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    1998 : =$D                 i       set i + 1
(1)  108/    1998 : 0C                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    1999 : =$E                 i       set i + 1
(1)  108/    1999 : 0A                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    199A : =$F                 i       set i + 1
(1)  108/    199A : 44                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    199B : =$10                i       set i + 1
(1)  108/    199B : 45                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    199C : =$11                i       set i + 1
(1)  108/    199C : 53                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    199D : =$12                i       set i + 1
(1)  108/    199D : 54                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    199E : =$13                i       set i + 1
(1)  108/    199E : 0A                          dc.b    (substr("move.w *sour*,*dest*", i, 1) - $20)
(1)  108/    199F : =$14                i       set i + 1
(1)  108/    199F :                     
(1)  109/    199F :                     
(1)  110/    199F : (MACRO)[2425]       	String100:	dfntxt "Instruction Set Differences"
(1)  110/    199F : =$0                 i       set     0
(1)  110/    199F :                             while i < strlen("Instruction Set Differences")
(1)  110/    199F :                             dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    199F :                     i       set i + 1
(1)  110/    199F :                             endm
(1)  110/    199F : 29                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19A0 : =$1                 i       set i + 1
(1)  110/    19A0 : 4E                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19A1 : =$2                 i       set i + 1
(1)  110/    19A1 : 53                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19A2 : =$3                 i       set i + 1
(1)  110/    19A2 : 54                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19A3 : =$4                 i       set i + 1
(1)  110/    19A3 : 52                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19A4 : =$5                 i       set i + 1
(1)  110/    19A4 : 55                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19A5 : =$6                 i       set i + 1
(1)  110/    19A5 : 43                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19A6 : =$7                 i       set i + 1
(1)  110/    19A6 : 54                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19A7 : =$8                 i       set i + 1
(1)  110/    19A7 : 49                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19A8 : =$9                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 112 - 7/13/2025 17:28:33


(1)  110/    19A8 : 4F                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19A9 : =$A                 i       set i + 1
(1)  110/    19A9 : 4E                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19AA : =$B                 i       set i + 1
(1)  110/    19AA : 00                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19AB : =$C                 i       set i + 1
(1)  110/    19AB : 33                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19AC : =$D                 i       set i + 1
(1)  110/    19AC : 45                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19AD : =$E                 i       set i + 1
(1)  110/    19AD : 54                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19AE : =$F                 i       set i + 1
(1)  110/    19AE : 00                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19AF : =$10                i       set i + 1
(1)  110/    19AF : 24                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19B0 : =$11                i       set i + 1
(1)  110/    19B0 : 49                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19B1 : =$12                i       set i + 1
(1)  110/    19B1 : 46                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19B2 : =$13                i       set i + 1
(1)  110/    19B2 : 46                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19B3 : =$14                i       set i + 1
(1)  110/    19B3 : 45                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19B4 : =$15                i       set i + 1
(1)  110/    19B4 : 52                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19B5 : =$16                i       set i + 1
(1)  110/    19B5 : 45                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19B6 : =$17                i       set i + 1
(1)  110/    19B6 : 4E                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19B7 : =$18                i       set i + 1
(1)  110/    19B7 : 43                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19B8 : =$19                i       set i + 1
(1)  110/    19B8 : 45                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19B9 : =$1A                i       set i + 1
(1)  110/    19B9 : 53                          dc.b    (substr("Instruction Set Differences", i, 1) - $20)
(1)  110/    19BA : =$1B                i       set i + 1
(1)  110/    19BA :                     
(1)  111/    19BA : (MACRO)[2454]       	String101:	dfntxt "68k compiler syntax and additional notes"
(1)  111/    19BA : =$0                 i       set     0
(1)  111/    19BA :                             while i < strlen("68k compiler syntax and additional notes")
(1)  111/    19BA :                             dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19BA :                     i       set i + 1
(1)  111/    19BA :                             endm
(1)  111/    19BA : 16                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19BB : =$1                 i       set i + 1
(1)  111/    19BB : 18                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19BC : =$2                 i       set i + 1
(1)  111/    19BC : 4B                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19BD : =$3                 i       set i + 1
(1)  111/    19BD : 00                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19BE : =$4                 i       set i + 1
(1)  111/    19BE : 43                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19BF : =$5                 i       set i + 1
(1)  111/    19BF : 4F                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19C0 : =$6                 i       set i + 1
(1)  111/    19C0 : 4D                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19C1 : =$7                 i       set i + 1
(1)  111/    19C1 : 50                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19C2 : =$8                 i       set i + 1
(1)  111/    19C2 : 49                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 113 - 7/13/2025 17:28:33


(1)  111/    19C3 : =$9                 i       set i + 1
(1)  111/    19C3 : 4C                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19C4 : =$A                 i       set i + 1
(1)  111/    19C4 : 45                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19C5 : =$B                 i       set i + 1
(1)  111/    19C5 : 52                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19C6 : =$C                 i       set i + 1
(1)  111/    19C6 : 00                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19C7 : =$D                 i       set i + 1
(1)  111/    19C7 : 53                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19C8 : =$E                 i       set i + 1
(1)  111/    19C8 : 59                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19C9 : =$F                 i       set i + 1
(1)  111/    19C9 : 4E                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19CA : =$10                i       set i + 1
(1)  111/    19CA : 54                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19CB : =$11                i       set i + 1
(1)  111/    19CB : 41                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19CC : =$12                i       set i + 1
(1)  111/    19CC : 58                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19CD : =$13                i       set i + 1
(1)  111/    19CD : 00                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19CE : =$14                i       set i + 1
(1)  111/    19CE : 41                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19CF : =$15                i       set i + 1
(1)  111/    19CF : 4E                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19D0 : =$16                i       set i + 1
(1)  111/    19D0 : 44                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19D1 : =$17                i       set i + 1
(1)  111/    19D1 : 00                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19D2 : =$18                i       set i + 1
(1)  111/    19D2 : 41                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19D3 : =$19                i       set i + 1
(1)  111/    19D3 : 44                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19D4 : =$1A                i       set i + 1
(1)  111/    19D4 : 44                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19D5 : =$1B                i       set i + 1
(1)  111/    19D5 : 49                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19D6 : =$1C                i       set i + 1
(1)  111/    19D6 : 54                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19D7 : =$1D                i       set i + 1
(1)  111/    19D7 : 49                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19D8 : =$1E                i       set i + 1
(1)  111/    19D8 : 4F                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19D9 : =$1F                i       set i + 1
(1)  111/    19D9 : 4E                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19DA : =$20                i       set i + 1
(1)  111/    19DA : 41                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19DB : =$21                i       set i + 1
(1)  111/    19DB : 4C                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19DC : =$22                i       set i + 1
(1)  111/    19DC : 00                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19DD : =$23                i       set i + 1
(1)  111/    19DD : 4E                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19DE : =$24                i       set i + 1
(1)  111/    19DE : 4F                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19DF : =$25                i       set i + 1
(1)  111/    19DF : 54                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19E0 : =$26                i       set i + 1
(1)  111/    19E0 : 45                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 114 - 7/13/2025 17:28:33


(1)  111/    19E1 : =$27                i       set i + 1
(1)  111/    19E1 : 53                          dc.b    (substr("68k compiler syntax and additional notes", i, 1) - $20)
(1)  111/    19E2 : =$28                i       set i + 1
(1)  111/    19E2 :                     
(1)  112/    19E2 : (MACRO)[2496]       	String102:	dfntxt "Operand sizes (e.g. move.l)"
(1)  112/    19E2 : =$0                 i       set     0
(1)  112/    19E2 :                             while i < strlen("Operand sizes (e.g. move.l)")
(1)  112/    19E2 :                             dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19E2 :                     i       set i + 1
(1)  112/    19E2 :                             endm
(1)  112/    19E2 : 2F                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19E3 : =$1                 i       set i + 1
(1)  112/    19E3 : 50                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19E4 : =$2                 i       set i + 1
(1)  112/    19E4 : 45                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19E5 : =$3                 i       set i + 1
(1)  112/    19E5 : 52                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19E6 : =$4                 i       set i + 1
(1)  112/    19E6 : 41                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19E7 : =$5                 i       set i + 1
(1)  112/    19E7 : 4E                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19E8 : =$6                 i       set i + 1
(1)  112/    19E8 : 44                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19E9 : =$7                 i       set i + 1
(1)  112/    19E9 : 00                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19EA : =$8                 i       set i + 1
(1)  112/    19EA : 53                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19EB : =$9                 i       set i + 1
(1)  112/    19EB : 49                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19EC : =$A                 i       set i + 1
(1)  112/    19EC : 5A                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19ED : =$B                 i       set i + 1
(1)  112/    19ED : 45                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19EE : =$C                 i       set i + 1
(1)  112/    19EE : 53                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19EF : =$D                 i       set i + 1
(1)  112/    19EF : 00                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19F0 : =$E                 i       set i + 1
(1)  112/    19F0 : 08                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19F1 : =$F                 i       set i + 1
(1)  112/    19F1 : 45                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19F2 : =$10                i       set i + 1
(1)  112/    19F2 : 0E                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19F3 : =$11                i       set i + 1
(1)  112/    19F3 : 47                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19F4 : =$12                i       set i + 1
(1)  112/    19F4 : 0E                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19F5 : =$13                i       set i + 1
(1)  112/    19F5 : 00                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19F6 : =$14                i       set i + 1
(1)  112/    19F6 : 4D                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19F7 : =$15                i       set i + 1
(1)  112/    19F7 : 4F                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19F8 : =$16                i       set i + 1
(1)  112/    19F8 : 56                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19F9 : =$17                i       set i + 1
(1)  112/    19F9 : 45                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19FA : =$18                i       set i + 1
(1)  112/    19FA : 0E                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19FB : =$19                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 115 - 7/13/2025 17:28:33


(1)  112/    19FB : 4C                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19FC : =$1A                i       set i + 1
(1)  112/    19FC : 09                          dc.b    (substr("Operand sizes (e.g. move.l)", i, 1) - $20)
(1)  112/    19FD : =$1B                i       set i + 1
(1)  112/    19FD :                     
(1)  113/    19FD : (MACRO)[2525]       	String103:	dfntxt ".b: byte = 255 values (8-bit)"
(1)  113/    19FD : =$0                 i       set     0
(1)  113/    19FD :                             while i < strlen(".b: byte = 255 values (8-bit)")
(1)  113/    19FD :                             dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    19FD :                     i       set i + 1
(1)  113/    19FD :                             endm
(1)  113/    19FD : 0E                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    19FE : =$1                 i       set i + 1
(1)  113/    19FE : 42                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    19FF : =$2                 i       set i + 1
(1)  113/    19FF : 1A                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A00 : =$3                 i       set i + 1
(1)  113/    1A00 : 00                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A01 : =$4                 i       set i + 1
(1)  113/    1A01 : 42                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A02 : =$5                 i       set i + 1
(1)  113/    1A02 : 59                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A03 : =$6                 i       set i + 1
(1)  113/    1A03 : 54                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A04 : =$7                 i       set i + 1
(1)  113/    1A04 : 45                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A05 : =$8                 i       set i + 1
(1)  113/    1A05 : 00                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A06 : =$9                 i       set i + 1
(1)  113/    1A06 : 1D                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A07 : =$A                 i       set i + 1
(1)  113/    1A07 : 00                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A08 : =$B                 i       set i + 1
(1)  113/    1A08 : 12                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A09 : =$C                 i       set i + 1
(1)  113/    1A09 : 15                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A0A : =$D                 i       set i + 1
(1)  113/    1A0A : 15                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A0B : =$E                 i       set i + 1
(1)  113/    1A0B : 00                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A0C : =$F                 i       set i + 1
(1)  113/    1A0C : 56                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A0D : =$10                i       set i + 1
(1)  113/    1A0D : 41                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A0E : =$11                i       set i + 1
(1)  113/    1A0E : 4C                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A0F : =$12                i       set i + 1
(1)  113/    1A0F : 55                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A10 : =$13                i       set i + 1
(1)  113/    1A10 : 45                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A11 : =$14                i       set i + 1
(1)  113/    1A11 : 53                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A12 : =$15                i       set i + 1
(1)  113/    1A12 : 00                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A13 : =$16                i       set i + 1
(1)  113/    1A13 : 08                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A14 : =$17                i       set i + 1
(1)  113/    1A14 : 18                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A15 : =$18                i       set i + 1
(1)  113/    1A15 : 0D                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 116 - 7/13/2025 17:28:33


(1)  113/    1A16 : =$19                i       set i + 1
(1)  113/    1A16 : 42                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A17 : =$1A                i       set i + 1
(1)  113/    1A17 : 49                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A18 : =$1B                i       set i + 1
(1)  113/    1A18 : 54                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A19 : =$1C                i       set i + 1
(1)  113/    1A19 : 09                          dc.b    (substr(".b: byte = 255 values (8-bit)", i, 1) - $20)
(1)  113/    1A1A : =$1D                i       set i + 1
(1)  113/    1A1A :                     
(1)  114/    1A1A : (MACRO)[2556]       	String104:	dfntxt ".w: word = 65536 values (16-bit)"
(1)  114/    1A1A : =$0                 i       set     0
(1)  114/    1A1A :                             while i < strlen(".w: word = 65536 values (16-bit)")
(1)  114/    1A1A :                             dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A1A :                     i       set i + 1
(1)  114/    1A1A :                             endm
(1)  114/    1A1A : 0E                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A1B : =$1                 i       set i + 1
(1)  114/    1A1B : 57                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A1C : =$2                 i       set i + 1
(1)  114/    1A1C : 1A                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A1D : =$3                 i       set i + 1
(1)  114/    1A1D : 00                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A1E : =$4                 i       set i + 1
(1)  114/    1A1E : 57                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A1F : =$5                 i       set i + 1
(1)  114/    1A1F : 4F                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A20 : =$6                 i       set i + 1
(1)  114/    1A20 : 52                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A21 : =$7                 i       set i + 1
(1)  114/    1A21 : 44                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A22 : =$8                 i       set i + 1
(1)  114/    1A22 : 00                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A23 : =$9                 i       set i + 1
(1)  114/    1A23 : 1D                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A24 : =$A                 i       set i + 1
(1)  114/    1A24 : 00                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A25 : =$B                 i       set i + 1
(1)  114/    1A25 : 16                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A26 : =$C                 i       set i + 1
(1)  114/    1A26 : 15                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A27 : =$D                 i       set i + 1
(1)  114/    1A27 : 15                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A28 : =$E                 i       set i + 1
(1)  114/    1A28 : 13                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A29 : =$F                 i       set i + 1
(1)  114/    1A29 : 16                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A2A : =$10                i       set i + 1
(1)  114/    1A2A : 00                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A2B : =$11                i       set i + 1
(1)  114/    1A2B : 56                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A2C : =$12                i       set i + 1
(1)  114/    1A2C : 41                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A2D : =$13                i       set i + 1
(1)  114/    1A2D : 4C                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A2E : =$14                i       set i + 1
(1)  114/    1A2E : 55                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A2F : =$15                i       set i + 1
(1)  114/    1A2F : 45                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A30 : =$16                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 117 - 7/13/2025 17:28:33


(1)  114/    1A30 : 53                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A31 : =$17                i       set i + 1
(1)  114/    1A31 : 00                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A32 : =$18                i       set i + 1
(1)  114/    1A32 : 08                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A33 : =$19                i       set i + 1
(1)  114/    1A33 : 11                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A34 : =$1A                i       set i + 1
(1)  114/    1A34 : 16                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A35 : =$1B                i       set i + 1
(1)  114/    1A35 : 0D                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A36 : =$1C                i       set i + 1
(1)  114/    1A36 : 42                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A37 : =$1D                i       set i + 1
(1)  114/    1A37 : 49                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A38 : =$1E                i       set i + 1
(1)  114/    1A38 : 54                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A39 : =$1F                i       set i + 1
(1)  114/    1A39 : 09                          dc.b    (substr(".w: word = 65536 values (16-bit)", i, 1) - $20)
(1)  114/    1A3A : =$20                i       set i + 1
(1)  114/    1A3A :                     
(1)  115/    1A3A : (MACRO)[2590]       	String105:	dfntxt ".l: long = 4294967296 values! (32-bit!)"
(1)  115/    1A3A : =$0                 i       set     0
(1)  115/    1A3A :                             while i < strlen(".l: long = 4294967296 values! (32-bit!)")
(1)  115/    1A3A :                             dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A3A :                     i       set i + 1
(1)  115/    1A3A :                             endm
(1)  115/    1A3A : 0E                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A3B : =$1                 i       set i + 1
(1)  115/    1A3B : 4C                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A3C : =$2                 i       set i + 1
(1)  115/    1A3C : 1A                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A3D : =$3                 i       set i + 1
(1)  115/    1A3D : 00                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A3E : =$4                 i       set i + 1
(1)  115/    1A3E : 4C                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A3F : =$5                 i       set i + 1
(1)  115/    1A3F : 4F                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A40 : =$6                 i       set i + 1
(1)  115/    1A40 : 4E                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A41 : =$7                 i       set i + 1
(1)  115/    1A41 : 47                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A42 : =$8                 i       set i + 1
(1)  115/    1A42 : 00                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A43 : =$9                 i       set i + 1
(1)  115/    1A43 : 1D                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A44 : =$A                 i       set i + 1
(1)  115/    1A44 : 00                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A45 : =$B                 i       set i + 1
(1)  115/    1A45 : 14                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A46 : =$C                 i       set i + 1
(1)  115/    1A46 : 12                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A47 : =$D                 i       set i + 1
(1)  115/    1A47 : 19                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A48 : =$E                 i       set i + 1
(1)  115/    1A48 : 14                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A49 : =$F                 i       set i + 1
(1)  115/    1A49 : 19                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A4A : =$10                i       set i + 1
(1)  115/    1A4A : 16                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 118 - 7/13/2025 17:28:33


(1)  115/    1A4B : =$11                i       set i + 1
(1)  115/    1A4B : 17                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A4C : =$12                i       set i + 1
(1)  115/    1A4C : 12                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A4D : =$13                i       set i + 1
(1)  115/    1A4D : 19                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A4E : =$14                i       set i + 1
(1)  115/    1A4E : 16                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A4F : =$15                i       set i + 1
(1)  115/    1A4F : 00                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A50 : =$16                i       set i + 1
(1)  115/    1A50 : 56                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A51 : =$17                i       set i + 1
(1)  115/    1A51 : 41                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A52 : =$18                i       set i + 1
(1)  115/    1A52 : 4C                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A53 : =$19                i       set i + 1
(1)  115/    1A53 : 55                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A54 : =$1A                i       set i + 1
(1)  115/    1A54 : 45                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A55 : =$1B                i       set i + 1
(1)  115/    1A55 : 53                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A56 : =$1C                i       set i + 1
(1)  115/    1A56 : 01                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A57 : =$1D                i       set i + 1
(1)  115/    1A57 : 00                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A58 : =$1E                i       set i + 1
(1)  115/    1A58 : 08                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A59 : =$1F                i       set i + 1
(1)  115/    1A59 : 13                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A5A : =$20                i       set i + 1
(1)  115/    1A5A : 12                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A5B : =$21                i       set i + 1
(1)  115/    1A5B : 0D                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A5C : =$22                i       set i + 1
(1)  115/    1A5C : 42                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A5D : =$23                i       set i + 1
(1)  115/    1A5D : 49                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A5E : =$24                i       set i + 1
(1)  115/    1A5E : 54                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A5F : =$25                i       set i + 1
(1)  115/    1A5F : 01                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A60 : =$26                i       set i + 1
(1)  115/    1A60 : 09                          dc.b    (substr(".l: long = 4294967296 values! (32-bit!)", i, 1) - $20)
(1)  115/    1A61 : =$27                i       set i + 1
(1)  115/    1A61 :                     
(1)  116/    1A61 : (MACRO)[2631]       	String106:	dfntxt "Immediate values (e.g. move.w #1234,d0)"
(1)  116/    1A61 : =$0                 i       set     0
(1)  116/    1A61 :                             while i < strlen("Immediate values (e.g. move.w #1234,d0)")
(1)  116/    1A61 :                             dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A61 :                     i       set i + 1
(1)  116/    1A61 :                             endm
(1)  116/    1A61 : 29                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A62 : =$1                 i       set i + 1
(1)  116/    1A62 : 4D                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A63 : =$2                 i       set i + 1
(1)  116/    1A63 : 4D                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A64 : =$3                 i       set i + 1
(1)  116/    1A64 : 45                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A65 : =$4                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 119 - 7/13/2025 17:28:33


(1)  116/    1A65 : 44                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A66 : =$5                 i       set i + 1
(1)  116/    1A66 : 49                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A67 : =$6                 i       set i + 1
(1)  116/    1A67 : 41                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A68 : =$7                 i       set i + 1
(1)  116/    1A68 : 54                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A69 : =$8                 i       set i + 1
(1)  116/    1A69 : 45                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A6A : =$9                 i       set i + 1
(1)  116/    1A6A : 00                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A6B : =$A                 i       set i + 1
(1)  116/    1A6B : 56                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A6C : =$B                 i       set i + 1
(1)  116/    1A6C : 41                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A6D : =$C                 i       set i + 1
(1)  116/    1A6D : 4C                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A6E : =$D                 i       set i + 1
(1)  116/    1A6E : 55                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A6F : =$E                 i       set i + 1
(1)  116/    1A6F : 45                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A70 : =$F                 i       set i + 1
(1)  116/    1A70 : 53                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A71 : =$10                i       set i + 1
(1)  116/    1A71 : 00                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A72 : =$11                i       set i + 1
(1)  116/    1A72 : 08                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A73 : =$12                i       set i + 1
(1)  116/    1A73 : 45                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A74 : =$13                i       set i + 1
(1)  116/    1A74 : 0E                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A75 : =$14                i       set i + 1
(1)  116/    1A75 : 47                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A76 : =$15                i       set i + 1
(1)  116/    1A76 : 0E                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A77 : =$16                i       set i + 1
(1)  116/    1A77 : 00                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A78 : =$17                i       set i + 1
(1)  116/    1A78 : 4D                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A79 : =$18                i       set i + 1
(1)  116/    1A79 : 4F                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A7A : =$19                i       set i + 1
(1)  116/    1A7A : 56                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A7B : =$1A                i       set i + 1
(1)  116/    1A7B : 45                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A7C : =$1B                i       set i + 1
(1)  116/    1A7C : 0E                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A7D : =$1C                i       set i + 1
(1)  116/    1A7D : 57                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A7E : =$1D                i       set i + 1
(1)  116/    1A7E : 00                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A7F : =$1E                i       set i + 1
(1)  116/    1A7F : 03                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A80 : =$1F                i       set i + 1
(1)  116/    1A80 : 11                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A81 : =$20                i       set i + 1
(1)  116/    1A81 : 12                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A82 : =$21                i       set i + 1
(1)  116/    1A82 : 13                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A83 : =$22                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 120 - 7/13/2025 17:28:33


(1)  116/    1A83 : 14                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A84 : =$23                i       set i + 1
(1)  116/    1A84 : 0C                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A85 : =$24                i       set i + 1
(1)  116/    1A85 : 44                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A86 : =$25                i       set i + 1
(1)  116/    1A86 : 10                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A87 : =$26                i       set i + 1
(1)  116/    1A87 : 09                          dc.b    (substr("Immediate values (e.g. move.w #1234,d0)", i, 1) - $20)
(1)  116/    1A88 : =$27                i       set i + 1
(1)  116/    1A88 :                     
(1)  117/    1A88 : (MACRO)[2672]       	String107:	dfntxt "#  -> decimal number (#264873781)"
(1)  117/    1A88 : =$0                 i       set     0
(1)  117/    1A88 :                             while i < strlen("#  -> decimal number (#264873781)")
(1)  117/    1A88 :                             dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A88 :                     i       set i + 1
(1)  117/    1A88 :                             endm
(1)  117/    1A88 : 03                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A89 : =$1                 i       set i + 1
(1)  117/    1A89 : 00                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A8A : =$2                 i       set i + 1
(1)  117/    1A8A : 00                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A8B : =$3                 i       set i + 1
(1)  117/    1A8B : 0D                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A8C : =$4                 i       set i + 1
(1)  117/    1A8C : 1E                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A8D : =$5                 i       set i + 1
(1)  117/    1A8D : 00                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A8E : =$6                 i       set i + 1
(1)  117/    1A8E : 44                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A8F : =$7                 i       set i + 1
(1)  117/    1A8F : 45                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A90 : =$8                 i       set i + 1
(1)  117/    1A90 : 43                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A91 : =$9                 i       set i + 1
(1)  117/    1A91 : 49                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A92 : =$A                 i       set i + 1
(1)  117/    1A92 : 4D                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A93 : =$B                 i       set i + 1
(1)  117/    1A93 : 41                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A94 : =$C                 i       set i + 1
(1)  117/    1A94 : 4C                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A95 : =$D                 i       set i + 1
(1)  117/    1A95 : 00                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A96 : =$E                 i       set i + 1
(1)  117/    1A96 : 4E                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A97 : =$F                 i       set i + 1
(1)  117/    1A97 : 55                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A98 : =$10                i       set i + 1
(1)  117/    1A98 : 4D                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A99 : =$11                i       set i + 1
(1)  117/    1A99 : 42                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A9A : =$12                i       set i + 1
(1)  117/    1A9A : 45                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A9B : =$13                i       set i + 1
(1)  117/    1A9B : 52                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A9C : =$14                i       set i + 1
(1)  117/    1A9C : 00                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A9D : =$15                i       set i + 1
(1)  117/    1A9D : 08                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 121 - 7/13/2025 17:28:33


(1)  117/    1A9E : =$16                i       set i + 1
(1)  117/    1A9E : 03                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1A9F : =$17                i       set i + 1
(1)  117/    1A9F : 12                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1AA0 : =$18                i       set i + 1
(1)  117/    1AA0 : 16                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1AA1 : =$19                i       set i + 1
(1)  117/    1AA1 : 14                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1AA2 : =$1A                i       set i + 1
(1)  117/    1AA2 : 18                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1AA3 : =$1B                i       set i + 1
(1)  117/    1AA3 : 17                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1AA4 : =$1C                i       set i + 1
(1)  117/    1AA4 : 13                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1AA5 : =$1D                i       set i + 1
(1)  117/    1AA5 : 17                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1AA6 : =$1E                i       set i + 1
(1)  117/    1AA6 : 18                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1AA7 : =$1F                i       set i + 1
(1)  117/    1AA7 : 11                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1AA8 : =$20                i       set i + 1
(1)  117/    1AA8 : 09                          dc.b    (substr("#  -> decimal number (#264873781)", i, 1) - $20)
(1)  117/    1AA9 : =$21                i       set i + 1
(1)  117/    1AA9 :                     
(1)  118/    1AA9 : (MACRO)[2707]       	String108:	dfntxt "#$ -> hexadecimal number (#$ABCD)"
(1)  118/    1AA9 : =$0                 i       set     0
(1)  118/    1AA9 :                             while i < strlen("#$ -> hexadecimal number (#$ABCD)")
(1)  118/    1AA9 :                             dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AA9 :                     i       set i + 1
(1)  118/    1AA9 :                             endm
(1)  118/    1AA9 : 03                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AAA : =$1                 i       set i + 1
(1)  118/    1AAA : 04                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AAB : =$2                 i       set i + 1
(1)  118/    1AAB : 00                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AAC : =$3                 i       set i + 1
(1)  118/    1AAC : 0D                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AAD : =$4                 i       set i + 1
(1)  118/    1AAD : 1E                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AAE : =$5                 i       set i + 1
(1)  118/    1AAE : 00                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AAF : =$6                 i       set i + 1
(1)  118/    1AAF : 48                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AB0 : =$7                 i       set i + 1
(1)  118/    1AB0 : 45                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AB1 : =$8                 i       set i + 1
(1)  118/    1AB1 : 58                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AB2 : =$9                 i       set i + 1
(1)  118/    1AB2 : 41                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AB3 : =$A                 i       set i + 1
(1)  118/    1AB3 : 44                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AB4 : =$B                 i       set i + 1
(1)  118/    1AB4 : 45                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AB5 : =$C                 i       set i + 1
(1)  118/    1AB5 : 43                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AB6 : =$D                 i       set i + 1
(1)  118/    1AB6 : 49                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AB7 : =$E                 i       set i + 1
(1)  118/    1AB7 : 4D                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AB8 : =$F                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 122 - 7/13/2025 17:28:33


(1)  118/    1AB8 : 41                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AB9 : =$10                i       set i + 1
(1)  118/    1AB9 : 4C                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1ABA : =$11                i       set i + 1
(1)  118/    1ABA : 00                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1ABB : =$12                i       set i + 1
(1)  118/    1ABB : 4E                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1ABC : =$13                i       set i + 1
(1)  118/    1ABC : 55                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1ABD : =$14                i       set i + 1
(1)  118/    1ABD : 4D                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1ABE : =$15                i       set i + 1
(1)  118/    1ABE : 42                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1ABF : =$16                i       set i + 1
(1)  118/    1ABF : 45                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AC0 : =$17                i       set i + 1
(1)  118/    1AC0 : 52                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AC1 : =$18                i       set i + 1
(1)  118/    1AC1 : 00                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AC2 : =$19                i       set i + 1
(1)  118/    1AC2 : 08                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AC3 : =$1A                i       set i + 1
(1)  118/    1AC3 : 03                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AC4 : =$1B                i       set i + 1
(1)  118/    1AC4 : 04                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AC5 : =$1C                i       set i + 1
(1)  118/    1AC5 : 21                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AC6 : =$1D                i       set i + 1
(1)  118/    1AC6 : 22                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AC7 : =$1E                i       set i + 1
(1)  118/    1AC7 : 23                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AC8 : =$1F                i       set i + 1
(1)  118/    1AC8 : 24                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1AC9 : =$20                i       set i + 1
(1)  118/    1AC9 : 09                          dc.b    (substr("#$ -> hexadecimal number (#$ABCD)", i, 1) - $20)
(1)  118/    1ACA : =$21                i       set i + 1
(1)  118/    1ACA :                     
(1)  119/    1ACA : (MACRO)[2742]       	String109:	dfntxt "#% -> binary number (#%110100101)"
(1)  119/    1ACA : =$0                 i       set     0
(1)  119/    1ACA :                             while i < strlen("#% -> binary number (#%110100101)")
(1)  119/    1ACA :                             dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ACA :                     i       set i + 1
(1)  119/    1ACA :                             endm
(1)  119/    1ACA : 03                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ACB : =$1                 i       set i + 1
(1)  119/    1ACB : 05                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ACC : =$2                 i       set i + 1
(1)  119/    1ACC : 00                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ACD : =$3                 i       set i + 1
(1)  119/    1ACD : 0D                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ACE : =$4                 i       set i + 1
(1)  119/    1ACE : 1E                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ACF : =$5                 i       set i + 1
(1)  119/    1ACF : 00                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AD0 : =$6                 i       set i + 1
(1)  119/    1AD0 : 42                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AD1 : =$7                 i       set i + 1
(1)  119/    1AD1 : 49                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AD2 : =$8                 i       set i + 1
(1)  119/    1AD2 : 4E                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 123 - 7/13/2025 17:28:33


(1)  119/    1AD3 : =$9                 i       set i + 1
(1)  119/    1AD3 : 41                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AD4 : =$A                 i       set i + 1
(1)  119/    1AD4 : 52                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AD5 : =$B                 i       set i + 1
(1)  119/    1AD5 : 59                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AD6 : =$C                 i       set i + 1
(1)  119/    1AD6 : 00                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AD7 : =$D                 i       set i + 1
(1)  119/    1AD7 : 4E                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AD8 : =$E                 i       set i + 1
(1)  119/    1AD8 : 55                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AD9 : =$F                 i       set i + 1
(1)  119/    1AD9 : 4D                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ADA : =$10                i       set i + 1
(1)  119/    1ADA : 42                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ADB : =$11                i       set i + 1
(1)  119/    1ADB : 45                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ADC : =$12                i       set i + 1
(1)  119/    1ADC : 52                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ADD : =$13                i       set i + 1
(1)  119/    1ADD : 00                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ADE : =$14                i       set i + 1
(1)  119/    1ADE : 08                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1ADF : =$15                i       set i + 1
(1)  119/    1ADF : 03                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AE0 : =$16                i       set i + 1
(1)  119/    1AE0 : 05                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AE1 : =$17                i       set i + 1
(1)  119/    1AE1 : 11                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AE2 : =$18                i       set i + 1
(1)  119/    1AE2 : 11                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AE3 : =$19                i       set i + 1
(1)  119/    1AE3 : 10                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AE4 : =$1A                i       set i + 1
(1)  119/    1AE4 : 11                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AE5 : =$1B                i       set i + 1
(1)  119/    1AE5 : 10                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AE6 : =$1C                i       set i + 1
(1)  119/    1AE6 : 10                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AE7 : =$1D                i       set i + 1
(1)  119/    1AE7 : 11                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AE8 : =$1E                i       set i + 1
(1)  119/    1AE8 : 10                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AE9 : =$1F                i       set i + 1
(1)  119/    1AE9 : 11                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AEA : =$20                i       set i + 1
(1)  119/    1AEA : 09                          dc.b    (substr("#% -> binary number (#%110100101)", i, 1) - $20)
(1)  119/    1AEB : =$21                i       set i + 1
(1)  119/    1AEB :                     
(1)  120/    1AEB : (MACRO)[2777]       	String110:	dfntxt "Addressing (e.g. move.l d0,$E010)"
(1)  120/    1AEB : =$0                 i       set     0
(1)  120/    1AEB :                             while i < strlen("Addressing (e.g. move.l d0,$E010)")
(1)  120/    1AEB :                             dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AEB :                     i       set i + 1
(1)  120/    1AEB :                             endm
(1)  120/    1AEB : 21                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AEC : =$1                 i       set i + 1
(1)  120/    1AEC : 44                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AED : =$2                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 124 - 7/13/2025 17:28:33


(1)  120/    1AED : 44                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AEE : =$3                 i       set i + 1
(1)  120/    1AEE : 52                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AEF : =$4                 i       set i + 1
(1)  120/    1AEF : 45                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AF0 : =$5                 i       set i + 1
(1)  120/    1AF0 : 53                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AF1 : =$6                 i       set i + 1
(1)  120/    1AF1 : 53                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AF2 : =$7                 i       set i + 1
(1)  120/    1AF2 : 49                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AF3 : =$8                 i       set i + 1
(1)  120/    1AF3 : 4E                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AF4 : =$9                 i       set i + 1
(1)  120/    1AF4 : 47                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AF5 : =$A                 i       set i + 1
(1)  120/    1AF5 : 00                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AF6 : =$B                 i       set i + 1
(1)  120/    1AF6 : 08                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AF7 : =$C                 i       set i + 1
(1)  120/    1AF7 : 45                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AF8 : =$D                 i       set i + 1
(1)  120/    1AF8 : 0E                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AF9 : =$E                 i       set i + 1
(1)  120/    1AF9 : 47                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AFA : =$F                 i       set i + 1
(1)  120/    1AFA : 0E                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AFB : =$10                i       set i + 1
(1)  120/    1AFB : 00                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AFC : =$11                i       set i + 1
(1)  120/    1AFC : 4D                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AFD : =$12                i       set i + 1
(1)  120/    1AFD : 4F                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AFE : =$13                i       set i + 1
(1)  120/    1AFE : 56                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1AFF : =$14                i       set i + 1
(1)  120/    1AFF : 45                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B00 : =$15                i       set i + 1
(1)  120/    1B00 : 0E                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B01 : =$16                i       set i + 1
(1)  120/    1B01 : 4C                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B02 : =$17                i       set i + 1
(1)  120/    1B02 : 00                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B03 : =$18                i       set i + 1
(1)  120/    1B03 : 44                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B04 : =$19                i       set i + 1
(1)  120/    1B04 : 10                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B05 : =$1A                i       set i + 1
(1)  120/    1B05 : 0C                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B06 : =$1B                i       set i + 1
(1)  120/    1B06 : 04                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B07 : =$1C                i       set i + 1
(1)  120/    1B07 : 25                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B08 : =$1D                i       set i + 1
(1)  120/    1B08 : 10                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B09 : =$1E                i       set i + 1
(1)  120/    1B09 : 11                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B0A : =$1F                i       set i + 1
(1)  120/    1B0A : 10                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B0B : =$20                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 125 - 7/13/2025 17:28:33


(1)  120/    1B0B : 09                          dc.b    (substr("Addressing (e.g. move.l d0,$E010)", i, 1) - $20)
(1)  120/    1B0C : =$21                i       set i + 1
(1)  120/    1B0C :                     
(1)  121/    1B0C : (MACRO)[2812]       	String111:	dfntxt "$ -> refer to memory space with address"
(1)  121/    1B0C : =$0                 i       set     0
(1)  121/    1B0C :                             while i < strlen("$ -> refer to memory space with address")
(1)  121/    1B0C :                             dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B0C :                     i       set i + 1
(1)  121/    1B0C :                             endm
(1)  121/    1B0C : 04                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B0D : =$1                 i       set i + 1
(1)  121/    1B0D : 00                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B0E : =$2                 i       set i + 1
(1)  121/    1B0E : 0D                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B0F : =$3                 i       set i + 1
(1)  121/    1B0F : 1E                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B10 : =$4                 i       set i + 1
(1)  121/    1B10 : 00                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B11 : =$5                 i       set i + 1
(1)  121/    1B11 : 52                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B12 : =$6                 i       set i + 1
(1)  121/    1B12 : 45                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B13 : =$7                 i       set i + 1
(1)  121/    1B13 : 46                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B14 : =$8                 i       set i + 1
(1)  121/    1B14 : 45                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B15 : =$9                 i       set i + 1
(1)  121/    1B15 : 52                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B16 : =$A                 i       set i + 1
(1)  121/    1B16 : 00                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B17 : =$B                 i       set i + 1
(1)  121/    1B17 : 54                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B18 : =$C                 i       set i + 1
(1)  121/    1B18 : 4F                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B19 : =$D                 i       set i + 1
(1)  121/    1B19 : 00                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B1A : =$E                 i       set i + 1
(1)  121/    1B1A : 4D                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B1B : =$F                 i       set i + 1
(1)  121/    1B1B : 45                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B1C : =$10                i       set i + 1
(1)  121/    1B1C : 4D                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B1D : =$11                i       set i + 1
(1)  121/    1B1D : 4F                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B1E : =$12                i       set i + 1
(1)  121/    1B1E : 52                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B1F : =$13                i       set i + 1
(1)  121/    1B1F : 59                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B20 : =$14                i       set i + 1
(1)  121/    1B20 : 00                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B21 : =$15                i       set i + 1
(1)  121/    1B21 : 53                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B22 : =$16                i       set i + 1
(1)  121/    1B22 : 50                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B23 : =$17                i       set i + 1
(1)  121/    1B23 : 41                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B24 : =$18                i       set i + 1
(1)  121/    1B24 : 43                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B25 : =$19                i       set i + 1
(1)  121/    1B25 : 45                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 126 - 7/13/2025 17:28:33


(1)  121/    1B26 : =$1A                i       set i + 1
(1)  121/    1B26 : 00                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B27 : =$1B                i       set i + 1
(1)  121/    1B27 : 57                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B28 : =$1C                i       set i + 1
(1)  121/    1B28 : 49                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B29 : =$1D                i       set i + 1
(1)  121/    1B29 : 54                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B2A : =$1E                i       set i + 1
(1)  121/    1B2A : 48                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B2B : =$1F                i       set i + 1
(1)  121/    1B2B : 00                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B2C : =$20                i       set i + 1
(1)  121/    1B2C : 41                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B2D : =$21                i       set i + 1
(1)  121/    1B2D : 44                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B2E : =$22                i       set i + 1
(1)  121/    1B2E : 44                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B2F : =$23                i       set i + 1
(1)  121/    1B2F : 52                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B30 : =$24                i       set i + 1
(1)  121/    1B30 : 45                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B31 : =$25                i       set i + 1
(1)  121/    1B31 : 53                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B32 : =$26                i       set i + 1
(1)  121/    1B32 : 53                          dc.b    (substr("$ -> refer to memory space with address", i, 1) - $20)
(1)  121/    1B33 : =$27                i       set i + 1
(1)  121/    1B33 :                     
(1)  122/    1B33 : (MACRO)[2853]       	String112:	dfntxt "()-> refer to memory space with register"
(1)  122/    1B33 : =$0                 i       set     0
(1)  122/    1B33 :                             while i < strlen("()-> refer to memory space with register")
(1)  122/    1B33 :                             dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B33 :                     i       set i + 1
(1)  122/    1B33 :                             endm
(1)  122/    1B33 : 08                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B34 : =$1                 i       set i + 1
(1)  122/    1B34 : 09                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B35 : =$2                 i       set i + 1
(1)  122/    1B35 : 0D                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B36 : =$3                 i       set i + 1
(1)  122/    1B36 : 1E                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B37 : =$4                 i       set i + 1
(1)  122/    1B37 : 00                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B38 : =$5                 i       set i + 1
(1)  122/    1B38 : 52                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B39 : =$6                 i       set i + 1
(1)  122/    1B39 : 45                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B3A : =$7                 i       set i + 1
(1)  122/    1B3A : 46                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B3B : =$8                 i       set i + 1
(1)  122/    1B3B : 45                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B3C : =$9                 i       set i + 1
(1)  122/    1B3C : 52                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B3D : =$A                 i       set i + 1
(1)  122/    1B3D : 00                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B3E : =$B                 i       set i + 1
(1)  122/    1B3E : 54                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B3F : =$C                 i       set i + 1
(1)  122/    1B3F : 4F                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B40 : =$D                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 127 - 7/13/2025 17:28:33


(1)  122/    1B40 : 00                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B41 : =$E                 i       set i + 1
(1)  122/    1B41 : 4D                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B42 : =$F                 i       set i + 1
(1)  122/    1B42 : 45                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B43 : =$10                i       set i + 1
(1)  122/    1B43 : 4D                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B44 : =$11                i       set i + 1
(1)  122/    1B44 : 4F                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B45 : =$12                i       set i + 1
(1)  122/    1B45 : 52                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B46 : =$13                i       set i + 1
(1)  122/    1B46 : 59                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B47 : =$14                i       set i + 1
(1)  122/    1B47 : 00                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B48 : =$15                i       set i + 1
(1)  122/    1B48 : 53                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B49 : =$16                i       set i + 1
(1)  122/    1B49 : 50                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B4A : =$17                i       set i + 1
(1)  122/    1B4A : 41                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B4B : =$18                i       set i + 1
(1)  122/    1B4B : 43                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B4C : =$19                i       set i + 1
(1)  122/    1B4C : 45                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B4D : =$1A                i       set i + 1
(1)  122/    1B4D : 00                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B4E : =$1B                i       set i + 1
(1)  122/    1B4E : 57                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B4F : =$1C                i       set i + 1
(1)  122/    1B4F : 49                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B50 : =$1D                i       set i + 1
(1)  122/    1B50 : 54                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B51 : =$1E                i       set i + 1
(1)  122/    1B51 : 48                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B52 : =$1F                i       set i + 1
(1)  122/    1B52 : 00                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B53 : =$20                i       set i + 1
(1)  122/    1B53 : 52                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B54 : =$21                i       set i + 1
(1)  122/    1B54 : 45                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B55 : =$22                i       set i + 1
(1)  122/    1B55 : 47                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B56 : =$23                i       set i + 1
(1)  122/    1B56 : 49                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B57 : =$24                i       set i + 1
(1)  122/    1B57 : 53                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B58 : =$25                i       set i + 1
(1)  122/    1B58 : 54                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B59 : =$26                i       set i + 1
(1)  122/    1B59 : 45                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B5A : =$27                i       set i + 1
(1)  122/    1B5A : 52                          dc.b    (substr("()-> refer to memory space with register", i, 1) - $20)
(1)  122/    1B5B : =$28                i       set i + 1
(1)  122/    1B5B :                     
(1)  123/    1B5B : (MACRO)[2895]       	String113:	dfntxt "This CPU is a little inefficient, though"
(1)  123/    1B5B : =$0                 i       set     0
(1)  123/    1B5B :                             while i < strlen("This CPU is a little inefficient, though")
(1)  123/    1B5B :                             dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B5B :                     i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 128 - 7/13/2025 17:28:33


(1)  123/    1B5B :                             endm
(1)  123/    1B5B : 34                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B5C : =$1                 i       set i + 1
(1)  123/    1B5C : 48                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B5D : =$2                 i       set i + 1
(1)  123/    1B5D : 49                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B5E : =$3                 i       set i + 1
(1)  123/    1B5E : 53                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B5F : =$4                 i       set i + 1
(1)  123/    1B5F : 00                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B60 : =$5                 i       set i + 1
(1)  123/    1B60 : 23                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B61 : =$6                 i       set i + 1
(1)  123/    1B61 : 30                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B62 : =$7                 i       set i + 1
(1)  123/    1B62 : 35                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B63 : =$8                 i       set i + 1
(1)  123/    1B63 : 00                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B64 : =$9                 i       set i + 1
(1)  123/    1B64 : 49                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B65 : =$A                 i       set i + 1
(1)  123/    1B65 : 53                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B66 : =$B                 i       set i + 1
(1)  123/    1B66 : 00                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B67 : =$C                 i       set i + 1
(1)  123/    1B67 : 41                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B68 : =$D                 i       set i + 1
(1)  123/    1B68 : 00                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B69 : =$E                 i       set i + 1
(1)  123/    1B69 : 4C                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B6A : =$F                 i       set i + 1
(1)  123/    1B6A : 49                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B6B : =$10                i       set i + 1
(1)  123/    1B6B : 54                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B6C : =$11                i       set i + 1
(1)  123/    1B6C : 54                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B6D : =$12                i       set i + 1
(1)  123/    1B6D : 4C                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B6E : =$13                i       set i + 1
(1)  123/    1B6E : 45                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B6F : =$14                i       set i + 1
(1)  123/    1B6F : 00                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B70 : =$15                i       set i + 1
(1)  123/    1B70 : 49                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B71 : =$16                i       set i + 1
(1)  123/    1B71 : 4E                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B72 : =$17                i       set i + 1
(1)  123/    1B72 : 45                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B73 : =$18                i       set i + 1
(1)  123/    1B73 : 46                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B74 : =$19                i       set i + 1
(1)  123/    1B74 : 46                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B75 : =$1A                i       set i + 1
(1)  123/    1B75 : 49                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B76 : =$1B                i       set i + 1
(1)  123/    1B76 : 43                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B77 : =$1C                i       set i + 1
(1)  123/    1B77 : 49                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B78 : =$1D                i       set i + 1
(1)  123/    1B78 : 45                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 129 - 7/13/2025 17:28:33


(1)  123/    1B79 : =$1E                i       set i + 1
(1)  123/    1B79 : 4E                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B7A : =$1F                i       set i + 1
(1)  123/    1B7A : 54                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B7B : =$20                i       set i + 1
(1)  123/    1B7B : 0C                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B7C : =$21                i       set i + 1
(1)  123/    1B7C : 00                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B7D : =$22                i       set i + 1
(1)  123/    1B7D : 54                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B7E : =$23                i       set i + 1
(1)  123/    1B7E : 48                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B7F : =$24                i       set i + 1
(1)  123/    1B7F : 4F                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B80 : =$25                i       set i + 1
(1)  123/    1B80 : 55                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B81 : =$26                i       set i + 1
(1)  123/    1B81 : 47                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B82 : =$27                i       set i + 1
(1)  123/    1B82 : 48                          dc.b    (substr("This CPU is a little inefficient, though", i, 1) - $20)
(1)  123/    1B83 : =$28                i       set i + 1
(1)  123/    1B83 :                     
(1)  124/    1B83 : (MACRO)[2937]       	String114:	dfntxt "move.l d0,d1"
(1)  124/    1B83 : =$0                 i       set     0
(1)  124/    1B83 :                             while i < strlen("move.l d0,d1")
(1)  124/    1B83 :                             dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B83 :                     i       set i + 1
(1)  124/    1B83 :                             endm
(1)  124/    1B83 : 4D                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B84 : =$1                 i       set i + 1
(1)  124/    1B84 : 4F                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B85 : =$2                 i       set i + 1
(1)  124/    1B85 : 56                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B86 : =$3                 i       set i + 1
(1)  124/    1B86 : 45                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B87 : =$4                 i       set i + 1
(1)  124/    1B87 : 0E                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B88 : =$5                 i       set i + 1
(1)  124/    1B88 : 4C                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B89 : =$6                 i       set i + 1
(1)  124/    1B89 : 00                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B8A : =$7                 i       set i + 1
(1)  124/    1B8A : 44                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B8B : =$8                 i       set i + 1
(1)  124/    1B8B : 10                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B8C : =$9                 i       set i + 1
(1)  124/    1B8C : 0C                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B8D : =$A                 i       set i + 1
(1)  124/    1B8D : 44                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B8E : =$B                 i       set i + 1
(1)  124/    1B8E : 11                          dc.b    (substr("move.l d0,d1", i, 1) - $20)
(1)  124/    1B8F : =$C                 i       set i + 1
(1)  124/    1B8F :                     
(1)  125/    1B8F : (MACRO)[2951]       	String115:	dfntxt "-> 4 cycles"
(1)  125/    1B8F : =$0                 i       set     0
(1)  125/    1B8F :                             while i < strlen("-> 4 cycles")
(1)  125/    1B8F :                             dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B8F :                     i       set i + 1
(1)  125/    1B8F :                             endm
(1)  125/    1B8F : 0D                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 130 - 7/13/2025 17:28:33


(1)  125/    1B90 : =$1                 i       set i + 1
(1)  125/    1B90 : 1E                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B91 : =$2                 i       set i + 1
(1)  125/    1B91 : 00                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B92 : =$3                 i       set i + 1
(1)  125/    1B92 : 14                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B93 : =$4                 i       set i + 1
(1)  125/    1B93 : 00                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B94 : =$5                 i       set i + 1
(1)  125/    1B94 : 43                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B95 : =$6                 i       set i + 1
(1)  125/    1B95 : 59                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B96 : =$7                 i       set i + 1
(1)  125/    1B96 : 43                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B97 : =$8                 i       set i + 1
(1)  125/    1B97 : 4C                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B98 : =$9                 i       set i + 1
(1)  125/    1B98 : 45                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B99 : =$A                 i       set i + 1
(1)  125/    1B99 : 53                          dc.b    (substr("-> 4 cycles", i, 1) - $20)
(1)  125/    1B9A : =$B                 i       set i + 1
(1)  125/    1B9A :                     
(1)  126/    1B9A : (MACRO)[2964]       	String116:	dfntxt "move.l #12345678,d0"
(1)  126/    1B9A : =$0                 i       set     0
(1)  126/    1B9A :                             while i < strlen("move.l #12345678,d0")
(1)  126/    1B9A :                             dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1B9A :                     i       set i + 1
(1)  126/    1B9A :                             endm
(1)  126/    1B9A : 4D                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1B9B : =$1                 i       set i + 1
(1)  126/    1B9B : 4F                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1B9C : =$2                 i       set i + 1
(1)  126/    1B9C : 56                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1B9D : =$3                 i       set i + 1
(1)  126/    1B9D : 45                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1B9E : =$4                 i       set i + 1
(1)  126/    1B9E : 0E                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1B9F : =$5                 i       set i + 1
(1)  126/    1B9F : 4C                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BA0 : =$6                 i       set i + 1
(1)  126/    1BA0 : 00                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BA1 : =$7                 i       set i + 1
(1)  126/    1BA1 : 03                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BA2 : =$8                 i       set i + 1
(1)  126/    1BA2 : 11                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BA3 : =$9                 i       set i + 1
(1)  126/    1BA3 : 12                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BA4 : =$A                 i       set i + 1
(1)  126/    1BA4 : 13                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BA5 : =$B                 i       set i + 1
(1)  126/    1BA5 : 14                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BA6 : =$C                 i       set i + 1
(1)  126/    1BA6 : 15                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BA7 : =$D                 i       set i + 1
(1)  126/    1BA7 : 16                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BA8 : =$E                 i       set i + 1
(1)  126/    1BA8 : 17                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BA9 : =$F                 i       set i + 1
(1)  126/    1BA9 : 18                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BAA : =$10                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 131 - 7/13/2025 17:28:33


(1)  126/    1BAA : 0C                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BAB : =$11                i       set i + 1
(1)  126/    1BAB : 44                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BAC : =$12                i       set i + 1
(1)  126/    1BAC : 10                          dc.b    (substr("move.l #12345678,d0", i, 1) - $20)
(1)  126/    1BAD : =$13                i       set i + 1
(1)  126/    1BAD :                     
(1)  127/    1BAD : (MACRO)[2985]       	String117:	dfntxt "-> 12 cycles!"
(1)  127/    1BAD : =$0                 i       set     0
(1)  127/    1BAD :                             while i < strlen("-> 12 cycles!")
(1)  127/    1BAD :                             dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BAD :                     i       set i + 1
(1)  127/    1BAD :                             endm
(1)  127/    1BAD : 0D                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BAE : =$1                 i       set i + 1
(1)  127/    1BAE : 1E                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BAF : =$2                 i       set i + 1
(1)  127/    1BAF : 00                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BB0 : =$3                 i       set i + 1
(1)  127/    1BB0 : 11                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BB1 : =$4                 i       set i + 1
(1)  127/    1BB1 : 12                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BB2 : =$5                 i       set i + 1
(1)  127/    1BB2 : 00                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BB3 : =$6                 i       set i + 1
(1)  127/    1BB3 : 43                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BB4 : =$7                 i       set i + 1
(1)  127/    1BB4 : 59                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BB5 : =$8                 i       set i + 1
(1)  127/    1BB5 : 43                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BB6 : =$9                 i       set i + 1
(1)  127/    1BB6 : 4C                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BB7 : =$A                 i       set i + 1
(1)  127/    1BB7 : 45                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BB8 : =$B                 i       set i + 1
(1)  127/    1BB8 : 53                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BB9 : =$C                 i       set i + 1
(1)  127/    1BB9 : 01                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  127/    1BBA : =$D                 i       set i + 1
(1)  127/    1BBA :                     
(1)  128/    1BBA : (MACRO)[3000]       	String118:	dfntxt "move.l d0,(a0)"
(1)  128/    1BBA : =$0                 i       set     0
(1)  128/    1BBA :                             while i < strlen("move.l d0,(a0)")
(1)  128/    1BBA :                             dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BBA :                     i       set i + 1
(1)  128/    1BBA :                             endm
(1)  128/    1BBA : 4D                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BBB : =$1                 i       set i + 1
(1)  128/    1BBB : 4F                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BBC : =$2                 i       set i + 1
(1)  128/    1BBC : 56                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BBD : =$3                 i       set i + 1
(1)  128/    1BBD : 45                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BBE : =$4                 i       set i + 1
(1)  128/    1BBE : 0E                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BBF : =$5                 i       set i + 1
(1)  128/    1BBF : 4C                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BC0 : =$6                 i       set i + 1
(1)  128/    1BC0 : 00                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BC1 : =$7                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 132 - 7/13/2025 17:28:33


(1)  128/    1BC1 : 44                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BC2 : =$8                 i       set i + 1
(1)  128/    1BC2 : 10                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BC3 : =$9                 i       set i + 1
(1)  128/    1BC3 : 0C                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BC4 : =$A                 i       set i + 1
(1)  128/    1BC4 : 08                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BC5 : =$B                 i       set i + 1
(1)  128/    1BC5 : 41                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BC6 : =$C                 i       set i + 1
(1)  128/    1BC6 : 10                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BC7 : =$D                 i       set i + 1
(1)  128/    1BC7 : 09                          dc.b    (substr("move.l d0,(a0)", i, 1) - $20)
(1)  128/    1BC8 : =$E                 i       set i + 1
(1)  128/    1BC8 :                     
(1)  129/    1BC8 : (MACRO)[3016]       	String119:	dfntxt "-> 12 cycles!"
(1)  129/    1BC8 : =$0                 i       set     0
(1)  129/    1BC8 :                             while i < strlen("-> 12 cycles!")
(1)  129/    1BC8 :                             dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BC8 :                     i       set i + 1
(1)  129/    1BC8 :                             endm
(1)  129/    1BC8 : 0D                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BC9 : =$1                 i       set i + 1
(1)  129/    1BC9 : 1E                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BCA : =$2                 i       set i + 1
(1)  129/    1BCA : 00                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BCB : =$3                 i       set i + 1
(1)  129/    1BCB : 11                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BCC : =$4                 i       set i + 1
(1)  129/    1BCC : 12                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BCD : =$5                 i       set i + 1
(1)  129/    1BCD : 00                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BCE : =$6                 i       set i + 1
(1)  129/    1BCE : 43                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BCF : =$7                 i       set i + 1
(1)  129/    1BCF : 59                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BD0 : =$8                 i       set i + 1
(1)  129/    1BD0 : 43                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BD1 : =$9                 i       set i + 1
(1)  129/    1BD1 : 4C                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BD2 : =$A                 i       set i + 1
(1)  129/    1BD2 : 45                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BD3 : =$B                 i       set i + 1
(1)  129/    1BD3 : 53                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BD4 : =$C                 i       set i + 1
(1)  129/    1BD4 : 01                          dc.b    (substr("-> 12 cycles!", i, 1) - $20)
(1)  129/    1BD5 : =$D                 i       set i + 1
(1)  129/    1BD5 :                     
(1)  130/    1BD5 : (MACRO)[3031]       	String120:	dfntxt "move.l d0,$xxxx"
(1)  130/    1BD5 : =$0                 i       set     0
(1)  130/    1BD5 :                             while i < strlen("move.l d0,$xxxx")
(1)  130/    1BD5 :                             dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BD5 :                     i       set i + 1
(1)  130/    1BD5 :                             endm
(1)  130/    1BD5 : 4D                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BD6 : =$1                 i       set i + 1
(1)  130/    1BD6 : 4F                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BD7 : =$2                 i       set i + 1
(1)  130/    1BD7 : 56                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BD8 : =$3                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 133 - 7/13/2025 17:28:33


(1)  130/    1BD8 : 45                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BD9 : =$4                 i       set i + 1
(1)  130/    1BD9 : 0E                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BDA : =$5                 i       set i + 1
(1)  130/    1BDA : 4C                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BDB : =$6                 i       set i + 1
(1)  130/    1BDB : 00                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BDC : =$7                 i       set i + 1
(1)  130/    1BDC : 44                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BDD : =$8                 i       set i + 1
(1)  130/    1BDD : 10                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BDE : =$9                 i       set i + 1
(1)  130/    1BDE : 0C                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BDF : =$A                 i       set i + 1
(1)  130/    1BDF : 04                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BE0 : =$B                 i       set i + 1
(1)  130/    1BE0 : 58                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BE1 : =$C                 i       set i + 1
(1)  130/    1BE1 : 58                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BE2 : =$D                 i       set i + 1
(1)  130/    1BE2 : 58                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BE3 : =$E                 i       set i + 1
(1)  130/    1BE3 : 58                          dc.b    (substr("move.l d0,$xxxx", i, 1) - $20)
(1)  130/    1BE4 : =$F                 i       set i + 1
(1)  130/    1BE4 :                     
(1)  131/    1BE4 : (MACRO)[3048]       	String121:	dfntxt "-> 16 cycles!"
(1)  131/    1BE4 : =$0                 i       set     0
(1)  131/    1BE4 :                             while i < strlen("-> 16 cycles!")
(1)  131/    1BE4 :                             dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BE4 :                     i       set i + 1
(1)  131/    1BE4 :                             endm
(1)  131/    1BE4 : 0D                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BE5 : =$1                 i       set i + 1
(1)  131/    1BE5 : 1E                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BE6 : =$2                 i       set i + 1
(1)  131/    1BE6 : 00                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BE7 : =$3                 i       set i + 1
(1)  131/    1BE7 : 11                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BE8 : =$4                 i       set i + 1
(1)  131/    1BE8 : 16                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BE9 : =$5                 i       set i + 1
(1)  131/    1BE9 : 00                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BEA : =$6                 i       set i + 1
(1)  131/    1BEA : 43                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BEB : =$7                 i       set i + 1
(1)  131/    1BEB : 59                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BEC : =$8                 i       set i + 1
(1)  131/    1BEC : 43                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BED : =$9                 i       set i + 1
(1)  131/    1BED : 4C                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BEE : =$A                 i       set i + 1
(1)  131/    1BEE : 45                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BEF : =$B                 i       set i + 1
(1)  131/    1BEF : 53                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BF0 : =$C                 i       set i + 1
(1)  131/    1BF0 : 01                          dc.b    (substr("-> 16 cycles!", i, 1) - $20)
(1)  131/    1BF1 : =$D                 i       set i + 1
(1)  131/    1BF1 :                     
(1)  132/    1BF1 : (MACRO)[3063]       	String122:	dfntxt "move.l $xxxx,$xxxx"
(1)  132/    1BF1 : =$0                 i       set     0
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 134 - 7/13/2025 17:28:33


(1)  132/    1BF1 :                             while i < strlen("move.l $xxxx,$xxxx")
(1)  132/    1BF1 :                             dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BF1 :                     i       set i + 1
(1)  132/    1BF1 :                             endm
(1)  132/    1BF1 : 4D                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BF2 : =$1                 i       set i + 1
(1)  132/    1BF2 : 4F                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BF3 : =$2                 i       set i + 1
(1)  132/    1BF3 : 56                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BF4 : =$3                 i       set i + 1
(1)  132/    1BF4 : 45                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BF5 : =$4                 i       set i + 1
(1)  132/    1BF5 : 0E                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BF6 : =$5                 i       set i + 1
(1)  132/    1BF6 : 4C                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BF7 : =$6                 i       set i + 1
(1)  132/    1BF7 : 00                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BF8 : =$7                 i       set i + 1
(1)  132/    1BF8 : 04                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BF9 : =$8                 i       set i + 1
(1)  132/    1BF9 : 58                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BFA : =$9                 i       set i + 1
(1)  132/    1BFA : 58                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BFB : =$A                 i       set i + 1
(1)  132/    1BFB : 58                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BFC : =$B                 i       set i + 1
(1)  132/    1BFC : 58                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BFD : =$C                 i       set i + 1
(1)  132/    1BFD : 0C                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BFE : =$D                 i       set i + 1
(1)  132/    1BFE : 04                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1BFF : =$E                 i       set i + 1
(1)  132/    1BFF : 58                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1C00 : =$F                 i       set i + 1
(1)  132/    1C00 : 58                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1C01 : =$10                i       set i + 1
(1)  132/    1C01 : 58                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1C02 : =$11                i       set i + 1
(1)  132/    1C02 : 58                          dc.b    (substr("move.l $xxxx,$xxxx", i, 1) - $20)
(1)  132/    1C03 : =$12                i       set i + 1
(1)  132/    1C03 :                     
(1)  133/    1C03 : (MACRO)[3083]       	String123:	dfntxt "-> 28 cycles!!"
(1)  133/    1C03 : =$0                 i       set     0
(1)  133/    1C03 :                             while i < strlen("-> 28 cycles!!")
(1)  133/    1C03 :                             dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C03 :                     i       set i + 1
(1)  133/    1C03 :                             endm
(1)  133/    1C03 : 0D                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C04 : =$1                 i       set i + 1
(1)  133/    1C04 : 1E                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C05 : =$2                 i       set i + 1
(1)  133/    1C05 : 00                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C06 : =$3                 i       set i + 1
(1)  133/    1C06 : 12                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C07 : =$4                 i       set i + 1
(1)  133/    1C07 : 18                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C08 : =$5                 i       set i + 1
(1)  133/    1C08 : 00                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C09 : =$6                 i       set i + 1
(1)  133/    1C09 : 43                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 135 - 7/13/2025 17:28:33


(1)  133/    1C0A : =$7                 i       set i + 1
(1)  133/    1C0A : 59                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C0B : =$8                 i       set i + 1
(1)  133/    1C0B : 43                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C0C : =$9                 i       set i + 1
(1)  133/    1C0C : 4C                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C0D : =$A                 i       set i + 1
(1)  133/    1C0D : 45                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C0E : =$B                 i       set i + 1
(1)  133/    1C0E : 53                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C0F : =$C                 i       set i + 1
(1)  133/    1C0F : 01                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C10 : =$D                 i       set i + 1
(1)  133/    1C10 : 01                          dc.b    (substr("-> 28 cycles!!", i, 1) - $20)
(1)  133/    1C11 : =$E                 i       set i + 1
(1)  133/    1C11 :                     
(1)  134/    1C11 : (MACRO)[3099]       	String124:	dfntxt "and for the worst case scenario..."
(1)  134/    1C11 : =$0                 i       set     0
(1)  134/    1C11 :                             while i < strlen("and for the worst case scenario...")
(1)  134/    1C11 :                             dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C11 :                     i       set i + 1
(1)  134/    1C11 :                             endm
(1)  134/    1C11 : 41                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C12 : =$1                 i       set i + 1
(1)  134/    1C12 : 4E                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C13 : =$2                 i       set i + 1
(1)  134/    1C13 : 44                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C14 : =$3                 i       set i + 1
(1)  134/    1C14 : 00                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C15 : =$4                 i       set i + 1
(1)  134/    1C15 : 46                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C16 : =$5                 i       set i + 1
(1)  134/    1C16 : 4F                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C17 : =$6                 i       set i + 1
(1)  134/    1C17 : 52                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C18 : =$7                 i       set i + 1
(1)  134/    1C18 : 00                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C19 : =$8                 i       set i + 1
(1)  134/    1C19 : 54                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C1A : =$9                 i       set i + 1
(1)  134/    1C1A : 48                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C1B : =$A                 i       set i + 1
(1)  134/    1C1B : 45                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C1C : =$B                 i       set i + 1
(1)  134/    1C1C : 00                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C1D : =$C                 i       set i + 1
(1)  134/    1C1D : 57                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C1E : =$D                 i       set i + 1
(1)  134/    1C1E : 4F                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C1F : =$E                 i       set i + 1
(1)  134/    1C1F : 52                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C20 : =$F                 i       set i + 1
(1)  134/    1C20 : 53                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C21 : =$10                i       set i + 1
(1)  134/    1C21 : 54                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C22 : =$11                i       set i + 1
(1)  134/    1C22 : 00                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C23 : =$12                i       set i + 1
(1)  134/    1C23 : 43                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C24 : =$13                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 136 - 7/13/2025 17:28:33


(1)  134/    1C24 : 41                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C25 : =$14                i       set i + 1
(1)  134/    1C25 : 53                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C26 : =$15                i       set i + 1
(1)  134/    1C26 : 45                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C27 : =$16                i       set i + 1
(1)  134/    1C27 : 00                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C28 : =$17                i       set i + 1
(1)  134/    1C28 : 53                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C29 : =$18                i       set i + 1
(1)  134/    1C29 : 43                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C2A : =$19                i       set i + 1
(1)  134/    1C2A : 45                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C2B : =$1A                i       set i + 1
(1)  134/    1C2B : 4E                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C2C : =$1B                i       set i + 1
(1)  134/    1C2C : 41                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C2D : =$1C                i       set i + 1
(1)  134/    1C2D : 52                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C2E : =$1D                i       set i + 1
(1)  134/    1C2E : 49                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C2F : =$1E                i       set i + 1
(1)  134/    1C2F : 4F                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C30 : =$1F                i       set i + 1
(1)  134/    1C30 : 0E                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C31 : =$20                i       set i + 1
(1)  134/    1C31 : 0E                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C32 : =$21                i       set i + 1
(1)  134/    1C32 : 0E                          dc.b    (substr("and for the worst case scenario...", i, 1) - $20)
(1)  134/    1C33 : =$22                i       set i + 1
(1)  134/    1C33 :                     
(1)  135/    1C33 : (MACRO)[3135]       	String125:	dfntxt "divs.w $xxxx,d0"
(1)  135/    1C33 : =$0                 i       set     0
(1)  135/    1C33 :                             while i < strlen("divs.w $xxxx,d0")
(1)  135/    1C33 :                             dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C33 :                     i       set i + 1
(1)  135/    1C33 :                             endm
(1)  135/    1C33 : 44                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C34 : =$1                 i       set i + 1
(1)  135/    1C34 : 49                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C35 : =$2                 i       set i + 1
(1)  135/    1C35 : 56                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C36 : =$3                 i       set i + 1
(1)  135/    1C36 : 53                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C37 : =$4                 i       set i + 1
(1)  135/    1C37 : 0E                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C38 : =$5                 i       set i + 1
(1)  135/    1C38 : 57                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C39 : =$6                 i       set i + 1
(1)  135/    1C39 : 00                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C3A : =$7                 i       set i + 1
(1)  135/    1C3A : 04                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C3B : =$8                 i       set i + 1
(1)  135/    1C3B : 58                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C3C : =$9                 i       set i + 1
(1)  135/    1C3C : 58                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C3D : =$A                 i       set i + 1
(1)  135/    1C3D : 58                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C3E : =$B                 i       set i + 1
(1)  135/    1C3E : 58                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 137 - 7/13/2025 17:28:33


(1)  135/    1C3F : =$C                 i       set i + 1
(1)  135/    1C3F : 0C                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C40 : =$D                 i       set i + 1
(1)  135/    1C40 : 44                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C41 : =$E                 i       set i + 1
(1)  135/    1C41 : 10                          dc.b    (substr("divs.w $xxxx,d0", i, 1) - $20)
(1)  135/    1C42 : =$F                 i       set i + 1
(1)  135/    1C42 :                     
(1)  136/    1C42 : (MACRO)[3152]       	String126:	dfntxt "-> 160 CYCLES!!!"
(1)  136/    1C42 : =$0                 i       set     0
(1)  136/    1C42 :                             while i < strlen("-> 160 CYCLES!!!")
(1)  136/    1C42 :                             dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C42 :                     i       set i + 1
(1)  136/    1C42 :                             endm
(1)  136/    1C42 : 0D                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C43 : =$1                 i       set i + 1
(1)  136/    1C43 : 1E                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C44 : =$2                 i       set i + 1
(1)  136/    1C44 : 00                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C45 : =$3                 i       set i + 1
(1)  136/    1C45 : 11                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C46 : =$4                 i       set i + 1
(1)  136/    1C46 : 16                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C47 : =$5                 i       set i + 1
(1)  136/    1C47 : 10                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C48 : =$6                 i       set i + 1
(1)  136/    1C48 : 00                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C49 : =$7                 i       set i + 1
(1)  136/    1C49 : 23                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C4A : =$8                 i       set i + 1
(1)  136/    1C4A : 39                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C4B : =$9                 i       set i + 1
(1)  136/    1C4B : 23                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C4C : =$A                 i       set i + 1
(1)  136/    1C4C : 2C                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C4D : =$B                 i       set i + 1
(1)  136/    1C4D : 25                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C4E : =$C                 i       set i + 1
(1)  136/    1C4E : 33                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C4F : =$D                 i       set i + 1
(1)  136/    1C4F : 01                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C50 : =$E                 i       set i + 1
(1)  136/    1C50 : 01                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C51 : =$F                 i       set i + 1
(1)  136/    1C51 : 01                          dc.b    (substr("-> 160 CYCLES!!!", i, 1) - $20)
(1)  136/    1C52 : =$10                i       set i + 1
(1)  136/    1C52 :                     
(1)  137/    1C52 :                     
(1)  138/    1C52 : (MACRO)[3170]       	String127:	dfntxt "And now,"
(1)  138/    1C52 : =$0                 i       set     0
(1)  138/    1C52 :                             while i < strlen("And now,")
(1)  138/    1C52 :                             dc.b    (substr("And now,", i, 1) - $20)
(1)  138/    1C52 :                     i       set i + 1
(1)  138/    1C52 :                             endm
(1)  138/    1C52 : 21                          dc.b    (substr("And now,", i, 1) - $20)
(1)  138/    1C53 : =$1                 i       set i + 1
(1)  138/    1C53 : 4E                          dc.b    (substr("And now,", i, 1) - $20)
(1)  138/    1C54 : =$2                 i       set i + 1
(1)  138/    1C54 : 44                          dc.b    (substr("And now,", i, 1) - $20)
(1)  138/    1C55 : =$3                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 138 - 7/13/2025 17:28:33


(1)  138/    1C55 : 00                          dc.b    (substr("And now,", i, 1) - $20)
(1)  138/    1C56 : =$4                 i       set i + 1
(1)  138/    1C56 : 4E                          dc.b    (substr("And now,", i, 1) - $20)
(1)  138/    1C57 : =$5                 i       set i + 1
(1)  138/    1C57 : 4F                          dc.b    (substr("And now,", i, 1) - $20)
(1)  138/    1C58 : =$6                 i       set i + 1
(1)  138/    1C58 : 57                          dc.b    (substr("And now,", i, 1) - $20)
(1)  138/    1C59 : =$7                 i       set i + 1
(1)  138/    1C59 : 0C                          dc.b    (substr("And now,", i, 1) - $20)
(1)  138/    1C5A : =$8                 i       set i + 1
(1)  138/    1C5A :                     
(1)  139/    1C5A : (MACRO)[3180]       	String128:	dfntxt "let's do some practice!"
(1)  139/    1C5A : =$0                 i       set     0
(1)  139/    1C5A :                             while i < strlen("let's do some practice!")
(1)  139/    1C5A :                             dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C5A :                     i       set i + 1
(1)  139/    1C5A :                             endm
(1)  139/    1C5A : 4C                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C5B : =$1                 i       set i + 1
(1)  139/    1C5B : 45                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C5C : =$2                 i       set i + 1
(1)  139/    1C5C : 54                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C5D : =$3                 i       set i + 1
(1)  139/    1C5D : 07                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C5E : =$4                 i       set i + 1
(1)  139/    1C5E : 53                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C5F : =$5                 i       set i + 1
(1)  139/    1C5F : 00                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C60 : =$6                 i       set i + 1
(1)  139/    1C60 : 44                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C61 : =$7                 i       set i + 1
(1)  139/    1C61 : 4F                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C62 : =$8                 i       set i + 1
(1)  139/    1C62 : 00                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C63 : =$9                 i       set i + 1
(1)  139/    1C63 : 53                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C64 : =$A                 i       set i + 1
(1)  139/    1C64 : 4F                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C65 : =$B                 i       set i + 1
(1)  139/    1C65 : 4D                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C66 : =$C                 i       set i + 1
(1)  139/    1C66 : 45                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C67 : =$D                 i       set i + 1
(1)  139/    1C67 : 00                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C68 : =$E                 i       set i + 1
(1)  139/    1C68 : 50                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C69 : =$F                 i       set i + 1
(1)  139/    1C69 : 52                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C6A : =$10                i       set i + 1
(1)  139/    1C6A : 41                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C6B : =$11                i       set i + 1
(1)  139/    1C6B : 43                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C6C : =$12                i       set i + 1
(1)  139/    1C6C : 54                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C6D : =$13                i       set i + 1
(1)  139/    1C6D : 49                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C6E : =$14                i       set i + 1
(1)  139/    1C6E : 43                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C6F : =$15                i       set i + 1
(1)  139/    1C6F : 45                          dc.b    (substr("let's do some practice!", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 139 - 7/13/2025 17:28:33


(1)  139/    1C70 : =$16                i       set i + 1
(1)  139/    1C70 : 01                          dc.b    (substr("let's do some practice!", i, 1) - $20)
(1)  139/    1C71 : =$17                i       set i + 1
(1)  139/    1C71 :                     
(1)  140/    1C71 :                     
(1)  141/    1C71 : (MACRO)[3205]       	String129:	dfntxt "Thank You!"
(1)  141/    1C71 : =$0                 i       set     0
(1)  141/    1C71 :                             while i < strlen("Thank You!")
(1)  141/    1C71 :                             dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C71 :                     i       set i + 1
(1)  141/    1C71 :                             endm
(1)  141/    1C71 : 34                          dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C72 : =$1                 i       set i + 1
(1)  141/    1C72 : 48                          dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C73 : =$2                 i       set i + 1
(1)  141/    1C73 : 41                          dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C74 : =$3                 i       set i + 1
(1)  141/    1C74 : 4E                          dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C75 : =$4                 i       set i + 1
(1)  141/    1C75 : 4B                          dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C76 : =$5                 i       set i + 1
(1)  141/    1C76 : 00                          dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C77 : =$6                 i       set i + 1
(1)  141/    1C77 : 39                          dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C78 : =$7                 i       set i + 1
(1)  141/    1C78 : 4F                          dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C79 : =$8                 i       set i + 1
(1)  141/    1C79 : 55                          dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C7A : =$9                 i       set i + 1
(1)  141/    1C7A : 01                          dc.b    (substr("Thank You!", i, 1) - $20)
(1)  141/    1C7B : =$A                 i       set i + 1
(1)  141/    1C7B :                     
(1)  142/    1C7B :                     ;==========================================================
(1)  143/    1C7B : (MACRO)[3217]       	Message0:	dfntxt "Unfortunately, the Sega Mega Drive"
(1)  143/    1C7B : =$0                 i       set     0
(1)  143/    1C7B :                             while i < strlen("Unfortunately, the Sega Mega Drive")
(1)  143/    1C7B :                             dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C7B :                     i       set i + 1
(1)  143/    1C7B :                             endm
(1)  143/    1C7B : 35                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C7C : =$1                 i       set i + 1
(1)  143/    1C7C : 4E                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C7D : =$2                 i       set i + 1
(1)  143/    1C7D : 46                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C7E : =$3                 i       set i + 1
(1)  143/    1C7E : 4F                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C7F : =$4                 i       set i + 1
(1)  143/    1C7F : 52                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C80 : =$5                 i       set i + 1
(1)  143/    1C80 : 54                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C81 : =$6                 i       set i + 1
(1)  143/    1C81 : 55                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C82 : =$7                 i       set i + 1
(1)  143/    1C82 : 4E                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C83 : =$8                 i       set i + 1
(1)  143/    1C83 : 41                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C84 : =$9                 i       set i + 1
(1)  143/    1C84 : 54                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C85 : =$A                 i       set i + 1
(1)  143/    1C85 : 45                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 140 - 7/13/2025 17:28:33


(1)  143/    1C86 : =$B                 i       set i + 1
(1)  143/    1C86 : 4C                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C87 : =$C                 i       set i + 1
(1)  143/    1C87 : 59                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C88 : =$D                 i       set i + 1
(1)  143/    1C88 : 0C                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C89 : =$E                 i       set i + 1
(1)  143/    1C89 : 00                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C8A : =$F                 i       set i + 1
(1)  143/    1C8A : 54                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C8B : =$10                i       set i + 1
(1)  143/    1C8B : 48                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C8C : =$11                i       set i + 1
(1)  143/    1C8C : 45                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C8D : =$12                i       set i + 1
(1)  143/    1C8D : 00                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C8E : =$13                i       set i + 1
(1)  143/    1C8E : 33                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C8F : =$14                i       set i + 1
(1)  143/    1C8F : 45                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C90 : =$15                i       set i + 1
(1)  143/    1C90 : 47                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C91 : =$16                i       set i + 1
(1)  143/    1C91 : 41                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C92 : =$17                i       set i + 1
(1)  143/    1C92 : 00                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C93 : =$18                i       set i + 1
(1)  143/    1C93 : 2D                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C94 : =$19                i       set i + 1
(1)  143/    1C94 : 45                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C95 : =$1A                i       set i + 1
(1)  143/    1C95 : 47                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C96 : =$1B                i       set i + 1
(1)  143/    1C96 : 41                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C97 : =$1C                i       set i + 1
(1)  143/    1C97 : 00                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C98 : =$1D                i       set i + 1
(1)  143/    1C98 : 24                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C99 : =$1E                i       set i + 1
(1)  143/    1C99 : 52                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C9A : =$1F                i       set i + 1
(1)  143/    1C9A : 49                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C9B : =$20                i       set i + 1
(1)  143/    1C9B : 56                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C9C : =$21                i       set i + 1
(1)  143/    1C9C : 45                          dc.b    (substr("Unfortunately, the Sega Mega Drive", i, 1) - $20)
(1)  143/    1C9D : =$22                i       set i + 1
(1)  143/    1C9D :                     
(1)  144/    1C9D : (MACRO)[3253]       	Message1:	dfntxt "has crashed! I'm sorry :("
(1)  144/    1C9D : =$0                 i       set     0
(1)  144/    1C9D :                             while i < strlen("has crashed! I'm sorry :(")
(1)  144/    1C9D :                             dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1C9D :                     i       set i + 1
(1)  144/    1C9D :                             endm
(1)  144/    1C9D : 48                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1C9E : =$1                 i       set i + 1
(1)  144/    1C9E : 41                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1C9F : =$2                 i       set i + 1
(1)  144/    1C9F : 53                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CA0 : =$3                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 141 - 7/13/2025 17:28:33


(1)  144/    1CA0 : 00                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CA1 : =$4                 i       set i + 1
(1)  144/    1CA1 : 43                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CA2 : =$5                 i       set i + 1
(1)  144/    1CA2 : 52                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CA3 : =$6                 i       set i + 1
(1)  144/    1CA3 : 41                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CA4 : =$7                 i       set i + 1
(1)  144/    1CA4 : 53                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CA5 : =$8                 i       set i + 1
(1)  144/    1CA5 : 48                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CA6 : =$9                 i       set i + 1
(1)  144/    1CA6 : 45                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CA7 : =$A                 i       set i + 1
(1)  144/    1CA7 : 44                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CA8 : =$B                 i       set i + 1
(1)  144/    1CA8 : 01                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CA9 : =$C                 i       set i + 1
(1)  144/    1CA9 : 00                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CAA : =$D                 i       set i + 1
(1)  144/    1CAA : 29                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CAB : =$E                 i       set i + 1
(1)  144/    1CAB : 07                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CAC : =$F                 i       set i + 1
(1)  144/    1CAC : 4D                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CAD : =$10                i       set i + 1
(1)  144/    1CAD : 00                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CAE : =$11                i       set i + 1
(1)  144/    1CAE : 53                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CAF : =$12                i       set i + 1
(1)  144/    1CAF : 4F                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CB0 : =$13                i       set i + 1
(1)  144/    1CB0 : 52                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CB1 : =$14                i       set i + 1
(1)  144/    1CB1 : 52                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CB2 : =$15                i       set i + 1
(1)  144/    1CB2 : 59                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CB3 : =$16                i       set i + 1
(1)  144/    1CB3 : 00                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CB4 : =$17                i       set i + 1
(1)  144/    1CB4 : 1A                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CB5 : =$18                i       set i + 1
(1)  144/    1CB5 : 08                          dc.b    (substr("has crashed! I'm sorry :(", i, 1) - $20)
(1)  144/    1CB6 : =$19                i       set i + 1
(1)  144/    1CB6 :                     
(1)  145/    1CB6 : (MACRO)[3280]       	Message2:	dfntxt "If you want to know more,"
(1)  145/    1CB6 : =$0                 i       set     0
(1)  145/    1CB6 :                             while i < strlen("If you want to know more,")
(1)  145/    1CB6 :                             dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CB6 :                     i       set i + 1
(1)  145/    1CB6 :                             endm
(1)  145/    1CB6 : 29                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CB7 : =$1                 i       set i + 1
(1)  145/    1CB7 : 46                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CB8 : =$2                 i       set i + 1
(1)  145/    1CB8 : 00                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CB9 : =$3                 i       set i + 1
(1)  145/    1CB9 : 59                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CBA : =$4                 i       set i + 1
(1)  145/    1CBA : 4F                          dc.b    (substr("If you want to know more,", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 142 - 7/13/2025 17:28:33


(1)  145/    1CBB : =$5                 i       set i + 1
(1)  145/    1CBB : 55                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CBC : =$6                 i       set i + 1
(1)  145/    1CBC : 00                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CBD : =$7                 i       set i + 1
(1)  145/    1CBD : 57                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CBE : =$8                 i       set i + 1
(1)  145/    1CBE : 41                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CBF : =$9                 i       set i + 1
(1)  145/    1CBF : 4E                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CC0 : =$A                 i       set i + 1
(1)  145/    1CC0 : 54                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CC1 : =$B                 i       set i + 1
(1)  145/    1CC1 : 00                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CC2 : =$C                 i       set i + 1
(1)  145/    1CC2 : 54                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CC3 : =$D                 i       set i + 1
(1)  145/    1CC3 : 4F                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CC4 : =$E                 i       set i + 1
(1)  145/    1CC4 : 00                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CC5 : =$F                 i       set i + 1
(1)  145/    1CC5 : 4B                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CC6 : =$10                i       set i + 1
(1)  145/    1CC6 : 4E                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CC7 : =$11                i       set i + 1
(1)  145/    1CC7 : 4F                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CC8 : =$12                i       set i + 1
(1)  145/    1CC8 : 57                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CC9 : =$13                i       set i + 1
(1)  145/    1CC9 : 00                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CCA : =$14                i       set i + 1
(1)  145/    1CCA : 4D                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CCB : =$15                i       set i + 1
(1)  145/    1CCB : 4F                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CCC : =$16                i       set i + 1
(1)  145/    1CCC : 52                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CCD : =$17                i       set i + 1
(1)  145/    1CCD : 45                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CCE : =$18                i       set i + 1
(1)  145/    1CCE : 0C                          dc.b    (substr("If you want to know more,", i, 1) - $20)
(1)  145/    1CCF : =$19                i       set i + 1
(1)  145/    1CCF :                     
(1)  146/    1CCF : (MACRO)[3307]       	Message3:	dfntxt "there's some useful information:"
(1)  146/    1CCF : =$0                 i       set     0
(1)  146/    1CCF :                             while i < strlen("there's some useful information:")
(1)  146/    1CCF :                             dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CCF :                     i       set i + 1
(1)  146/    1CCF :                             endm
(1)  146/    1CCF : 54                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CD0 : =$1                 i       set i + 1
(1)  146/    1CD0 : 48                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CD1 : =$2                 i       set i + 1
(1)  146/    1CD1 : 45                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CD2 : =$3                 i       set i + 1
(1)  146/    1CD2 : 52                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CD3 : =$4                 i       set i + 1
(1)  146/    1CD3 : 45                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CD4 : =$5                 i       set i + 1
(1)  146/    1CD4 : 07                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CD5 : =$6                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 143 - 7/13/2025 17:28:33


(1)  146/    1CD5 : 53                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CD6 : =$7                 i       set i + 1
(1)  146/    1CD6 : 00                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CD7 : =$8                 i       set i + 1
(1)  146/    1CD7 : 53                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CD8 : =$9                 i       set i + 1
(1)  146/    1CD8 : 4F                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CD9 : =$A                 i       set i + 1
(1)  146/    1CD9 : 4D                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CDA : =$B                 i       set i + 1
(1)  146/    1CDA : 45                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CDB : =$C                 i       set i + 1
(1)  146/    1CDB : 00                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CDC : =$D                 i       set i + 1
(1)  146/    1CDC : 55                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CDD : =$E                 i       set i + 1
(1)  146/    1CDD : 53                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CDE : =$F                 i       set i + 1
(1)  146/    1CDE : 45                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CDF : =$10                i       set i + 1
(1)  146/    1CDF : 46                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CE0 : =$11                i       set i + 1
(1)  146/    1CE0 : 55                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CE1 : =$12                i       set i + 1
(1)  146/    1CE1 : 4C                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CE2 : =$13                i       set i + 1
(1)  146/    1CE2 : 00                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CE3 : =$14                i       set i + 1
(1)  146/    1CE3 : 49                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CE4 : =$15                i       set i + 1
(1)  146/    1CE4 : 4E                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CE5 : =$16                i       set i + 1
(1)  146/    1CE5 : 46                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CE6 : =$17                i       set i + 1
(1)  146/    1CE6 : 4F                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CE7 : =$18                i       set i + 1
(1)  146/    1CE7 : 52                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CE8 : =$19                i       set i + 1
(1)  146/    1CE8 : 4D                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CE9 : =$1A                i       set i + 1
(1)  146/    1CE9 : 41                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CEA : =$1B                i       set i + 1
(1)  146/    1CEA : 54                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CEB : =$1C                i       set i + 1
(1)  146/    1CEB : 49                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CEC : =$1D                i       set i + 1
(1)  146/    1CEC : 4F                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CED : =$1E                i       set i + 1
(1)  146/    1CED : 4E                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CEE : =$1F                i       set i + 1
(1)  146/    1CEE : 1A                          dc.b    (substr("there's some useful information:", i, 1) - $20)
(1)  146/    1CEF : =$20                i       set i + 1
(1)  146/    1CEF :                     
(1)  147/    1CEF : (MACRO)[3341]       	Message4:	dfntxt "STOP_CODE: 0x"
(1)  147/    1CEF : =$0                 i       set     0
(1)  147/    1CEF :                             while i < strlen("STOP_CODE: 0x")
(1)  147/    1CEF :                             dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CEF :                     i       set i + 1
(1)  147/    1CEF :                             endm
(1)  147/    1CEF : 33                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 144 - 7/13/2025 17:28:33


(1)  147/    1CF0 : =$1                 i       set i + 1
(1)  147/    1CF0 : 34                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CF1 : =$2                 i       set i + 1
(1)  147/    1CF1 : 2F                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CF2 : =$3                 i       set i + 1
(1)  147/    1CF2 : 30                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CF3 : =$4                 i       set i + 1
(1)  147/    1CF3 : 3F                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CF4 : =$5                 i       set i + 1
(1)  147/    1CF4 : 23                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CF5 : =$6                 i       set i + 1
(1)  147/    1CF5 : 2F                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CF6 : =$7                 i       set i + 1
(1)  147/    1CF6 : 24                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CF7 : =$8                 i       set i + 1
(1)  147/    1CF7 : 25                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CF8 : =$9                 i       set i + 1
(1)  147/    1CF8 : 1A                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CF9 : =$A                 i       set i + 1
(1)  147/    1CF9 : 00                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CFA : =$B                 i       set i + 1
(1)  147/    1CFA : 10                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CFB : =$C                 i       set i + 1
(1)  147/    1CFB : 58                          dc.b    (substr("STOP_CODE: 0x", i, 1) - $20)
(1)  147/    1CFC : =$D                 i       set i + 1
(1)  147/    1CFC :                     
(1)  148/    1CFC :                     	
(1)  149/    1CFC : (MACRO)[3356]       	Code0:	dfntxt "(BUS_ERROR)"
(1)  149/    1CFC : =$0                 i       set     0
(1)  149/    1CFC :                             while i < strlen("(BUS_ERROR)")
(1)  149/    1CFC :                             dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1CFC :                     i       set i + 1
(1)  149/    1CFC :                             endm
(1)  149/    1CFC : 08                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1CFD : =$1                 i       set i + 1
(1)  149/    1CFD : 22                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1CFE : =$2                 i       set i + 1
(1)  149/    1CFE : 35                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1CFF : =$3                 i       set i + 1
(1)  149/    1CFF : 33                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1D00 : =$4                 i       set i + 1
(1)  149/    1D00 : 3F                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1D01 : =$5                 i       set i + 1
(1)  149/    1D01 : 25                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1D02 : =$6                 i       set i + 1
(1)  149/    1D02 : 32                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1D03 : =$7                 i       set i + 1
(1)  149/    1D03 : 32                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1D04 : =$8                 i       set i + 1
(1)  149/    1D04 : 2F                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1D05 : =$9                 i       set i + 1
(1)  149/    1D05 : 32                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1D06 : =$A                 i       set i + 1
(1)  149/    1D06 : 09                          dc.b    (substr("(BUS_ERROR)", i, 1) - $20)
(1)  149/    1D07 : =$B                 i       set i + 1
(1)  149/    1D07 :                     
(1)  150/    1D07 : (MACRO)[3369]       	Code1:	dfntxt "(ADDRESS_ERROR)"
(1)  150/    1D07 : =$0                 i       set     0
(1)  150/    1D07 :                             while i < strlen("(ADDRESS_ERROR)")
(1)  150/    1D07 :                             dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 145 - 7/13/2025 17:28:33


(1)  150/    1D07 :                     i       set i + 1
(1)  150/    1D07 :                             endm
(1)  150/    1D07 : 08                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D08 : =$1                 i       set i + 1
(1)  150/    1D08 : 21                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D09 : =$2                 i       set i + 1
(1)  150/    1D09 : 24                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D0A : =$3                 i       set i + 1
(1)  150/    1D0A : 24                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D0B : =$4                 i       set i + 1
(1)  150/    1D0B : 32                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D0C : =$5                 i       set i + 1
(1)  150/    1D0C : 25                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D0D : =$6                 i       set i + 1
(1)  150/    1D0D : 33                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D0E : =$7                 i       set i + 1
(1)  150/    1D0E : 33                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D0F : =$8                 i       set i + 1
(1)  150/    1D0F : 3F                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D10 : =$9                 i       set i + 1
(1)  150/    1D10 : 25                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D11 : =$A                 i       set i + 1
(1)  150/    1D11 : 32                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D12 : =$B                 i       set i + 1
(1)  150/    1D12 : 32                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D13 : =$C                 i       set i + 1
(1)  150/    1D13 : 2F                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D14 : =$D                 i       set i + 1
(1)  150/    1D14 : 32                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D15 : =$E                 i       set i + 1
(1)  150/    1D15 : 09                          dc.b    (substr("(ADDRESS_ERROR)", i, 1) - $20)
(1)  150/    1D16 : =$F                 i       set i + 1
(1)  150/    1D16 :                     
(1)  151/    1D16 : (MACRO)[3386]       	Code2:	dfntxt "(ILLEGALINSTRUCTION_EXCEPTION)"
(1)  151/    1D16 : =$0                 i       set     0
(1)  151/    1D16 :                             while i < strlen("(ILLEGALINSTRUCTION_EXCEPTION)")
(1)  151/    1D16 :                             dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D16 :                     i       set i + 1
(1)  151/    1D16 :                             endm
(1)  151/    1D16 : 08                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D17 : =$1                 i       set i + 1
(1)  151/    1D17 : 29                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D18 : =$2                 i       set i + 1
(1)  151/    1D18 : 2C                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D19 : =$3                 i       set i + 1
(1)  151/    1D19 : 2C                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D1A : =$4                 i       set i + 1
(1)  151/    1D1A : 25                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D1B : =$5                 i       set i + 1
(1)  151/    1D1B : 27                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D1C : =$6                 i       set i + 1
(1)  151/    1D1C : 21                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D1D : =$7                 i       set i + 1
(1)  151/    1D1D : 2C                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D1E : =$8                 i       set i + 1
(1)  151/    1D1E : 29                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D1F : =$9                 i       set i + 1
(1)  151/    1D1F : 2E                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D20 : =$A                 i       set i + 1
(1)  151/    1D20 : 33                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 146 - 7/13/2025 17:28:33


(1)  151/    1D21 : =$B                 i       set i + 1
(1)  151/    1D21 : 34                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D22 : =$C                 i       set i + 1
(1)  151/    1D22 : 32                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D23 : =$D                 i       set i + 1
(1)  151/    1D23 : 35                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D24 : =$E                 i       set i + 1
(1)  151/    1D24 : 23                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D25 : =$F                 i       set i + 1
(1)  151/    1D25 : 34                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D26 : =$10                i       set i + 1
(1)  151/    1D26 : 29                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D27 : =$11                i       set i + 1
(1)  151/    1D27 : 2F                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D28 : =$12                i       set i + 1
(1)  151/    1D28 : 2E                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D29 : =$13                i       set i + 1
(1)  151/    1D29 : 3F                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D2A : =$14                i       set i + 1
(1)  151/    1D2A : 25                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D2B : =$15                i       set i + 1
(1)  151/    1D2B : 38                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D2C : =$16                i       set i + 1
(1)  151/    1D2C : 23                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D2D : =$17                i       set i + 1
(1)  151/    1D2D : 25                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D2E : =$18                i       set i + 1
(1)  151/    1D2E : 30                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D2F : =$19                i       set i + 1
(1)  151/    1D2F : 34                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D30 : =$1A                i       set i + 1
(1)  151/    1D30 : 29                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D31 : =$1B                i       set i + 1
(1)  151/    1D31 : 2F                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D32 : =$1C                i       set i + 1
(1)  151/    1D32 : 2E                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D33 : =$1D                i       set i + 1
(1)  151/    1D33 : 09                          dc.b    (substr("(ILLEGALINSTRUCTION_EXCEPTION)", i, 1) - $20)
(1)  151/    1D34 : =$1E                i       set i + 1
(1)  151/    1D34 :                     
(1)  152/    1D34 : (MACRO)[3418]       	Code3:	dfntxt "(DIVISIONBYZERO_EXCEPTION)"
(1)  152/    1D34 : =$0                 i       set     0
(1)  152/    1D34 :                             while i < strlen("(DIVISIONBYZERO_EXCEPTION)")
(1)  152/    1D34 :                             dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D34 :                     i       set i + 1
(1)  152/    1D34 :                             endm
(1)  152/    1D34 : 08                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D35 : =$1                 i       set i + 1
(1)  152/    1D35 : 24                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D36 : =$2                 i       set i + 1
(1)  152/    1D36 : 29                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D37 : =$3                 i       set i + 1
(1)  152/    1D37 : 36                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D38 : =$4                 i       set i + 1
(1)  152/    1D38 : 29                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D39 : =$5                 i       set i + 1
(1)  152/    1D39 : 33                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D3A : =$6                 i       set i + 1
(1)  152/    1D3A : 29                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D3B : =$7                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 147 - 7/13/2025 17:28:33


(1)  152/    1D3B : 2F                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D3C : =$8                 i       set i + 1
(1)  152/    1D3C : 2E                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D3D : =$9                 i       set i + 1
(1)  152/    1D3D : 22                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D3E : =$A                 i       set i + 1
(1)  152/    1D3E : 39                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D3F : =$B                 i       set i + 1
(1)  152/    1D3F : 3A                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D40 : =$C                 i       set i + 1
(1)  152/    1D40 : 25                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D41 : =$D                 i       set i + 1
(1)  152/    1D41 : 32                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D42 : =$E                 i       set i + 1
(1)  152/    1D42 : 2F                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D43 : =$F                 i       set i + 1
(1)  152/    1D43 : 3F                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D44 : =$10                i       set i + 1
(1)  152/    1D44 : 25                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D45 : =$11                i       set i + 1
(1)  152/    1D45 : 38                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D46 : =$12                i       set i + 1
(1)  152/    1D46 : 23                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D47 : =$13                i       set i + 1
(1)  152/    1D47 : 25                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D48 : =$14                i       set i + 1
(1)  152/    1D48 : 30                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D49 : =$15                i       set i + 1
(1)  152/    1D49 : 34                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D4A : =$16                i       set i + 1
(1)  152/    1D4A : 29                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D4B : =$17                i       set i + 1
(1)  152/    1D4B : 2F                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D4C : =$18                i       set i + 1
(1)  152/    1D4C : 2E                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D4D : =$19                i       set i + 1
(1)  152/    1D4D : 09                          dc.b    (substr("(DIVISIONBYZERO_EXCEPTION)", i, 1) - $20)
(1)  152/    1D4E : =$1A                i       set i + 1
(1)  152/    1D4E :                     
(1)  153/    1D4E : (MACRO)[3446]       	Code4:	dfntxt "(CHECK_EXCEPTION)"
(1)  153/    1D4E : =$0                 i       set     0
(1)  153/    1D4E :                             while i < strlen("(CHECK_EXCEPTION)")
(1)  153/    1D4E :                             dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D4E :                     i       set i + 1
(1)  153/    1D4E :                             endm
(1)  153/    1D4E : 08                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D4F : =$1                 i       set i + 1
(1)  153/    1D4F : 23                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D50 : =$2                 i       set i + 1
(1)  153/    1D50 : 28                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D51 : =$3                 i       set i + 1
(1)  153/    1D51 : 25                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D52 : =$4                 i       set i + 1
(1)  153/    1D52 : 23                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D53 : =$5                 i       set i + 1
(1)  153/    1D53 : 2B                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D54 : =$6                 i       set i + 1
(1)  153/    1D54 : 3F                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D55 : =$7                 i       set i + 1
(1)  153/    1D55 : 25                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 148 - 7/13/2025 17:28:33


(1)  153/    1D56 : =$8                 i       set i + 1
(1)  153/    1D56 : 38                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D57 : =$9                 i       set i + 1
(1)  153/    1D57 : 23                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D58 : =$A                 i       set i + 1
(1)  153/    1D58 : 25                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D59 : =$B                 i       set i + 1
(1)  153/    1D59 : 30                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D5A : =$C                 i       set i + 1
(1)  153/    1D5A : 34                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D5B : =$D                 i       set i + 1
(1)  153/    1D5B : 29                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D5C : =$E                 i       set i + 1
(1)  153/    1D5C : 2F                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D5D : =$F                 i       set i + 1
(1)  153/    1D5D : 2E                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D5E : =$10                i       set i + 1
(1)  153/    1D5E : 09                          dc.b    (substr("(CHECK_EXCEPTION)", i, 1) - $20)
(1)  153/    1D5F : =$11                i       set i + 1
(1)  153/    1D5F :                     
(1)  154/    1D5F : (MACRO)[3465]       	Code5:	dfntxt "(TRAPV_EXCEPTION)"
(1)  154/    1D5F : =$0                 i       set     0
(1)  154/    1D5F :                             while i < strlen("(TRAPV_EXCEPTION)")
(1)  154/    1D5F :                             dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D5F :                     i       set i + 1
(1)  154/    1D5F :                             endm
(1)  154/    1D5F : 08                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D60 : =$1                 i       set i + 1
(1)  154/    1D60 : 34                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D61 : =$2                 i       set i + 1
(1)  154/    1D61 : 32                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D62 : =$3                 i       set i + 1
(1)  154/    1D62 : 21                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D63 : =$4                 i       set i + 1
(1)  154/    1D63 : 30                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D64 : =$5                 i       set i + 1
(1)  154/    1D64 : 36                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D65 : =$6                 i       set i + 1
(1)  154/    1D65 : 3F                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D66 : =$7                 i       set i + 1
(1)  154/    1D66 : 25                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D67 : =$8                 i       set i + 1
(1)  154/    1D67 : 38                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D68 : =$9                 i       set i + 1
(1)  154/    1D68 : 23                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D69 : =$A                 i       set i + 1
(1)  154/    1D69 : 25                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D6A : =$B                 i       set i + 1
(1)  154/    1D6A : 30                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D6B : =$C                 i       set i + 1
(1)  154/    1D6B : 34                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D6C : =$D                 i       set i + 1
(1)  154/    1D6C : 29                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D6D : =$E                 i       set i + 1
(1)  154/    1D6D : 2F                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D6E : =$F                 i       set i + 1
(1)  154/    1D6E : 2E                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D6F : =$10                i       set i + 1
(1)  154/    1D6F : 09                          dc.b    (substr("(TRAPV_EXCEPTION)", i, 1) - $20)
(1)  154/    1D70 : =$11                i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 149 - 7/13/2025 17:28:33


(1)  154/    1D70 :                     
(1)  155/    1D70 : (MACRO)[3484]       	Code6:	dfntxt "(PRIVILEGE_VIOLATION)"
(1)  155/    1D70 : =$0                 i       set     0
(1)  155/    1D70 :                             while i < strlen("(PRIVILEGE_VIOLATION)")
(1)  155/    1D70 :                             dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D70 :                     i       set i + 1
(1)  155/    1D70 :                             endm
(1)  155/    1D70 : 08                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D71 : =$1                 i       set i + 1
(1)  155/    1D71 : 30                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D72 : =$2                 i       set i + 1
(1)  155/    1D72 : 32                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D73 : =$3                 i       set i + 1
(1)  155/    1D73 : 29                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D74 : =$4                 i       set i + 1
(1)  155/    1D74 : 36                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D75 : =$5                 i       set i + 1
(1)  155/    1D75 : 29                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D76 : =$6                 i       set i + 1
(1)  155/    1D76 : 2C                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D77 : =$7                 i       set i + 1
(1)  155/    1D77 : 25                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D78 : =$8                 i       set i + 1
(1)  155/    1D78 : 27                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D79 : =$9                 i       set i + 1
(1)  155/    1D79 : 25                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D7A : =$A                 i       set i + 1
(1)  155/    1D7A : 3F                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D7B : =$B                 i       set i + 1
(1)  155/    1D7B : 36                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D7C : =$C                 i       set i + 1
(1)  155/    1D7C : 29                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D7D : =$D                 i       set i + 1
(1)  155/    1D7D : 2F                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D7E : =$E                 i       set i + 1
(1)  155/    1D7E : 2C                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D7F : =$F                 i       set i + 1
(1)  155/    1D7F : 21                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D80 : =$10                i       set i + 1
(1)  155/    1D80 : 34                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D81 : =$11                i       set i + 1
(1)  155/    1D81 : 29                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D82 : =$12                i       set i + 1
(1)  155/    1D82 : 2F                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D83 : =$13                i       set i + 1
(1)  155/    1D83 : 2E                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D84 : =$14                i       set i + 1
(1)  155/    1D84 : 09                          dc.b    (substr("(PRIVILEGE_VIOLATION)", i, 1) - $20)
(1)  155/    1D85 : =$15                i       set i + 1
(1)  155/    1D85 :                     
(1)  156/    1D85 : (MACRO)[3507]       	Code7:	dfntxt "(TRACE_EXCEPTION)"
(1)  156/    1D85 : =$0                 i       set     0
(1)  156/    1D85 :                             while i < strlen("(TRACE_EXCEPTION)")
(1)  156/    1D85 :                             dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D85 :                     i       set i + 1
(1)  156/    1D85 :                             endm
(1)  156/    1D85 : 08                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D86 : =$1                 i       set i + 1
(1)  156/    1D86 : 34                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D87 : =$2                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 150 - 7/13/2025 17:28:33


(1)  156/    1D87 : 32                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D88 : =$3                 i       set i + 1
(1)  156/    1D88 : 21                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D89 : =$4                 i       set i + 1
(1)  156/    1D89 : 23                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D8A : =$5                 i       set i + 1
(1)  156/    1D8A : 25                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D8B : =$6                 i       set i + 1
(1)  156/    1D8B : 3F                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D8C : =$7                 i       set i + 1
(1)  156/    1D8C : 25                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D8D : =$8                 i       set i + 1
(1)  156/    1D8D : 38                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D8E : =$9                 i       set i + 1
(1)  156/    1D8E : 23                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D8F : =$A                 i       set i + 1
(1)  156/    1D8F : 25                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D90 : =$B                 i       set i + 1
(1)  156/    1D90 : 30                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D91 : =$C                 i       set i + 1
(1)  156/    1D91 : 34                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D92 : =$D                 i       set i + 1
(1)  156/    1D92 : 29                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D93 : =$E                 i       set i + 1
(1)  156/    1D93 : 2F                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D94 : =$F                 i       set i + 1
(1)  156/    1D94 : 2E                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D95 : =$10                i       set i + 1
(1)  156/    1D95 : 09                          dc.b    (substr("(TRACE_EXCEPTION)", i, 1) - $20)
(1)  156/    1D96 : =$11                i       set i + 1
(1)  156/    1D96 :                     
(1)  157/    1D96 : (MACRO)[3526]       	Code8:	dfntxt "(LINE1010_EMU)"
(1)  157/    1D96 : =$0                 i       set     0
(1)  157/    1D96 :                             while i < strlen("(LINE1010_EMU)")
(1)  157/    1D96 :                             dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1D96 :                     i       set i + 1
(1)  157/    1D96 :                             endm
(1)  157/    1D96 : 08                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1D97 : =$1                 i       set i + 1
(1)  157/    1D97 : 2C                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1D98 : =$2                 i       set i + 1
(1)  157/    1D98 : 29                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1D99 : =$3                 i       set i + 1
(1)  157/    1D99 : 2E                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1D9A : =$4                 i       set i + 1
(1)  157/    1D9A : 25                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1D9B : =$5                 i       set i + 1
(1)  157/    1D9B : 11                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1D9C : =$6                 i       set i + 1
(1)  157/    1D9C : 10                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1D9D : =$7                 i       set i + 1
(1)  157/    1D9D : 11                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1D9E : =$8                 i       set i + 1
(1)  157/    1D9E : 10                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1D9F : =$9                 i       set i + 1
(1)  157/    1D9F : 3F                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1DA0 : =$A                 i       set i + 1
(1)  157/    1DA0 : 25                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1DA1 : =$B                 i       set i + 1
(1)  157/    1DA1 : 2D                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 151 - 7/13/2025 17:28:33


(1)  157/    1DA2 : =$C                 i       set i + 1
(1)  157/    1DA2 : 35                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1DA3 : =$D                 i       set i + 1
(1)  157/    1DA3 : 09                          dc.b    (substr("(LINE1010_EMU)", i, 1) - $20)
(1)  157/    1DA4 : =$E                 i       set i + 1
(1)  157/    1DA4 :                     
(1)  158/    1DA4 : (MACRO)[3542]       	Code9:	dfntxt "(LINE1111_EMU)"
(1)  158/    1DA4 : =$0                 i       set     0
(1)  158/    1DA4 :                             while i < strlen("(LINE1111_EMU)")
(1)  158/    1DA4 :                             dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DA4 :                     i       set i + 1
(1)  158/    1DA4 :                             endm
(1)  158/    1DA4 : 08                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DA5 : =$1                 i       set i + 1
(1)  158/    1DA5 : 2C                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DA6 : =$2                 i       set i + 1
(1)  158/    1DA6 : 29                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DA7 : =$3                 i       set i + 1
(1)  158/    1DA7 : 2E                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DA8 : =$4                 i       set i + 1
(1)  158/    1DA8 : 25                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DA9 : =$5                 i       set i + 1
(1)  158/    1DA9 : 11                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DAA : =$6                 i       set i + 1
(1)  158/    1DAA : 11                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DAB : =$7                 i       set i + 1
(1)  158/    1DAB : 11                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DAC : =$8                 i       set i + 1
(1)  158/    1DAC : 11                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DAD : =$9                 i       set i + 1
(1)  158/    1DAD : 3F                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DAE : =$A                 i       set i + 1
(1)  158/    1DAE : 25                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DAF : =$B                 i       set i + 1
(1)  158/    1DAF : 2D                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DB0 : =$C                 i       set i + 1
(1)  158/    1DB0 : 35                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DB1 : =$D                 i       set i + 1
(1)  158/    1DB1 : 09                          dc.b    (substr("(LINE1111_EMU)", i, 1) - $20)
(1)  158/    1DB2 : =$E                 i       set i + 1
(1)  158/    1DB2 :                     
(1)  159/    1DB2 : (MACRO)[3558]       	Code10:	dfntxt "(SPURIOUS_EXCEPTION)"
(1)  159/    1DB2 : =$0                 i       set     0
(1)  159/    1DB2 :                             while i < strlen("(SPURIOUS_EXCEPTION)")
(1)  159/    1DB2 :                             dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DB2 :                     i       set i + 1
(1)  159/    1DB2 :                             endm
(1)  159/    1DB2 : 08                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DB3 : =$1                 i       set i + 1
(1)  159/    1DB3 : 33                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DB4 : =$2                 i       set i + 1
(1)  159/    1DB4 : 30                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DB5 : =$3                 i       set i + 1
(1)  159/    1DB5 : 35                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DB6 : =$4                 i       set i + 1
(1)  159/    1DB6 : 32                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DB7 : =$5                 i       set i + 1
(1)  159/    1DB7 : 29                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DB8 : =$6                 i       set i + 1
(1)  159/    1DB8 : 2F                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 152 - 7/13/2025 17:28:33


(1)  159/    1DB9 : =$7                 i       set i + 1
(1)  159/    1DB9 : 35                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DBA : =$8                 i       set i + 1
(1)  159/    1DBA : 33                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DBB : =$9                 i       set i + 1
(1)  159/    1DBB : 3F                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DBC : =$A                 i       set i + 1
(1)  159/    1DBC : 25                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DBD : =$B                 i       set i + 1
(1)  159/    1DBD : 38                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DBE : =$C                 i       set i + 1
(1)  159/    1DBE : 23                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DBF : =$D                 i       set i + 1
(1)  159/    1DBF : 25                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DC0 : =$E                 i       set i + 1
(1)  159/    1DC0 : 30                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DC1 : =$F                 i       set i + 1
(1)  159/    1DC1 : 34                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DC2 : =$10                i       set i + 1
(1)  159/    1DC2 : 29                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DC3 : =$11                i       set i + 1
(1)  159/    1DC3 : 2F                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DC4 : =$12                i       set i + 1
(1)  159/    1DC4 : 2E                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DC5 : =$13                i       set i + 1
(1)  159/    1DC5 : 09                          dc.b    (substr("(SPURIOUS_EXCEPTION)", i, 1) - $20)
(1)  159/    1DC6 : =$14                i       set i + 1
(1)  159/    1DC6 :                     
(1)  160/    1DC6 : (MACRO)[3580]       	Code11:	dfntxt "(TRAPxx_EXCEPTION)"
(1)  160/    1DC6 : =$0                 i       set     0
(1)  160/    1DC6 :                             while i < strlen("(TRAPxx_EXCEPTION)")
(1)  160/    1DC6 :                             dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DC6 :                     i       set i + 1
(1)  160/    1DC6 :                             endm
(1)  160/    1DC6 : 08                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DC7 : =$1                 i       set i + 1
(1)  160/    1DC7 : 34                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DC8 : =$2                 i       set i + 1
(1)  160/    1DC8 : 32                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DC9 : =$3                 i       set i + 1
(1)  160/    1DC9 : 21                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DCA : =$4                 i       set i + 1
(1)  160/    1DCA : 30                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DCB : =$5                 i       set i + 1
(1)  160/    1DCB : 58                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DCC : =$6                 i       set i + 1
(1)  160/    1DCC : 58                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DCD : =$7                 i       set i + 1
(1)  160/    1DCD : 3F                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DCE : =$8                 i       set i + 1
(1)  160/    1DCE : 25                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DCF : =$9                 i       set i + 1
(1)  160/    1DCF : 38                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DD0 : =$A                 i       set i + 1
(1)  160/    1DD0 : 23                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DD1 : =$B                 i       set i + 1
(1)  160/    1DD1 : 25                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DD2 : =$C                 i       set i + 1
(1)  160/    1DD2 : 30                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DD3 : =$D                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 153 - 7/13/2025 17:28:33


(1)  160/    1DD3 : 34                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DD4 : =$E                 i       set i + 1
(1)  160/    1DD4 : 29                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DD5 : =$F                 i       set i + 1
(1)  160/    1DD5 : 2F                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DD6 : =$10                i       set i + 1
(1)  160/    1DD6 : 2E                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DD7 : =$11                i       set i + 1
(1)  160/    1DD7 : 09                          dc.b    (substr("(TRAPxx_EXCEPTION)", i, 1) - $20)
(1)  160/    1DD8 : =$12                i       set i + 1
(1)  160/    1DD8 :                     
(1)  161/    1DD8 : (MACRO)[3600]       	Code12:	dfntxt "(UNKNOWN_ERROR)"
(1)  161/    1DD8 : =$0                 i       set     0
(1)  161/    1DD8 :                             while i < strlen("(UNKNOWN_ERROR)")
(1)  161/    1DD8 :                             dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DD8 :                     i       set i + 1
(1)  161/    1DD8 :                             endm
(1)  161/    1DD8 : 08                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DD9 : =$1                 i       set i + 1
(1)  161/    1DD9 : 35                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DDA : =$2                 i       set i + 1
(1)  161/    1DDA : 2E                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DDB : =$3                 i       set i + 1
(1)  161/    1DDB : 2B                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DDC : =$4                 i       set i + 1
(1)  161/    1DDC : 2E                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DDD : =$5                 i       set i + 1
(1)  161/    1DDD : 2F                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DDE : =$6                 i       set i + 1
(1)  161/    1DDE : 37                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DDF : =$7                 i       set i + 1
(1)  161/    1DDF : 2E                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DE0 : =$8                 i       set i + 1
(1)  161/    1DE0 : 3F                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DE1 : =$9                 i       set i + 1
(1)  161/    1DE1 : 25                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DE2 : =$A                 i       set i + 1
(1)  161/    1DE2 : 32                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DE3 : =$B                 i       set i + 1
(1)  161/    1DE3 : 32                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DE4 : =$C                 i       set i + 1
(1)  161/    1DE4 : 2F                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DE5 : =$D                 i       set i + 1
(1)  161/    1DE5 : 32                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DE6 : =$E                 i       set i + 1
(1)  161/    1DE6 : 09                          dc.b    (substr("(UNKNOWN_ERROR)", i, 1) - $20)
(1)  161/    1DE7 : =$F                 i       set i + 1
(1)  161/    1DE7 :                     
(1)  162/    1DE7 : (MACRO)[3617]       	Code13:	dfntxt "(MANUALLY_INITIATED_CRASH)"
(1)  162/    1DE7 : =$0                 i       set     0
(1)  162/    1DE7 :                             while i < strlen("(MANUALLY_INITIATED_CRASH)")
(1)  162/    1DE7 :                             dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DE7 :                     i       set i + 1
(1)  162/    1DE7 :                             endm
(1)  162/    1DE7 : 08                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DE8 : =$1                 i       set i + 1
(1)  162/    1DE8 : 2D                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DE9 : =$2                 i       set i + 1
(1)  162/    1DE9 : 21                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DEA : =$3                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 154 - 7/13/2025 17:28:33


(1)  162/    1DEA : 2E                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DEB : =$4                 i       set i + 1
(1)  162/    1DEB : 35                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DEC : =$5                 i       set i + 1
(1)  162/    1DEC : 21                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DED : =$6                 i       set i + 1
(1)  162/    1DED : 2C                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DEE : =$7                 i       set i + 1
(1)  162/    1DEE : 2C                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DEF : =$8                 i       set i + 1
(1)  162/    1DEF : 39                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DF0 : =$9                 i       set i + 1
(1)  162/    1DF0 : 3F                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DF1 : =$A                 i       set i + 1
(1)  162/    1DF1 : 29                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DF2 : =$B                 i       set i + 1
(1)  162/    1DF2 : 2E                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DF3 : =$C                 i       set i + 1
(1)  162/    1DF3 : 29                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DF4 : =$D                 i       set i + 1
(1)  162/    1DF4 : 34                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DF5 : =$E                 i       set i + 1
(1)  162/    1DF5 : 29                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DF6 : =$F                 i       set i + 1
(1)  162/    1DF6 : 21                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DF7 : =$10                i       set i + 1
(1)  162/    1DF7 : 34                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DF8 : =$11                i       set i + 1
(1)  162/    1DF8 : 25                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DF9 : =$12                i       set i + 1
(1)  162/    1DF9 : 24                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DFA : =$13                i       set i + 1
(1)  162/    1DFA : 3F                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DFB : =$14                i       set i + 1
(1)  162/    1DFB : 23                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DFC : =$15                i       set i + 1
(1)  162/    1DFC : 32                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DFD : =$16                i       set i + 1
(1)  162/    1DFD : 21                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DFE : =$17                i       set i + 1
(1)  162/    1DFE : 33                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1DFF : =$18                i       set i + 1
(1)  162/    1DFF : 28                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1E00 : =$19                i       set i + 1
(1)  162/    1E00 : 09                          dc.b    (substr("(MANUALLY_INITIATED_CRASH)", i, 1) - $20)
(1)  162/    1E01 : =$1A                i       set i + 1
(1)  162/    1E01 :                     
(1)  163/    1E01 :                     	
(1)  164/    1E01 :                     Codes_End
(1)  165/    1E01 :                     
(1)  166/    1E01 : (MACRO)[3645]       	Message5:	dfntxt "Registers dump:"
(1)  166/    1E01 : =$0                 i       set     0
(1)  166/    1E01 :                             while i < strlen("Registers dump:")
(1)  166/    1E01 :                             dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E01 :                     i       set i + 1
(1)  166/    1E01 :                             endm
(1)  166/    1E01 : 32                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E02 : =$1                 i       set i + 1
(1)  166/    1E02 : 45                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E03 : =$2                 i       set i + 1
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/Strings.asm) - Page 155 - 7/13/2025 17:28:33


(1)  166/    1E03 : 47                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E04 : =$3                 i       set i + 1
(1)  166/    1E04 : 49                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E05 : =$4                 i       set i + 1
(1)  166/    1E05 : 53                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E06 : =$5                 i       set i + 1
(1)  166/    1E06 : 54                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E07 : =$6                 i       set i + 1
(1)  166/    1E07 : 45                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E08 : =$7                 i       set i + 1
(1)  166/    1E08 : 52                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E09 : =$8                 i       set i + 1
(1)  166/    1E09 : 53                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E0A : =$9                 i       set i + 1
(1)  166/    1E0A : 00                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E0B : =$A                 i       set i + 1
(1)  166/    1E0B : 44                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E0C : =$B                 i       set i + 1
(1)  166/    1E0C : 55                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E0D : =$C                 i       set i + 1
(1)  166/    1E0D : 4D                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E0E : =$D                 i       set i + 1
(1)  166/    1E0E : 50                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E0F : =$E                 i       set i + 1
(1)  166/    1E0F : 1A                          dc.b    (substr("Registers dump:", i, 1) - $20)
(1)  166/    1E10 : =$F                 i       set i + 1
(1)  166/    1E10 :                     
(1)  167/    1E10 :                     
(1)  168/    1E10 :                     Strings_End
     429/    1E10 :                     
     430/    1E10 :                     STR_Properties: include "assets/String Properties.asm"
(1)    1/    1E10 :                     ; Sintax: string address in ROM, position on screen (x,y)
(1)    2/    1E10 :                     
(1)    3/    1E10 :                     ; ------------------------
(1)    4/    1E10 :                     ; Presentation strings
(1)    5/    1E10 :                     ; ------------------------
(1)    6/    1E10 :                     
(1)    7/    1E10 :                     ; Why are the terminators words and not bytes? Because the byte format doesn't always align correctly
(1)    8/    1E10 :                     ; (this makes the code more efficient, too, since .b and .w instructions require the same amount of cycles)
(1)    9/    1E10 :                     
(1)   10/    1E10 : FFFF                Slide0:	dc.w	$FFFF	; This is a terminator which will get hit by .find_terminator
(1)   11/    1E12 :                     ;-------------------------
(1)   12/    1E12 : 10F4                	dc.w	String0
(1)   13/    1E14 : (MACRO)[3662]       	VRAMCoordinates	0,0
(1)   13/    1E14 : =$E000              address set (PLANEA_ADDR)|(0*($40*2)+0*2)
(1)   13/    1E14 : 6000 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   14/    1E18 :                     ;-------------------------
(1)   15/    1E18 : 1114                	dc.w	String1
(1)   16/    1E1A : (MACRO)[3663]       	VRAMCoordinates	0,3
(1)   16/    1E1A : =$E180              address set (PLANEA_ADDR)|(3*($40*2)+0*2)
(1)   16/    1E1A : 6180 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   17/    1E1E :                     ;-------------------------
(1)   18/    1E1E : 113C                	dc.w	String2
(1)   19/    1E20 : (MACRO)[3664]       	VRAMCoordinates	0,4
(1)   19/    1E20 : =$E200              address set (PLANEA_ADDR)|(4*($40*2)+0*2)
(1)   19/    1E20 : 6200 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   20/    1E24 :                     ;-------------------------
(1)   21/    1E24 : 115D                	dc.w	String3
(1)   22/    1E26 : (MACRO)[3665]       	VRAMCoordinates	0,5
(1)   22/    1E26 : =$E280              address set (PLANEA_ADDR)|(5*($40*2)+0*2)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 156 - 7/13/2025 17:28:33


(1)   22/    1E26 : 6280 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   23/    1E2A :                     ;-------------------------
(1)   24/    1E2A : 1177                	dc.w	String4
(1)   25/    1E2C : (MACRO)[3666]       	VRAMCoordinates	0,7
(1)   25/    1E2C : =$E380              address set (PLANEA_ADDR)|(7*($40*2)+0*2)
(1)   25/    1E2C : 6380 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   26/    1E30 :                     ;-------------------------
(1)   27/    1E30 : 1184                	dc.w	String5
(1)   28/    1E32 : (MACRO)[3667]       	VRAMCoordinates	0,8
(1)   28/    1E32 : =$E400              address set (PLANEA_ADDR)|(8*($40*2)+0*2)
(1)   28/    1E32 : 6400 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   29/    1E36 :                     ;-------------------------
(1)   30/    1E36 : 11AC                	dc.w	String6
(1)   31/    1E38 : (MACRO)[3668]       	VRAMCoordinates	0,9
(1)   31/    1E38 : =$E480              address set (PLANEA_ADDR)|(9*($40*2)+0*2)
(1)   31/    1E38 : 6480 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   32/    1E3C :                     ;-------------------------
(1)   33/    1E3C : 11C7                	dc.w	String7
(1)   34/    1E3E : (MACRO)[3669]       	VRAMCoordinates	0,10
(1)   34/    1E3E : =$E500              address set (PLANEA_ADDR)|(10*($40*2)+0*2)
(1)   34/    1E3E : 6500 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   35/    1E42 :                     ;-------------------------
(1)   36/    1E42 : 11EF                	dc.w	String8
(1)   37/    1E44 : (MACRO)[3670]       	VRAMCoordinates	0,11
(1)   37/    1E44 : =$E580              address set (PLANEA_ADDR)|(11*($40*2)+0*2)
(1)   37/    1E44 : 6580 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   38/    1E48 :                     ;-------------------------
(1)   39/    1E48 : 1214                	dc.w	String9
(1)   40/    1E4A : (MACRO)[3671]       	VRAMCoordinates	0,12
(1)   40/    1E4A : =$E600              address set (PLANEA_ADDR)|(12*($40*2)+0*2)
(1)   40/    1E4A : 6600 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   41/    1E4E :                     ;=========================
(1)   42/    1E4E :                     
(1)   43/    1E4E : FFFF                Slide1:	dc.w	$FFFF
(1)   44/    1E50 :                     ;-------------------------
(1)   45/    1E50 : 1227                	dc.w	String10
(1)   46/    1E52 : (MACRO)[3672]       	VRAMCoordinates	0,0
(1)   46/    1E52 : =$E000              address set (PLANEA_ADDR)|(0*($40*2)+0*2)
(1)   46/    1E52 : 6000 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   47/    1E56 :                     ;-------------------------
(1)   48/    1E56 : 124B                	dc.w	String11
(1)   49/    1E58 : (MACRO)[3673]       	VRAMCoordinates	0,3
(1)   49/    1E58 : =$E180              address set (PLANEA_ADDR)|(3*($40*2)+0*2)
(1)   49/    1E58 : 6180 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   50/    1E5C :                     ;-------------------------
(1)   51/    1E5C : 126E                	dc.w	String12
(1)   52/    1E5E : (MACRO)[3674]       	VRAMCoordinates	0,5
(1)   52/    1E5E : =$E280              address set (PLANEA_ADDR)|(5*($40*2)+0*2)
(1)   52/    1E5E : 6280 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   53/    1E62 :                     ;-------------------------
(1)   54/    1E62 : 128D                	dc.w	String13
(1)   55/    1E64 : (MACRO)[3675]       	VRAMCoordinates	0,6
(1)   55/    1E64 : =$E300              address set (PLANEA_ADDR)|(6*($40*2)+0*2)
(1)   55/    1E64 : 6300 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   56/    1E68 :                     ;-------------------------
(1)   57/    1E68 : 12B5                	dc.w	String14
(1)   58/    1E6A : (MACRO)[3676]       	VRAMCoordinates	0,7
(1)   58/    1E6A : =$E380              address set (PLANEA_ADDR)|(7*($40*2)+0*2)
(1)   58/    1E6A : 6380 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   59/    1E6E :                     ;-------------------------
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 157 - 7/13/2025 17:28:33


(1)   60/    1E6E : 12C2                	dc.w	String15
(1)   61/    1E70 : (MACRO)[3677]       	VRAMCoordinates	0,8
(1)   61/    1E70 : =$E400              address set (PLANEA_ADDR)|(8*($40*2)+0*2)
(1)   61/    1E70 : 6400 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   62/    1E74 :                     ;-------------------------
(1)   63/    1E74 : 12DE                	dc.w	String16
(1)   64/    1E76 : (MACRO)[3678]       	VRAMCoordinates	0,10
(1)   64/    1E76 : =$E500              address set (PLANEA_ADDR)|(10*($40*2)+0*2)
(1)   64/    1E76 : 6500 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   65/    1E7A :                     ;-------------------------
(1)   66/    1E7A : 12F6                	dc.w	String17
(1)   67/    1E7C : (MACRO)[3679]       	VRAMCoordinates	0,11
(1)   67/    1E7C : =$E580              address set (PLANEA_ADDR)|(11*($40*2)+0*2)
(1)   67/    1E7C : 6580 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   68/    1E80 :                     ;-------------------------
(1)   69/    1E80 : 130D                	dc.w	String18
(1)   70/    1E82 : (MACRO)[3680]       	VRAMCoordinates	0,12
(1)   70/    1E82 : =$E600              address set (PLANEA_ADDR)|(12*($40*2)+0*2)
(1)   70/    1E82 : 6600 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   71/    1E86 :                     ;-------------------------
(1)   72/    1E86 : 131F                	dc.w	String19
(1)   73/    1E88 : (MACRO)[3681]       	VRAMCoordinates	0,13
(1)   73/    1E88 : =$E680              address set (PLANEA_ADDR)|(13*($40*2)+0*2)
(1)   73/    1E88 : 6680 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   74/    1E8C :                     ;-------------------------
(1)   75/    1E8C : 1337                	dc.w	String20
(1)   76/    1E8E : (MACRO)[3682]       	VRAMCoordinates	0,14
(1)   76/    1E8E : =$E700              address set (PLANEA_ADDR)|(14*($40*2)+0*2)
(1)   76/    1E8E : 6700 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   77/    1E92 :                     ;=========================
(1)   78/    1E92 :                     
(1)   79/    1E92 : FFFF                Slide2:	dc.w	$FFFF
(1)   80/    1E94 :                     ;-------------------------
(1)   81/    1E94 : 134F                	dc.w	String21
(1)   82/    1E96 : (MACRO)[3683]       	VRAMCoordinates	0,0
(1)   82/    1E96 : =$E000              address set (PLANEA_ADDR)|(0*($40*2)+0*2)
(1)   82/    1E96 : 6000 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   83/    1E9A :                     ;-------------------------
(1)   84/    1E9A : 136B                	dc.w	String22
(1)   85/    1E9C : (MACRO)[3684]       	VRAMCoordinates	0,3
(1)   85/    1E9C : =$E180              address set (PLANEA_ADDR)|(3*($40*2)+0*2)
(1)   85/    1E9C : 6180 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   86/    1EA0 :                     ;-------------------------
(1)   87/    1EA0 : 138E                	dc.w	String23
(1)   88/    1EA2 : (MACRO)[3685]       	VRAMCoordinates	0,5
(1)   88/    1EA2 : =$E280              address set (PLANEA_ADDR)|(5*($40*2)+0*2)
(1)   88/    1EA2 : 6280 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   89/    1EA6 :                     ;-------------------------
(1)   90/    1EA6 : 13AE                	dc.w	String24
(1)   91/    1EA8 : (MACRO)[3686]       	VRAMCoordinates	0,6
(1)   91/    1EA8 : =$E300              address set (PLANEA_ADDR)|(6*($40*2)+0*2)
(1)   91/    1EA8 : 6300 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   92/    1EAC :                     ;-------------------------
(1)   93/    1EAC : 13C5                	dc.w	String25
(1)   94/    1EAE : (MACRO)[3687]       	VRAMCoordinates	0,7
(1)   94/    1EAE : =$E380              address set (PLANEA_ADDR)|(7*($40*2)+0*2)
(1)   94/    1EAE : 6380 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   95/    1EB2 :                     ;-------------------------
(1)   96/    1EB2 : 13E6                	dc.w	String26
(1)   97/    1EB4 : (MACRO)[3688]       	VRAMCoordinates	0,8
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 158 - 7/13/2025 17:28:33


(1)   97/    1EB4 : =$E400              address set (PLANEA_ADDR)|(8*($40*2)+0*2)
(1)   97/    1EB4 : 6400 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)   98/    1EB8 :                     ;-------------------------
(1)   99/    1EB8 : 140E                	dc.w	String27
(1)  100/    1EBA : (MACRO)[3689]       	VRAMCoordinates	0,9
(1)  100/    1EBA : =$E480              address set (PLANEA_ADDR)|(9*($40*2)+0*2)
(1)  100/    1EBA : 6480 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  101/    1EBE :                     ;-------------------------
(1)  102/    1EBE : 1429                	dc.w	String28
(1)  103/    1EC0 : (MACRO)[3690]       	VRAMCoordinates	0,10
(1)  103/    1EC0 : =$E500              address set (PLANEA_ADDR)|(10*($40*2)+0*2)
(1)  103/    1EC0 : 6500 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  104/    1EC4 :                     ;-------------------------
(1)  105/    1EC4 : 143F                	dc.w	String29
(1)  106/    1EC6 : (MACRO)[3691]       	VRAMCoordinates	23,10
(1)  106/    1EC6 : =$E52E              address set (PLANEA_ADDR)|(10*($40*2)+23*2)
(1)  106/    1EC6 : 652E 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  107/    1ECA :                     ;-------------------------
(1)  108/    1ECA : 144C                	dc.w	String30
(1)  109/    1ECC : (MACRO)[3692]       	VRAMCoordinates	0,11
(1)  109/    1ECC : =$E580              address set (PLANEA_ADDR)|(11*($40*2)+0*2)
(1)  109/    1ECC : 6580 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  110/    1ED0 :                     ;-------------------------
(1)  111/    1ED0 : 145F                	dc.w	String31
(1)  112/    1ED2 : (MACRO)[3693]       	VRAMCoordinates	0,13
(1)  112/    1ED2 : =$E680              address set (PLANEA_ADDR)|(13*($40*2)+0*2)
(1)  112/    1ED2 : 6680 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  113/    1ED6 :                     ;-------------------------
(1)  114/    1ED6 : 146D                	dc.w	String32
(1)  115/    1ED8 : (MACRO)[3694]       	VRAMCoordinates	0,14
(1)  115/    1ED8 : =$E700              address set (PLANEA_ADDR)|(14*($40*2)+0*2)
(1)  115/    1ED8 : 6700 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  116/    1EDC :                     ;-------------------------
(1)  117/    1EDC : 1486                	dc.w	String33
(1)  118/    1EDE : (MACRO)[3695]       	VRAMCoordinates	0,15
(1)  118/    1EDE : =$E780              address set (PLANEA_ADDR)|(15*($40*2)+0*2)
(1)  118/    1EDE : 6780 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  119/    1EE2 :                     ;-------------------------
(1)  120/    1EE2 : 1493                	dc.w	String34
(1)  121/    1EE4 : (MACRO)[3696]       	VRAMCoordinates	14,15
(1)  121/    1EE4 : =$E79C              address set (PLANEA_ADDR)|(15*($40*2)+14*2)
(1)  121/    1EE4 : 679C 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  122/    1EE8 :                     ;-------------------------
(1)  123/    1EE8 : 149F                	dc.w	String35
(1)  124/    1EEA : (MACRO)[3697]       	VRAMCoordinates	0,17
(1)  124/    1EEA : =$E880              address set (PLANEA_ADDR)|(17*($40*2)+0*2)
(1)  124/    1EEA : 6880 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  125/    1EEE :                     ;-------------------------
(1)  126/    1EEE : 14B7                	dc.w	String36
(1)  127/    1EF0 : (MACRO)[3698]       	VRAMCoordinates	0,18
(1)  127/    1EF0 : =$E900              address set (PLANEA_ADDR)|(18*($40*2)+0*2)
(1)  127/    1EF0 : 6900 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  128/    1EF4 :                     ;-------------------------
(1)  129/    1EF4 : 14DD                	dc.w	String37
(1)  130/    1EF6 : (MACRO)[3699]       	VRAMCoordinates	0,19
(1)  130/    1EF6 : =$E980              address set (PLANEA_ADDR)|(19*($40*2)+0*2)
(1)  130/    1EF6 : 6980 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  131/    1EFA :                     ;-------------------------
(1)  132/    1EFA : 1500                	dc.w	String38
(1)  133/    1EFC : (MACRO)[3700]       	VRAMCoordinates	0,20
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 159 - 7/13/2025 17:28:33


(1)  133/    1EFC : =$EA00              address set (PLANEA_ADDR)|(20*($40*2)+0*2)
(1)  133/    1EFC : 6A00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  134/    1F00 :                     ;-------------------------
(1)  135/    1F00 : 1518                	dc.w	String39
(1)  136/    1F02 : (MACRO)[3701]       	VRAMCoordinates	0,21
(1)  136/    1F02 : =$EA80              address set (PLANEA_ADDR)|(21*($40*2)+0*2)
(1)  136/    1F02 : 6A80 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  137/    1F06 :                     ;=========================
(1)  138/    1F06 :                     
(1)  139/    1F06 : FFFF                Slide3:	dc.w	$FFFF
(1)  140/    1F08 :                     ;-------------------------
(1)  141/    1F08 : 1537                	dc.w	String40
(1)  142/    1F0A : (MACRO)[3702]       	VRAMCoordinates	8,0
(1)  142/    1F0A : =$E010              address set (PLANEA_ADDR)|(0*($40*2)+8*2)
(1)  142/    1F0A : 6010 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  143/    1F0E :                     ;-------------------------
(1)  144/    1F0E : 154E                	dc.w	String41
(1)  145/    1F10 : (MACRO)[3703]       	VRAMCoordinates	0,3
(1)  145/    1F10 : =$E180              address set (PLANEA_ADDR)|(3*($40*2)+0*2)
(1)  145/    1F10 : 6180 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  146/    1F14 :                     ;-------------------------
(1)  147/    1F14 : 156C                	dc.w	String42
(1)  148/    1F16 : (MACRO)[3704]       	VRAMCoordinates	0,5
(1)  148/    1F16 : =$E280              address set (PLANEA_ADDR)|(5*($40*2)+0*2)
(1)  148/    1F16 : 6280 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  149/    1F1A :                     ;-------------------------
(1)  150/    1F1A : 1586                	dc.w	String43
(1)  151/    1F1C : (MACRO)[3705]       	VRAMCoordinates	11,7
(1)  151/    1F1C : =$E396              address set (PLANEA_ADDR)|(7*($40*2)+11*2)
(1)  151/    1F1C : 6396 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  152/    1F20 :                     ;-------------------------
(1)  153/    1F20 : 158C                	dc.w	String44
(1)  154/    1F22 : (MACRO)[3706]       	VRAMCoordinates	2,8
(1)  154/    1F22 : =$E404              address set (PLANEA_ADDR)|(8*($40*2)+2*2)
(1)  154/    1F22 : 6404 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  155/    1F26 :                     ;-------------------------
(1)  156/    1F26 : 15A3                	dc.w	String45
(1)  157/    1F28 : (MACRO)[3707]       	VRAMCoordinates	0,9
(1)  157/    1F28 : =$E480              address set (PLANEA_ADDR)|(9*($40*2)+0*2)
(1)  157/    1F28 : 6480 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  158/    1F2C :                     ;-------------------------
(1)  159/    1F2C : 15BE                	dc.w	String46
(1)  160/    1F2E : (MACRO)[3708]       	VRAMCoordinates	2,10
(1)  160/    1F2E : =$E504              address set (PLANEA_ADDR)|(10*($40*2)+2*2)
(1)  160/    1F2E : 6504 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  161/    1F32 :                     ;-------------------------
(1)  162/    1F32 : 15D4                	dc.w	String47
(1)  163/    1F34 : (MACRO)[3709]       	VRAMCoordinates	0,11
(1)  163/    1F34 : =$E580              address set (PLANEA_ADDR)|(11*($40*2)+0*2)
(1)  163/    1F34 : 6580 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  164/    1F38 :                     ;-------------------------
(1)  165/    1F38 : 15EE                	dc.w	String48
(1)  166/    1F3A : (MACRO)[3710]       	VRAMCoordinates	11,12
(1)  166/    1F3A : =$E616              address set (PLANEA_ADDR)|(12*($40*2)+11*2)
(1)  166/    1F3A : 6616 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  167/    1F3E :                     ;-------------------------
(1)  168/    1F3E : 15F3                	dc.w	String49
(1)  169/    1F40 : (MACRO)[3711]       	VRAMCoordinates	11,14
(1)  169/    1F40 : =$E716              address set (PLANEA_ADDR)|(14*($40*2)+11*2)
(1)  169/    1F40 : 6716 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 160 - 7/13/2025 17:28:33


(1)  170/    1F44 :                     ;-------------------------
(1)  171/    1F44 : 15F9                	dc.w	String50
(1)  172/    1F46 : (MACRO)[3712]       	VRAMCoordinates	0,15
(1)  172/    1F46 : =$E780              address set (PLANEA_ADDR)|(15*($40*2)+0*2)
(1)  172/    1F46 : 6780 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  173/    1F4A :                     ;-------------------------
(1)  174/    1F4A : 1615                	dc.w	String51
(1)  175/    1F4C : (MACRO)[3713]       	VRAMCoordinates	1,17
(1)  175/    1F4C : =$E882              address set (PLANEA_ADDR)|(17*($40*2)+1*2)
(1)  175/    1F4C : 6882 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  176/    1F50 :                     ;-------------------------
(1)  177/    1F50 : 1620                	dc.w	String52
(1)  178/    1F52 : (MACRO)[3714]       	VRAMCoordinates	1,18
(1)  178/    1F52 : =$E902              address set (PLANEA_ADDR)|(18*($40*2)+1*2)
(1)  178/    1F52 : 6902 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  179/    1F56 :                     ;-------------------------
(1)  180/    1F56 : 162B                	dc.w	String53
(1)  181/    1F58 : (MACRO)[3715]       	VRAMCoordinates	0,20
(1)  181/    1F58 : =$EA00              address set (PLANEA_ADDR)|(20*($40*2)+0*2)
(1)  181/    1F58 : 6A00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  182/    1F5C :                     ;-------------------------
(1)  183/    1F5C : 163D                	dc.w	String54
(1)  184/    1F5E : (MACRO)[3716]       	VRAMCoordinates	0,22
(1)  184/    1F5E : =$EB00              address set (PLANEA_ADDR)|(22*($40*2)+0*2)
(1)  184/    1F5E : 6B00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  185/    1F62 :                     ;-------------------------
(1)  186/    1F62 : 164B                	dc.w	String55
(1)  187/    1F64 : (MACRO)[3717]       	VRAMCoordinates	31,5
(1)  187/    1F64 : =$E2BE              address set (PLANEA_ADDR)|(5*($40*2)+31*2)
(1)  187/    1F64 : 62BE 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  188/    1F68 :                     ;-------------------------
(1)  189/    1F68 : 1651                	dc.w	String56
(1)  190/    1F6A : (MACRO)[3718]       	VRAMCoordinates	31,7
(1)  190/    1F6A : =$E3BE              address set (PLANEA_ADDR)|(7*($40*2)+31*2)
(1)  190/    1F6A : 63BE 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  191/    1F6E :                     ;=========================
(1)  192/    1F6E :                     
(1)  193/    1F6E : FFFF                Slide4:	dc.w	$FFFF
(1)  194/    1F70 :                     ;-------------------------
(1)  195/    1F70 : 165A                	dc.w	String57
(1)  196/    1F72 : (MACRO)[3719]       	VRAMCoordinates	8,0
(1)  196/    1F72 : =$E010              address set (PLANEA_ADDR)|(0*($40*2)+8*2)
(1)  196/    1F72 : 6010 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  197/    1F76 :                     ;-------------------------
(1)  198/    1F76 : 1671                	dc.w	String58
(1)  199/    1F78 : (MACRO)[3720]       	VRAMCoordinates	0,3
(1)  199/    1F78 : =$E180              address set (PLANEA_ADDR)|(3*($40*2)+0*2)
(1)  199/    1F78 : 6180 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  200/    1F7C :                     ;-------------------------
(1)  201/    1F7C : 1693                	dc.w	String59
(1)  202/    1F7E : (MACRO)[3721]       	VRAMCoordinates	0,5
(1)  202/    1F7E : =$E280              address set (PLANEA_ADDR)|(5*($40*2)+0*2)
(1)  202/    1F7E : 6280 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  203/    1F82 :                     ;-------------------------
(1)  204/    1F82 : 16B4                	dc.w	String60
(1)  205/    1F84 : (MACRO)[3722]       	VRAMCoordinates	17,7
(1)  205/    1F84 : =$E3A2              address set (PLANEA_ADDR)|(7*($40*2)+17*2)
(1)  205/    1F84 : 63A2 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  206/    1F88 :                     ;-------------------------
(1)  207/    1F88 : 16BA                	dc.w	String61
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 161 - 7/13/2025 17:28:33


(1)  208/    1F8A : (MACRO)[3723]       	VRAMCoordinates	5,8
(1)  208/    1F8A : =$E40A              address set (PLANEA_ADDR)|(8*($40*2)+5*2)
(1)  208/    1F8A : 640A 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  209/    1F8E :                     ;-------------------------
(1)  210/    1F8E : 16D8                	dc.w	String62
(1)  211/    1F90 : (MACRO)[3724]       	VRAMCoordinates	0,10
(1)  211/    1F90 : =$E500              address set (PLANEA_ADDR)|(10*($40*2)+0*2)
(1)  211/    1F90 : 6500 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  212/    1F94 :                     ;-------------------------
(1)  213/    1F94 : 16EA                	dc.w	String63
(1)  214/    1F96 : (MACRO)[3725]       	VRAMCoordinates	17,12
(1)  214/    1F96 : =$E622              address set (PLANEA_ADDR)|(12*($40*2)+17*2)
(1)  214/    1F96 : 6622 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  215/    1F9A :                     ;-------------------------
(1)  216/    1F9A : 16F0                	dc.w	String64
(1)  217/    1F9C : (MACRO)[3726]       	VRAMCoordinates	6,13
(1)  217/    1F9C : =$E68C              address set (PLANEA_ADDR)|(13*($40*2)+6*2)
(1)  217/    1F9C : 668C 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  218/    1FA0 :                     ;-------------------------
(1)  219/    1FA0 : 170C                	dc.w	String65
(1)  220/    1FA2 : (MACRO)[3727]       	VRAMCoordinates	0,15
(1)  220/    1FA2 : =$E780              address set (PLANEA_ADDR)|(15*($40*2)+0*2)
(1)  220/    1FA2 : 6780 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  221/    1FA6 :                     ;-------------------------
(1)  222/    1FA6 : 172E                	dc.w	String66
(1)  223/    1FA8 : (MACRO)[3728]       	VRAMCoordinates	0,16
(1)  223/    1FA8 : =$E800              address set (PLANEA_ADDR)|(16*($40*2)+0*2)
(1)  223/    1FA8 : 6800 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  224/    1FAC :                     ;-------------------------
(1)  225/    1FAC : 174D                	dc.w	String67
(1)  226/    1FAE : (MACRO)[3729]       	VRAMCoordinates	0,17
(1)  226/    1FAE : =$E880              address set (PLANEA_ADDR)|(17*($40*2)+0*2)
(1)  226/    1FAE : 6880 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  227/    1FB2 :                     ;-------------------------
(1)  228/    1FB2 : 176E                	dc.w	String68
(1)  229/    1FB4 : (MACRO)[3730]       	VRAMCoordinates	0,19
(1)  229/    1FB4 : =$E980              address set (PLANEA_ADDR)|(19*($40*2)+0*2)
(1)  229/    1FB4 : 6980 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  230/    1FB8 :                     ;-------------------------
(1)  231/    1FB8 : 1786                	dc.w	String69
(1)  232/    1FBA : (MACRO)[3731]       	VRAMCoordinates	0,20
(1)  232/    1FBA : =$EA00              address set (PLANEA_ADDR)|(20*($40*2)+0*2)
(1)  232/    1FBA : 6A00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  233/    1FBE :                     ;-------------------------
(1)  234/    1FBE : 17A9                	dc.w	String70
(1)  235/    1FC0 : (MACRO)[3732]       	VRAMCoordinates	0,23
(1)  235/    1FC0 : =$EB80              address set (PLANEA_ADDR)|(23*($40*2)+0*2)
(1)  235/    1FC0 : 6B80 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  236/    1FC4 :                     ;-------------------------
(1)  237/    1FC4 : 17BE                	dc.w	String71
(1)  238/    1FC6 : (MACRO)[3733]       	VRAMCoordinates	0,25
(1)  238/    1FC6 : =$EC80              address set (PLANEA_ADDR)|(25*($40*2)+0*2)
(1)  238/    1FC6 : 6C80 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  239/    1FCA :                     ;=========================
(1)  240/    1FCA :                     
(1)  241/    1FCA : FFFF                Slide5:	dc.w	$FFFF
(1)  242/    1FCC :                     ;-------------------------
(1)  243/    1FCC : 17C3                	dc.w	String72
(1)  244/    1FCE : (MACRO)[3734]       	VRAMCoordinates 6,0
(1)  244/    1FCE : =$E00C              address set (PLANEA_ADDR)|(0*($40*2)+6*2)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 162 - 7/13/2025 17:28:33


(1)  244/    1FCE : 600C 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  245/    1FD2 :                     ;-------------------------
(1)  246/    1FD2 : 17DE                	dc.w	String73
(1)  247/    1FD4 : (MACRO)[3735]       	VRAMCoordinates	8,2
(1)  247/    1FD4 : =$E110              address set (PLANEA_ADDR)|(2*($40*2)+8*2)
(1)  247/    1FD4 : 6110 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  248/    1FD8 :                     ;-------------------------
(1)  249/    1FD8 : 17F5                	dc.w	String74
(1)  250/    1FDA : (MACRO)[3736]       	VRAMCoordinates	2,4
(1)  250/    1FDA : =$E204              address set (PLANEA_ADDR)|(4*($40*2)+2*2)
(1)  250/    1FDA : 6204 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  251/    1FDE :                     ;-------------------------
(1)  252/    1FDE : 17FF                	dc.w	String75
(1)  253/    1FE0 : (MACRO)[3737]       	VRAMCoordinates	9,6
(1)  253/    1FE0 : =$E312              address set (PLANEA_ADDR)|(6*($40*2)+9*2)
(1)  253/    1FE0 : 6312 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  254/    1FE4 :                     ;-------------------------
(1)  255/    1FE4 : 1815                	dc.w	String76
(1)  256/    1FE6 : (MACRO)[3738]       	VRAMCoordinates	1,8
(1)  256/    1FE6 : =$E402              address set (PLANEA_ADDR)|(8*($40*2)+1*2)
(1)  256/    1FE6 : 6402 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  257/    1FEA :                     ;-------------------------
(1)  258/    1FEA : 1820                	dc.w	String77
(1)  259/    1FEC : (MACRO)[3739]       	VRAMCoordinates	1,9
(1)  259/    1FEC : =$E482              address set (PLANEA_ADDR)|(9*($40*2)+1*2)
(1)  259/    1FEC : 6482 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  260/    1FF0 :                     ;-------------------------
(1)  261/    1FF0 : 182D                	dc.w	String78
(1)  262/    1FF2 : (MACRO)[3740]       	VRAMCoordinates	1,10
(1)  262/    1FF2 : =$E502              address set (PLANEA_ADDR)|(10*($40*2)+1*2)
(1)  262/    1FF2 : 6502 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  263/    1FF6 :                     ;-------------------------
(1)  264/    1FF6 : 1838                	dc.w	String79
(1)  265/    1FF8 : (MACRO)[3741]       	VRAMCoordinates	1,11
(1)  265/    1FF8 : =$E582              address set (PLANEA_ADDR)|(11*($40*2)+1*2)
(1)  265/    1FF8 : 6582 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  266/    1FFC :                     ;-------------------------
(1)  267/    1FFC : 1843                	dc.w	String80
(1)  268/    1FFE : (MACRO)[3742]       	VRAMCoordinates	10,13
(1)  268/    1FFE : =$E694              address set (PLANEA_ADDR)|(13*($40*2)+10*2)
(1)  268/    1FFE : 6694 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  269/    2002 :                     ;-------------------------
(1)  270/    2002 : 1856                	dc.w	String81
(1)  271/    2004 : (MACRO)[3743]       	VRAMCoordinates	1,15
(1)  271/    2004 : =$E782              address set (PLANEA_ADDR)|(15*($40*2)+1*2)
(1)  271/    2004 : 6782 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  272/    2008 :                     ;-------------------------
(1)  273/    2008 : 1863                	dc.w	String82
(1)  274/    200A : (MACRO)[3744]       	VRAMCoordinates	1,16
(1)  274/    200A : =$E802              address set (PLANEA_ADDR)|(16*($40*2)+1*2)
(1)  274/    200A : 6802 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  275/    200E :                     ;-------------------------
(1)  276/    200E : 186C                	dc.w	String83
(1)  277/    2010 : (MACRO)[3745]       	VRAMCoordinates	0,18
(1)  277/    2010 : =$E900              address set (PLANEA_ADDR)|(18*($40*2)+0*2)
(1)  277/    2010 : 6900 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  278/    2014 :                     ;-------------------------
(1)  279/    2014 : 1890                	dc.w	String84
(1)  280/    2016 : (MACRO)[3746]       	VRAMCoordinates	0,20
(1)  280/    2016 : =$EA00              address set (PLANEA_ADDR)|(20*($40*2)+0*2)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 163 - 7/13/2025 17:28:33


(1)  280/    2016 : 6A00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  281/    201A :                     ;-------------------------
(1)  282/    201A : 189F                	dc.w	String85
(1)  283/    201C : (MACRO)[3747]       	VRAMCoordinates	16,20
(1)  283/    201C : =$EA20              address set (PLANEA_ADDR)|(20*($40*2)+16*2)
(1)  283/    201C : 6A20 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  284/    2020 :                     ;-------------------------
(1)  285/    2020 : 18B7                	dc.w	String86
(1)  286/    2022 : (MACRO)[3748]       	VRAMCoordinates	0,21
(1)  286/    2022 : =$EA80              address set (PLANEA_ADDR)|(21*($40*2)+0*2)
(1)  286/    2022 : 6A80 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  287/    2026 :                     ;-------------------------
(1)  288/    2026 : 18C8                	dc.w	String87
(1)  289/    2028 : (MACRO)[3749]       	VRAMCoordinates	18,21
(1)  289/    2028 : =$EAA4              address set (PLANEA_ADDR)|(21*($40*2)+18*2)
(1)  289/    2028 : 6AA4 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  290/    202C :                     ;-------------------------
(1)  291/    202C : 18D7                	dc.w	String88
(1)  292/    202E : (MACRO)[3750]       	VRAMCoordinates	22,4
(1)  292/    202E : =$E22C              address set (PLANEA_ADDR)|(4*($40*2)+22*2)
(1)  292/    202E : 622C 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  293/    2032 :                     ;-------------------------
(1)  294/    2032 : 18E5                	dc.w	String89
(1)  295/    2034 : (MACRO)[3751]       	VRAMCoordinates	21,8
(1)  295/    2034 : =$E42A              address set (PLANEA_ADDR)|(8*($40*2)+21*2)
(1)  295/    2034 : 642A 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  296/    2038 :                     ;-------------------------
(1)  297/    2038 : 18F5                	dc.w	String90
(1)  298/    203A : (MACRO)[3752]       	VRAMCoordinates	21,9
(1)  298/    203A : =$E4AA              address set (PLANEA_ADDR)|(9*($40*2)+21*2)
(1)  298/    203A : 64AA 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  299/    203E :                     ;-------------------------
(1)  300/    203E : 1904                	dc.w	String91
(1)  301/    2040 : (MACRO)[3753]       	VRAMCoordinates	21,10
(1)  301/    2040 : =$E52A              address set (PLANEA_ADDR)|(10*($40*2)+21*2)
(1)  301/    2040 : 652A 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  302/    2044 :                     ;-------------------------
(1)  303/    2044 : 1912                	dc.w	String92
(1)  304/    2046 : (MACRO)[3754]       	VRAMCoordinates	21,11
(1)  304/    2046 : =$E5AA              address set (PLANEA_ADDR)|(11*($40*2)+21*2)
(1)  304/    2046 : 65AA 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  305/    204A :                     ;-------------------------
(1)  306/    204A : 1920                	dc.w	String93
(1)  307/    204C : (MACRO)[3755]       	VRAMCoordinates	21,15
(1)  307/    204C : =$E7AA              address set (PLANEA_ADDR)|(15*($40*2)+21*2)
(1)  307/    204C : 67AA 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  308/    2050 :                     ;-------------------------
(1)  309/    2050 : 192F                	dc.w	String94
(1)  310/    2052 : (MACRO)[3756]       	VRAMCoordinates	21,16
(1)  310/    2052 : =$E82A              address set (PLANEA_ADDR)|(16*($40*2)+21*2)
(1)  310/    2052 : 682A 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  311/    2056 :                     ;-------------------------
(1)  312/    2056 : 193B                	dc.w	String95
(1)  313/    2058 : (MACRO)[3757]       	VRAMCoordinates	0,23
(1)  313/    2058 : =$EB80              address set (PLANEA_ADDR)|(23*($40*2)+0*2)
(1)  313/    2058 : 6B80 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  314/    205C :                     ;-------------------------
(1)  315/    205C : 195C                	dc.w	String96
(1)  316/    205E : (MACRO)[3758]       	VRAMCoordinates	0,24
(1)  316/    205E : =$EC00              address set (PLANEA_ADDR)|(24*($40*2)+0*2)
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 164 - 7/13/2025 17:28:33


(1)  316/    205E : 6C00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  317/    2062 :                     ;-------------------------
(1)  318/    2062 : 1969                	dc.w	String97
(1)  319/    2064 : (MACRO)[3759]       	VRAMCoordinates	0,26
(1)  319/    2064 : =$ED00              address set (PLANEA_ADDR)|(26*($40*2)+0*2)
(1)  319/    2064 : 6D00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  320/    2068 :                     ;-------------------------
(1)  321/    2068 : 197A                	dc.w	String98
(1)  322/    206A : (MACRO)[3760]       	VRAMCoordinates	0,28
(1)  322/    206A : =$EE00              address set (PLANEA_ADDR)|(28*($40*2)+0*2)
(1)  322/    206A : 6E00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  323/    206E :                     ;-------------------------
(1)  324/    206E : 198B                	dc.w	String99
(1)  325/    2070 : (MACRO)[3761]       	VRAMCoordinates	20,28
(1)  325/    2070 : =$EE28              address set (PLANEA_ADDR)|(28*($40*2)+20*2)
(1)  325/    2070 : 6E28 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  326/    2074 :                     ;=========================
(1)  327/    2074 :                     
(1)  328/    2074 : FFFF                Slide6:	dc.w	$FFFF
(1)  329/    2076 :                     ;-------------------------
(1)  330/    2076 : 199F                	dc.w	String100
(1)  331/    2078 : (MACRO)[3762]       	VRAMCoordinates 6,0
(1)  331/    2078 : =$E00C              address set (PLANEA_ADDR)|(0*($40*2)+6*2)
(1)  331/    2078 : 600C 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  332/    207C :                     ;-------------------------
(1)  333/    207C : 19BA                	dc.w	String101
(1)  334/    207E : (MACRO)[3763]       	VRAMCoordinates 0,2
(1)  334/    207E : =$E100              address set (PLANEA_ADDR)|(2*($40*2)+0*2)
(1)  334/    207E : 6100 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  335/    2082 :                     ;-------------------------
(1)  336/    2082 : 19E2                	dc.w	String102
(1)  337/    2084 : (MACRO)[3764]       	VRAMCoordinates 0,4
(1)  337/    2084 : =$E200              address set (PLANEA_ADDR)|(4*($40*2)+0*2)
(1)  337/    2084 : 6200 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  338/    2088 :                     ;-------------------------
(1)  339/    2088 : 19FD                	dc.w	String103
(1)  340/    208A : (MACRO)[3765]       	VRAMCoordinates 0,6
(1)  340/    208A : =$E300              address set (PLANEA_ADDR)|(6*($40*2)+0*2)
(1)  340/    208A : 6300 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  341/    208E :                     ;-------------------------
(1)  342/    208E : 1A1A                	dc.w	String104
(1)  343/    2090 : (MACRO)[3766]       	VRAMCoordinates 0,7
(1)  343/    2090 : =$E380              address set (PLANEA_ADDR)|(7*($40*2)+0*2)
(1)  343/    2090 : 6380 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  344/    2094 :                     ;-------------------------
(1)  345/    2094 : 1A3A                	dc.w	String105
(1)  346/    2096 : (MACRO)[3767]       	VRAMCoordinates 0,8
(1)  346/    2096 : =$E400              address set (PLANEA_ADDR)|(8*($40*2)+0*2)
(1)  346/    2096 : 6400 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  347/    209A :                     ;-------------------------
(1)  348/    209A : 1A61                	dc.w	String106
(1)  349/    209C : (MACRO)[3768]       	VRAMCoordinates 0,10
(1)  349/    209C : =$E500              address set (PLANEA_ADDR)|(10*($40*2)+0*2)
(1)  349/    209C : 6500 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  350/    20A0 :                     ;-------------------------
(1)  351/    20A0 : 1A88                	dc.w	String107
(1)  352/    20A2 : (MACRO)[3769]       	VRAMCoordinates 0,12
(1)  352/    20A2 : =$E600              address set (PLANEA_ADDR)|(12*($40*2)+0*2)
(1)  352/    20A2 : 6600 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  353/    20A6 :                     ;-------------------------
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 165 - 7/13/2025 17:28:33


(1)  354/    20A6 : 1AA9                	dc.w	String108
(1)  355/    20A8 : (MACRO)[3770]       	VRAMCoordinates 0,13
(1)  355/    20A8 : =$E680              address set (PLANEA_ADDR)|(13*($40*2)+0*2)
(1)  355/    20A8 : 6680 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  356/    20AC :                     ;-------------------------
(1)  357/    20AC : 1ACA                	dc.w	String109
(1)  358/    20AE : (MACRO)[3771]       	VRAMCoordinates 0,14
(1)  358/    20AE : =$E700              address set (PLANEA_ADDR)|(14*($40*2)+0*2)
(1)  358/    20AE : 6700 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  359/    20B2 :                     ;-------------------------
(1)  360/    20B2 : 1AEB                	dc.w	String110
(1)  361/    20B4 : (MACRO)[3772]       	VRAMCoordinates 0,16
(1)  361/    20B4 : =$E800              address set (PLANEA_ADDR)|(16*($40*2)+0*2)
(1)  361/    20B4 : 6800 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  362/    20B8 :                     ;-------------------------
(1)  363/    20B8 : 1B0C                	dc.w	String111
(1)  364/    20BA : (MACRO)[3773]       	VRAMCoordinates 0,18
(1)  364/    20BA : =$E900              address set (PLANEA_ADDR)|(18*($40*2)+0*2)
(1)  364/    20BA : 6900 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  365/    20BE :                     ;-------------------------
(1)  366/    20BE : 1B33                	dc.w	String112
(1)  367/    20C0 : (MACRO)[3774]       	VRAMCoordinates 0,19
(1)  367/    20C0 : =$E980              address set (PLANEA_ADDR)|(19*($40*2)+0*2)
(1)  367/    20C0 : 6980 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  368/    20C4 :                     ;-------------------------
(1)  369/    20C4 : 1B5B                	dc.w	String113
(1)  370/    20C6 : (MACRO)[3775]       	VRAMCoordinates 0,21
(1)  370/    20C6 : =$EA80              address set (PLANEA_ADDR)|(21*($40*2)+0*2)
(1)  370/    20C6 : 6A80 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  371/    20CA :                     ;-------------------------
(1)  372/    20CA : 1B83                	dc.w	String114
(1)  373/    20CC : (MACRO)[3776]       	VRAMCoordinates 0,23
(1)  373/    20CC : =$EB80              address set (PLANEA_ADDR)|(23*($40*2)+0*2)
(1)  373/    20CC : 6B80 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  374/    20D0 :                     ;-------------------------
(1)  375/    20D0 : 1B8F                	dc.w	String115
(1)  376/    20D2 : (MACRO)[3777]       	VRAMCoordinates 20,23
(1)  376/    20D2 : =$EBA8              address set (PLANEA_ADDR)|(23*($40*2)+20*2)
(1)  376/    20D2 : 6BA8 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  377/    20D6 :                     ;-------------------------
(1)  378/    20D6 : 1B9A                	dc.w	String116
(1)  379/    20D8 : (MACRO)[3778]       	VRAMCoordinates 0,24
(1)  379/    20D8 : =$EC00              address set (PLANEA_ADDR)|(24*($40*2)+0*2)
(1)  379/    20D8 : 6C00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  380/    20DC :                     ;-------------------------
(1)  381/    20DC : 1BAD                	dc.w	String117
(1)  382/    20DE : (MACRO)[3779]       	VRAMCoordinates 20,24
(1)  382/    20DE : =$EC28              address set (PLANEA_ADDR)|(24*($40*2)+20*2)
(1)  382/    20DE : 6C28 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  383/    20E2 :                     ;-------------------------
(1)  384/    20E2 : 1BBA                	dc.w	String118
(1)  385/    20E4 : (MACRO)[3780]       	VRAMCoordinates 0,25
(1)  385/    20E4 : =$EC80              address set (PLANEA_ADDR)|(25*($40*2)+0*2)
(1)  385/    20E4 : 6C80 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  386/    20E8 :                     ;-------------------------
(1)  387/    20E8 : 1BC8                	dc.w	String119
(1)  388/    20EA : (MACRO)[3781]       	VRAMCoordinates 20,25
(1)  388/    20EA : =$ECA8              address set (PLANEA_ADDR)|(25*($40*2)+20*2)
(1)  388/    20EA : 6CA8 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  389/    20EE :                     ;-------------------------
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 166 - 7/13/2025 17:28:33


(1)  390/    20EE : 1BD5                	dc.w	String120
(1)  391/    20F0 : (MACRO)[3782]       	VRAMCoordinates 0,26
(1)  391/    20F0 : =$ED00              address set (PLANEA_ADDR)|(26*($40*2)+0*2)
(1)  391/    20F0 : 6D00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  392/    20F4 :                     ;-------------------------
(1)  393/    20F4 : 1BE4                	dc.w	String121
(1)  394/    20F6 : (MACRO)[3783]       	VRAMCoordinates 20,26
(1)  394/    20F6 : =$ED28              address set (PLANEA_ADDR)|(26*($40*2)+20*2)
(1)  394/    20F6 : 6D28 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  395/    20FA :                     ;-------------------------
(1)  396/    20FA : 1BF1                	dc.w	String122
(1)  397/    20FC : (MACRO)[3784]       	VRAMCoordinates 0,27
(1)  397/    20FC : =$ED80              address set (PLANEA_ADDR)|(27*($40*2)+0*2)
(1)  397/    20FC : 6D80 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  398/    2100 :                     ;-------------------------
(1)  399/    2100 : 1C03                	dc.w	String123
(1)  400/    2102 : (MACRO)[3785]       	VRAMCoordinates 20,27
(1)  400/    2102 : =$EDA8              address set (PLANEA_ADDR)|(27*($40*2)+20*2)
(1)  400/    2102 : 6DA8 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  401/    2106 :                     ;-------------------------
(1)  402/    2106 : 1C11                	dc.w	String124
(1)  403/    2108 : (MACRO)[3786]       	VRAMCoordinates 0,28
(1)  403/    2108 : =$EE00              address set (PLANEA_ADDR)|(28*($40*2)+0*2)
(1)  403/    2108 : 6E00 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  404/    210C :                     ;-------------------------
(1)  405/    210C : 1C33                	dc.w	String125
(1)  406/    210E : (MACRO)[3787]       	VRAMCoordinates 0,29
(1)  406/    210E : =$EE80              address set (PLANEA_ADDR)|(29*($40*2)+0*2)
(1)  406/    210E : 6E80 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  407/    2112 :                     ;-------------------------
(1)  408/    2112 : 1C42                	dc.w	String126
(1)  409/    2114 : (MACRO)[3788]       	VRAMCoordinates 20,29
(1)  409/    2114 : =$EEA8              address set (PLANEA_ADDR)|(29*($40*2)+20*2)
(1)  409/    2114 : 6EA8 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  410/    2118 :                     ;=========================
(1)  411/    2118 :                     
(1)  412/    2118 : FFFF                Slide7:	dc.w	$FFFF
(1)  413/    211A :                     ;-------------------------
(1)  414/    211A : 1C52                	dc.w	String127
(1)  415/    211C : (MACRO)[3789]       	VRAMCoordinates 16,14
(1)  415/    211C : =$E720              address set (PLANEA_ADDR)|(14*($40*2)+16*2)
(1)  415/    211C : 6720 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  416/    2120 :                     ;-------------------------
(1)  417/    2120 : 1C5A                	dc.w	String128
(1)  418/    2122 : (MACRO)[3790]       	VRAMCoordinates 8,15
(1)  418/    2122 : =$E790              address set (PLANEA_ADDR)|(15*($40*2)+8*2)
(1)  418/    2122 : 6790 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  419/    2126 :                     ;=========================
(1)  420/    2126 :                     
(1)  421/    2126 : FFFF                Slide8:	dc.w	$FFFF
(1)  422/    2128 :                     ;-------------------------
(1)  423/    2128 : 1C71                	dc.w	String129
(1)  424/    212A : (MACRO)[3791]       	VRAMCoordinates 15,14
(1)  424/    212A : =$E71E              address set (PLANEA_ADDR)|(14*($40*2)+15*2)
(1)  424/    212A : 671E 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  425/    212E :                     	
(1)  426/    212E :                     ; ------------------------
(1)  427/    212E :                     ; Crash handler strings
(1)  428/    212E :                     ; ------------------------
(1)  429/    212E :                     
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm(assets/String Properties.asm) - Page 167 - 7/13/2025 17:28:33


(1)  430/    212E :                     Messages:
(1)  431/    212E : 1C7B                	dc.w	Message0
(1)  432/    2130 : (MACRO)[3792]       	VRAMCoordinates 0,0
(1)  432/    2130 : =$E000              address set (PLANEA_ADDR)|(0*($40*2)+0*2)
(1)  432/    2130 : 6000 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  433/    2134 :                     ;-------------------------
(1)  434/    2134 : 1C9D                	dc.w	Message1
(1)  435/    2136 : (MACRO)[3793]       	VRAMCoordinates 0,1
(1)  435/    2136 : =$E080              address set (PLANEA_ADDR)|(1*($40*2)+0*2)
(1)  435/    2136 : 6080 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  436/    213A :                     ;-------------------------
(1)  437/    213A : 1CB6                	dc.w	Message2
(1)  438/    213C : (MACRO)[3794]       	VRAMCoordinates 0,3
(1)  438/    213C : =$E180              address set (PLANEA_ADDR)|(3*($40*2)+0*2)
(1)  438/    213C : 6180 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  439/    2140 :                     ;-------------------------
(1)  440/    2140 : 1CCF                	dc.w	Message3
(1)  441/    2142 : (MACRO)[3795]       	VRAMCoordinates 0,4
(1)  441/    2142 : =$E200              address set (PLANEA_ADDR)|(4*($40*2)+0*2)
(1)  441/    2142 : 6200 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  442/    2146 :                     ;-------------------------
(1)  443/    2146 : 1CEF                	dc.w	Message4
(1)  444/    2148 : (MACRO)[3796]       	VRAMCoordinates 2,6
(1)  444/    2148 : =$E304              address set (PLANEA_ADDR)|(6*($40*2)+2*2)
(1)  444/    2148 : 6304 0003                   dc.l    ((address&$3FFF)<<16)|((address&$C000)>>14)|(VRAM)
(1)  445/    214C :                     ;=========================
(1)  446/    214C :                     TextCodes:
(1)  447/    214C : 1CFC                	dc.w	Code0
(1)  448/    214E : 1D07                	dc.w	Code1
(1)  449/    2150 : 1D16                	dc.w	Code2
(1)  450/    2152 : 1D34                	dc.w	Code3
(1)  451/    2154 : 1D4E                	dc.w	Code4
(1)  452/    2156 : 1D5F                	dc.w	Code5
(1)  453/    2158 : 1D70                	dc.w	Code6
(1)  454/    215A : 1D85                	dc.w	Code7
(1)  455/    215C : 1D96                	dc.w	Code8
(1)  456/    215E : 1DA4                	dc.w	Code9
(1)  457/    2160 : 1DB2                	dc.w	Code10
(1)  458/    2162 : 1DC6                	dc.w	Code11
(1)  459/    2164 : 1DD8                	dc.w	Code12
(1)  460/    2166 : 1DE7                	dc.w	Code13
(1)  461/    2168 : 1E01                	dc.w	Codes_End
     431/    216A :                     
     432/    216A :                     ;=================================================================================
     433/    216A :                     
     434/    216A :                     ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
     435/    216A :                     ; | General registers purpose (because I hate RAM accesses)																												|
     436/    216A :                     ; | a0: VDP control port, a1: VDP data port, a2: controller control port, a3: controller data port, a4: string addresses array, a5: address string array, a6: unused	|
     437/    216A :                     ; | d7: contains $40 to request controller access, d6: controller state, d5: controller press tester, d4: VBlank tester, d3: zero writer, d2,d1,d0: generic purpose		|
     438/    216A :                     ; -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
     439/    216A :                     
     440/    216A :                     EntryPoint:
     441/    216A :                     CPU_RegistersDeclaration
     442/    216A : 7E40                	moveq 	#$40,d7
     443/    216C : 7A7F                	moveq	#$7F,d5
     444/    216E : 7803                	moveq	#3,d4
     445/    2170 : 7600                	moveq	#0,d3
     446/    2172 : 41F9 00C0 0004      	lea	VDP_CTRL,a0
     447/    2178 : 43F9 00C0 0000      	lea	VDP_DATA,a1
     448/    217E : 45F9 00A1 0009      	lea JOY_CTRL,a2
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 168 - 7/13/2025 17:28:33


     449/    2184 : 47F9 00A1 0003      	lea	JOY_DATA,a3
     450/    218A : 49F8 1E10           	lea STR_Properties,a4
     451/    218E :                     
     452/    218E :                     VDP_Setup
     453/    218E : 4A50                	tst.w 	(a0) ; Testing the VDP control port safely resets it
     454/    2190 :                     	
     455/    2190 : 30BC 8004           	move.w  #VDPREG_MODE1|%00000100,(a0)	; Mode register #1
     456/    2194 : 30BC 817C               move.w  #VDPREG_MODE2|%01111100,(a0)	; Mode register #2
     457/    2198 : 30BC 8B00               move.w  #VDPREG_MODE3|%00000000,(a0)	; Mode register #3
     458/    219C : 30BC 8C81               move.w  #VDPREG_MODE4|%10000001,(a0)	; Mode register #4
     459/    21A0 :                         
     460/    21A0 : 30BC 8238               move.w  #VDPREG_PLANEA|(PLANEA_ADDR>>10),(a0)   ; Plane A address
     461/    21A4 : 30BC 8407               move.w  #VDPREG_PLANEB|(PLANEB_ADDR>>13),(a0)   ; Plane B address
     462/    21A8 : 30BC 857F           	move.w  #VDPREG_SPRITE|(SPRITE_ADDR>>9),(a0)	; Sprite address
     463/    21AC : 30BC 833F               move.w  #VDPREG_WINDOW|(WINDOW_ADDR>>10),(a0)	; Window address
     464/    21B0 : 30BC 8D3F               move.w  #VDPREG_HSCROLL|(HSCROLL_ADDR>>10),(a0)	; HScroll address
     465/    21B4 :                         
     466/    21B4 : 30BC 9001               move.w  #VDPREG_SIZE|%00000001,(a0)	; Tilemap size
     467/    21B8 : 30BC 9100           	move.w  #VDPREG_WINX|$00,(a0)		; Window X split
     468/    21BC : 30BC 9200               move.w  #VDPREG_WINY|$00,(a0)		; Window Y split
     469/    21C0 : 30BC 8F02               move.w  #VDPREG_INCR|$02,(a0)		; Autoincrement
     470/    21C4 : 30BC 8700               move.w  #VDPREG_BGCOL|$00,(a0)		; Background color
     471/    21C8 : 30BC 8AFF           	move.w  #VDPREG_HRATE|$FF,(a0)		; HBlank IRQ rate
     472/    21CC :                     	
     473/    21CC :                     JOY_Setup
     474/    21CC : 1487                	move.b 	d7,(a2)
     475/    21CE : 1687                	move.b 	d7,(a3)
     476/    21D0 :                     
     477/    21D0 :                     ;=================================================================================
     478/    21D0 :                     
     479/    21D0 :                     DMA_Load_BodyFont
     480/    21D0 : (MACRO)[3797]       	dma68kToVDP PAT_BodyFont, $0000, PAT_BodyFont_SIZE_B, VRAM, FALSE, (a0), (a1)
     480/    21D0 : =$0                                 set     .c,0
     480/    21D0 : 20BC 9406 9300              move.l  #dmaCommandLength(dmaLength(PAT_BodyFont_SIZE_B)),(a0)
     480/    21D6 : 20BC 9602 957A              move.l  #dmaCommandSrcLow(dmaSource(PAT_BodyFont)),(a0)
     480/    21DC : 20BC 9700 4000              move.l  #(dmaCommandSrcHigh(dmaSource(PAT_BodyFont))<<16)|((dmaCommand(($0000)|.c,VRAM)>>16)&$FFFF),(a0)
     480/    21E2 : 30BC 0080                   move.w  #(dmaCommand(($0000)|.c,VRAM)&$FFFF),(a0)
     481/    21E6 :                     
     482/    21E6 :                     CRAM_Load_BodyFontPalette
     483/    21E6 : (MACRO)[3798]       	vdpSetColorSpace 0,(a0)
     483/    21E6 : 20BC C000 0000              move.l  #(((0*2)&$3FFF)<<16)|(((0*2)&$C000)>>14)|(CRAM),(a0)
     484/    21EC : 22BC 0000 EEEE      	move.l	#$0000EEEE,(a1)	; black and white
     485/    21F2 :                     
     486/    21F2 : (MACRO)[3799]       	dmaFillVRAM $00, PLANEA_ADDR, $757, (a0), (a1) ; clears characters at every soft reset
     486/    21F2 :                             
     486/    21F2 : 20BC 940E 93AA              move.l  #dmaCommandLength(2*($757-2)),(a0)
     486/    21F8 : 20BC 8F01 9780              move.l  #(VDPREG_INCR|1)<<16|(VDPREG_DMASRC_H|$80),(a0) ; VRAM pointer increment: $0001, VRAM fill
     486/    21FE :                             ; Forcing the low bit of PLANEA_ADDR to be 1, as described before.
     486/    21FE : 20BC 6001 0083              move.l  #dmaCommand((PLANEA_ADDR)|1,VRAM),(a0)
     486/    2204 : 32BC 0000                   move.w  #(($00)<<8)|($00),(a1)
     486/    2208 :                     .wait:
     486/    2208 : 3410                        move.w  (a0),d2
     486/    220A : 0802 0001                   btst    #1,d2
     486/    220E : 66F8                        bne.s   .wait   ; busy loop until the VDP is finished filling
     486/    2210 : 30BC 8F02                   move.w  #(VDPREG_INCR)|2,(a0) ; VRAM pointer increment back to 2
     487/    2214 :                     
     488/    2214 : 6000 004E           	bra.w 	UpdateStringProperties
     489/    2218 :                     	;bra.s	PressWait	it already does this in UpdateStringProperties
     490/    2218 :                     
     491/    2218 :                     ;=================================================================================
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 169 - 7/13/2025 17:28:33


     492/    2218 :                     
     493/    2218 :                     ; ---------------------------------------------------------------------------
     494/    2218 :                     ; Subroutine to	read the controller and wait until the input is released
     495/    2218 :                     ; ---------------------------------------------------------------------------
     496/    2218 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     497/    2218 :                     
     498/    2218 :                     ;GetJoypad:
     499/    2218 :                     ;	move.b 	d7,(a3)	; write $40 to request controller state
     500/    2218 :                     ;	nop	; wait for the bus to get the controller state
     501/    2218 :                     ;	nop
     502/    2218 :                     ;	nop
     503/    2218 :                     ;	nop
     504/    2218 :                     ;	move.b	(a3),d6	; put control state somewhere
     505/    2218 :                     ;	rts
     506/    2218 :                     
     507/    2218 :                     ; This portion of code was meant to change slide only by pressing the button once (not by holding, effectively avoiding debouncing).
     508/    2218 :                     ; This is unnecessary, because the animation is slow enough to prevent accidental slide changes
     509/    2218 :                     ;PressWait: 
     510/    2218 :                     ;.press_wait:
     511/    2218 :                     ;	stop	#$2500	; wait until next frame (can't make a frame-perfect press)
     512/    2218 :                     ;	bsr.s	GetJoypad
     513/    2218 :                     ;	cmp.b	d5,d6	; are there any pressed buttons? (d5 = %0111 1111)
     514/    2218 :                     ;	bne.s	.press_wait
     515/    2218 :                     ; End of function GetJoypad
     516/    2218 :                     
     517/    2218 :                     ; ---------------------------------------------------------------------------
     518/    2218 :                     ; Subroutine to	perform the action according to the pressed button
     519/    2218 :                     ; ---------------------------------------------------------------------------
     520/    2218 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     521/    2218 :                     
     522/    2218 :                     ; Why is GetJoypad at the bottom of this routine?
     523/    2218 :                     ; Because PressWait has already updated the controller state at this point.
     524/    2218 :                     ReadJoypad:
     525/    2218 :                     	;bsr.s	GetJoypad
     526/    2218 : 1687                	move.b 	d7,(a3)	; write $40 to request controller state
     527/    221A : 4E71                	nop	; wait for the bus to get the controller state
     528/    221C : 4E71                	nop
     529/    221E : 4E71                	nop
     530/    2220 : 4E71                	nop
     531/    2222 : 1C13                	move.b	(a3),d6	; put control state somewhere
     532/    2224 : 0806 0003           	btst 	#JOY_R,d6
     533/    2228 : 6734                	beq.s 	NextString
     534/    222A : 0806 0002           	btst	#JOY_L,d6
     535/    222E : 6726                	beq.s	RedrawSlide
     536/    2230 : 0806 0000           	btst	#JOY_U,d6
     537/    2234 : 6700 0060           	beq.w	NextSlide
     538/    2238 : 0806 0001           	btst 	#JOY_D,d6
     539/    223C : 6700 0068           	beq.w 	PreviousSlide
     540/    2240 : 0806 0005           	btst 	#JOY_C,d6
     541/    2244 : 6700 0074           	beq.w	ClearScreen_Alt
     542/    2248 : 0806 0004           	btst 	#JOY_B,d6
     543/    224C : 6700 0096           	beq.w 	CPU_CrashSystem
     544/    2250 :                     WaitNextFrame:
     545/    2250 : 4E72 2500           	stop	#$2500		; wait until next frame
     546/    2254 : 60C2                	bra.s 	ReadJoypad
     547/    2256 :                     
     548/    2256 :                     RedrawSlide:
     549/    2256 :                     .find_terminator:
     550/    2256 : 4A64                	tst.w	-(a4)		; find the previous terminator
     551/    2258 : 6AFC                	bpl.s	.find_terminator
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 170 - 7/13/2025 17:28:33


     552/    225A : 6164                	bsr.s 	VDP_ClearScreen
     553/    225C : 6006                	bra.s	UpdateStringProperties
     554/    225E :                     
     555/    225E :                     NextString:
     556/    225E : B8FC 212C           	cmpa.w	#Slide8+6,a4	; is the boundary limit to avoid going outside the slides being hit?
     557/    2262 : 64EC                	bhs.s	WaitNextFrame	; if yes, do nothing
     558/    2264 :                     	;addq.w	#6,a4			; already done by UpdateStringProperties
     559/    2264 :                     	
     560/    2264 :                     ; ---------------------------------------------------------------------------
     561/    2264 :                     ; Subroutine to	draw text on screen (a4: string pointer)
     562/    2264 :                     ; ---------------------------------------------------------------------------
     563/    2264 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||
     564/    2264 :                     
     565/    2264 :                     UpdateStringProperties:
     566/    2264 : 321C                	move.w	(a4)+,d1	; get string address and move pointer
     567/    2266 : 4A41                	tst.w	d1			; are we encountering an $FFFF terminator?
     568/    2268 : 6A04                	bpl.s	.continue	; if no, continue
     569/    226A : 321C                	move.w	(a4)+,d1	; update d1 and skip terminator
     570/    226C : 6152                	bsr.s 	VDP_ClearScreen
     571/    226E :                     .continue:
     572/    226E : 3A41                	movea.w	d1,a5		; update the array of strings pointer	
     573/    2270 : 302C 0004           	move.w 	4(a4),d0	; get the next string address into d0 6(a4)
     574/    2274 : 4A40                	tst.w	d0			; did d0 pick up an $FFFF terminator?
     575/    2276 : 6B18                	bmi.s	SkipTerminator	; if yes, update strings skipping terminator
     576/    2278 :                     Continue:
     577/    2278 : 9041                	sub.w	d1,d0		; get the length by doing the difference
     578/    227A : 5340                	subq.w	#1,d0		; dbf ends up with $FFFF
     579/    227C :                     	; gets string screen position address and sets the plane A accordingly
     580/    227C : 209C                    move.l	(a4)+,(a0)	; 2(a4) to avoid more spent cycles in adding 2 to a4
     581/    227E :                     	
     582/    227E :                     UpdateDisplay:
     583/    227E : 2203                	move.l	d3,d1
     584/    2280 :                     .print_text: ; (30 cycles per loop)
     585/    2280 : 121D                	move.b 	(a5)+,d1
     586/    2282 : 3281                	move.w 	d1,(a1)		; no flip, palette 0, no priority
     587/    2284 : 4E72 2500           	stop	#$2500		; wait for 1 frame (to make the animation)
     588/    2288 : 51C8 FFF6           	dbf	d0,.print_text
     589/    228C : 6000 FF8A           	bra.w	ReadJoypad
     590/    2290 :                     
     591/    2290 :                     SkipTerminator:
     592/    2290 : 302C 0006           	move.w	6(a4),d0		; update d0, skipping the terminator
     593/    2294 : 60E2                	bra.s	Continue
     594/    2296 :                     	
     595/    2296 :                     ; Skips directly to first or last relevant slide using the $FFFF terminators
     596/    2296 :                     NextSlide:
     597/    2296 : B8FC 212C           	cmpa.w	#Slide8+6,a4	; is the boundary limit to avoid going outside the slides being hit?
     598/    229A : 6400 FFB4           	bhs.w	WaitNextFrame	; if yes, do nothing
     599/    229E :                     .find_terminator:
     600/    229E : 4A5C                	tst.w	(a4)+
     601/    22A0 : 6AFC                	bpl.s	.find_terminator
     602/    22A2 : 611C                	bsr.s 	VDP_ClearScreen
     603/    22A4 : 60BE                	bra.s	UpdateStringProperties
     604/    22A6 :                     	
     605/    22A6 :                     PreviousSlide:
     606/    22A6 : B8FC 1E18           	cmpa.w	#Slide0+8,a4	; is the boundary limit to avoid going outside the slides being hit?
     607/    22AA : 6300 FFA4           	bls.w	WaitNextFrame	; if yes, do nothing
     608/    22AE :                     .find_terminator:
     609/    22AE : 4A64                	tst.w	-(a4)				; test until we find the terminator
     610/    22B0 : 6AFC                	bpl.s	.find_terminator	; terminator is $FFFF so it's negative
     611/    22B2 :                     .find_secondterminator:
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 171 - 7/13/2025 17:28:33


     612/    22B2 : 4A64                	tst.w	-(a4)				; find the next terminator
     613/    22B4 : 6AFC                	bpl.s	.find_secondterminator
     614/    22B6 : 6108                	bsr.s 	VDP_ClearScreen
     615/    22B8 : 60AA                	bra.s	UpdateStringProperties
     616/    22BA :                     	
     617/    22BA :                     ClearScreen_Alt:
     618/    22BA : 6104                	bsr.s	VDP_ClearScreen
     619/    22BC : 6000 FF92           	bra.w	WaitNextFrame
     620/    22C0 :                     	
     621/    22C0 :                     VDP_ClearScreen:
     622/    22C0 : (MACRO)[3800]       	dmaFillVRAM $00, PLANEA_ADDR, $776, (a0), (a1)
     622/    22C0 :                             
     622/    22C0 : 20BC 940E 93E8              move.l  #dmaCommandLength(2*($776-2)),(a0)
     622/    22C6 : 20BC 8F01 9780              move.l  #(VDPREG_INCR|1)<<16|(VDPREG_DMASRC_H|$80),(a0) ; VRAM pointer increment: $0001, VRAM fill
     622/    22CC :                             ; Forcing the low bit of PLANEA_ADDR to be 1, as described before.
     622/    22CC : 20BC 6001 0083              move.l  #dmaCommand((PLANEA_ADDR)|1,VRAM),(a0)
     622/    22D2 : 32BC 0000                   move.w  #(($00)<<8)|($00),(a1)
     622/    22D6 :                     .wait:
     622/    22D6 : 3410                        move.w  (a0),d2
     622/    22D8 : 0802 0001                   btst    #1,d2
     622/    22DC : 66F8                        bne.s   .wait   ; busy loop until the VDP is finished filling
     622/    22DE : 30BC 8F02                   move.w  #(VDPREG_INCR)|2,(a0) ; VRAM pointer increment back to 2
     623/    22E2 : 4E75                	rts
     624/    22E4 :                     
     625/    22E4 :                     
     626/    22E4 :                     CPU_CrashSystem:
     627/    22E4 : 4EF8 02F6           	jmp	ManualCrash
     628/    22E8 :                     
     629/    22E8 :                     ROM_End
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 172 - 7/13/2025 17:28:33


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                        "i386-unknown-win32" - |
 AddressError :                 214 C | *BlueScreen :                   348 C |
 BusError :                     200 C | *CASESENSITIVE :                  1 - |
 CHKException :                 250 C | *CONSTPI :        3.141592653589793 - |
*CPU_ClearScreen :              328 C |  CPU_ClearScreen.clear_screen : 334 C |
 CPU_CrashSystem :             22E4 C | *CPU_Load_BodyFont :            35E C |
 CPU_Load_BodyFont.load_font :  36C C | *CPU_RegistersDeclaration :    216A C |
 CPU_Wait :                     4E4 C |  CRAM :                    C0000000 - |
*CRAM_DMA_CMD :            C0000080 - | *CRAM_Load_BodyFontPalette :   21E6 C |
*CRAM_SIZE :                     80 - |  ClearScreen_Alt :             22BA C |
 Code0 :                       1CFC C |  Code1 :                       1D07 C |
 Code10 :                      1DB2 C |  Code11 :                      1DC6 C |
 Code12 :                      1DD8 C |  Code13 :                      1DE7 C |
 Code2 :                       1D16 C |  Code3 :                       1D34 C |
 Code4 :                       1D4E C |  Code5 :                       1D5F C |
 Code6 :                       1D70 C |  Code7 :                       1D85 C |
 Code8 :                       1D96 C |  Code9 :                       1DA4 C |
 Codes_End :                   1E01 C |  Continue :                    2278 C |
*DATE :                 "7/13/2025" - | *DMA_Load_BodyFont :           21D0 C |
 DMA_Load_BodyFont.c :            0 - |  DivisionByZero :               23C C |
 EntryPoint :                  216A C |  FALSE :                          0 - |
*FLOATMAX :      1.797693134866E308 - | *FULLPMMU :                       1 - |
 GenericError :                 2E4 C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HFLIP :                        800 - | *HIPRI :                       8000 - |
 HSCROLL_ADDR :                FFFF - | *HVFLIP :                      1800 - |
 Halt_CPU :                     4EE C | *Header_Start :                 100 C |
*INSUPMODE :                      1 - |  IllegalInstruction :           228 C |
 JOY_B :                          4 - |  JOY_C :                          5 - |
 JOY_CTRL :                  A10009 - |  JOY_D :                          1 - |
 JOY_DATA :                  A10003 - |  JOY_L :                          2 - |
 JOY_R :                          3 - | *JOY_Setup :                   21CC C |
 JOY_U :                          0 - | *LISTON :                         3 - |
*LOPRI :                          0 - |  Line1010Emu :                  29C C |
 Line1111Emu :                  2AE C | *MACEXP :                         7 - |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
 ManualCrash :                  2F6 C |  Message0 :                    1C7B C |
 Message1 :                    1C9D C |  Message2 :                    1CB6 C |
 Message3 :                    1CCF C |  Message4 :                    1CEF C |
 Message5 :                    1E01 C |  Messages :                    212E C |
*NESTMAX :                      100 - | *NOFLIP :                         0 - |
 NextSlide :                   2296 C |  NextSlide.find_terminator :   229E C |
 NextString :                  225E C | *PADDING :                        1 - |
*PAL0 :                           0 - | *PAL1 :                        2000 - |
*PAL2 :                        4000 - | *PAL3 :                        6000 - |
 PAT_BodyFont :                 4F4 C |  PAT_BodyFont_SIZE_B :          C00 - |
*PAT_BodyFont_SIZE_T :           60 - |  PLANEA_ADDR :                 E000 - |
 PLANEB_ADDR :                 FFFF - |  PreviousSlide :               22A6 C |
 PreviousSlide.find_secondterminator :                                 22B2 C |
 PreviousSlide.find_terminator :                                       22AE C |
*PrintErrorCode :               3A8 C |  PrintErrorCode.continue :      3BA C |
*PrintMessages :                372 C |  PrintMessages.setup_message :  37C C |
*PrintRegisterDump :            3F0 C |  PrintRegisterDump.continue :   45E C |
*PrintRegisterDump.print_address_registers :                            480 C |
*PrintRegisterDump.print_message :                                      3F0 C |
 PrintRegisterDump.print_prefix :                                       438 C |
 PrintRegisterDump.print_registers :                                    434 C |
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 173 - 7/13/2025 17:28:33


 PrintRegisterDump.print_sp :   4A2 C |  PrintRegisterDump.print_sr :   4B8 C |
 PrintRegisterDump.print_value :                                        44E C |
*PrintTextCode :                3C4 C |  PrivilegeViolation :           278 C |
 REG_DUMP :                  FF0000 - |  REG_PREFIXES :              FF0042 - |
*RELAXED :                        0 - |  ROM_End :                     22E8 C |
 ROM_Start :                      0 C |  ReadJoypad :                  2218 C |
 RedrawSlide :                 2256 C |  RedrawSlide.find_terminator : 2256 C |
 SPRITE_ADDR :                 FFFF - |  STR_Properties :              1E10 C |
*STR_Strings :                 10F4 C |  SYS_STACK :                      0 - |
 SkipTerminator :              2290 C |  Slide0 :                      1E10 C |
*Slide1 :                      1E4E C | *Slide2 :                      1E92 C |
*Slide3 :                      1F06 C | *Slide4 :                      1F6E C |
*Slide5 :                      1FCA C | *Slide6 :                      2074 C |
*Slide7 :                      2118 C |  Slide8 :                      2126 C |
 SpuriousException :            2C0 C |  String0 :                     10F4 C |
 String1 :                     1114 C |  String10 :                    1227 C |
 String100 :                   199F C |  String101 :                   19BA C |
 String102 :                   19E2 C |  String103 :                   19FD C |
 String104 :                   1A1A C |  String105 :                   1A3A C |
 String106 :                   1A61 C |  String107 :                   1A88 C |
 String108 :                   1AA9 C |  String109 :                   1ACA C |
 String11 :                    124B C |  String110 :                   1AEB C |
 String111 :                   1B0C C |  String112 :                   1B33 C |
 String113 :                   1B5B C |  String114 :                   1B83 C |
 String115 :                   1B8F C |  String116 :                   1B9A C |
 String117 :                   1BAD C |  String118 :                   1BBA C |
 String119 :                   1BC8 C |  String12 :                    126E C |
 String120 :                   1BD5 C |  String121 :                   1BE4 C |
 String122 :                   1BF1 C |  String123 :                   1C03 C |
 String124 :                   1C11 C |  String125 :                   1C33 C |
 String126 :                   1C42 C |  String127 :                   1C52 C |
 String128 :                   1C5A C |  String129 :                   1C71 C |
 String13 :                    128D C |  String14 :                    12B5 C |
 String15 :                    12C2 C |  String16 :                    12DE C |
 String17 :                    12F6 C |  String18 :                    130D C |
 String19 :                    131F C |  String2 :                     113C C |
 String20 :                    1337 C |  String21 :                    134F C |
 String22 :                    136B C |  String23 :                    138E C |
 String24 :                    13AE C |  String25 :                    13C5 C |
 String26 :                    13E6 C |  String27 :                    140E C |
 String28 :                    1429 C |  String29 :                    143F C |
 String3 :                     115D C |  String30 :                    144C C |
 String31 :                    145F C |  String32 :                    146D C |
 String33 :                    1486 C |  String34 :                    1493 C |
 String35 :                    149F C |  String36 :                    14B7 C |
 String37 :                    14DD C |  String38 :                    1500 C |
 String39 :                    1518 C |  String4 :                     1177 C |
 String40 :                    1537 C |  String41 :                    154E C |
 String42 :                    156C C |  String43 :                    1586 C |
 String44 :                    158C C |  String45 :                    15A3 C |
 String46 :                    15BE C |  String47 :                    15D4 C |
 String48 :                    15EE C |  String49 :                    15F3 C |
 String5 :                     1184 C |  String50 :                    15F9 C |
 String51 :                    1615 C |  String52 :                    1620 C |
 String53 :                    162B C |  String54 :                    163D C |
 String55 :                    164B C |  String56 :                    1651 C |
 String57 :                    165A C |  String58 :                    1671 C |
 String59 :                    1693 C |  String6 :                     11AC C |
 String60 :                    16B4 C |  String61 :                    16BA C |
 String62 :                    16D8 C |  String63 :                    16EA C |
 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 174 - 7/13/2025 17:28:33


 String64 :                    16F0 C |  String65 :                    170C C |
 String66 :                    172E C |  String67 :                    174D C |
 String68 :                    176E C |  String69 :                    1786 C |
 String7 :                     11C7 C |  String70 :                    17A9 C |
 String71 :                    17BE C |  String72 :                    17C3 C |
 String73 :                    17DE C |  String74 :                    17F5 C |
 String75 :                    17FF C |  String76 :                    1815 C |
 String77 :                    1820 C |  String78 :                    182D C |
 String79 :                    1838 C |  String8 :                     11EF C |
 String80 :                    1843 C |  String81 :                    1856 C |
 String82 :                    1863 C |  String83 :                    186C C |
 String84 :                    1890 C |  String85 :                    189F C |
 String86 :                    18B7 C |  String87 :                    18C8 C |
 String88 :                    18D7 C |  String89 :                    18E5 C |
 String9 :                     1214 C |  String90 :                    18F5 C |
 String91 :                    1904 C |  String92 :                    1912 C |
 String93 :                    1920 C |  String94 :                    192F C |
 String95 :                    193B C |  String96 :                    195C C |
 String97 :                    1969 C |  String98 :                    197A C |
 String99 :                    198B C | *Strings :                     10F4 C |
*Strings_End :                 1E10 C | *TIME :                  "17:28:33" - |
 TRACEException :               28A C |  TRAPVException :               264 C |
*TRAPxxException :              2D2 C | *TRUE :                           1 - |
 TextCodes :                   214C C | *UpdateDisplay :               227E C |
 UpdateDisplay.print_text :    2280 C |  UpdateStringProperties :      2264 C |
 UpdateStringProperties.continue :                                     226E C |
 VDPREG_BGCOL :                8700 - |  VDPREG_DMALEN_H :             9400 - |
*VDPREG_DMALEN_L :             9300 - |  VDPREG_DMASRC_H :             9700 - |
*VDPREG_DMASRC_L :             9500 - |  VDPREG_DMASRC_M :             9600 - |
 VDPREG_HRATE :                8A00 - |  VDPREG_HSCROLL :              8D00 - |
 VDPREG_INCR :                 8F00 - |  VDPREG_MODE1 :                8000 - |
 VDPREG_MODE2 :                8100 - |  VDPREG_MODE3 :                8B00 - |
 VDPREG_MODE4 :                8C00 - |  VDPREG_PLANEA :               8200 - |
 VDPREG_PLANEB :               8400 - |  VDPREG_SIZE :                 9000 - |
 VDPREG_SPRITE :               8500 - |  VDPREG_WINDOW :               8300 - |
 VDPREG_WINX :                 9100 - |  VDPREG_WINY :                 9200 - |
 VDP_BSOD :                     306 C |  VDP_CTRL :                  C00004 - |
 VDP_ClearScreen :             22C0 C |  VDP_DATA :                  C00000 - |
*VDP_HVCOUNTER :             C00008 - |  VDP_PrintText :                4D4 C |
 VDP_PrintText.update_display : 4D6 C | *VDP_Setup :                   218E C |
 VDP_VBlankInt :                4F2 C | *VERSION :                     142F - |
*VFLIP :                       1000 - |  VRAM :                    40000000 - |
*VRAM_DMA_CMD :            40000080 - | *VRAM_SIZE :                  10000 - |
*VSRAM :                   40000010 - | *VSRAM_DMA_CMD :           40000090 - |
*VSRAM_SIZE :                    50 - | *Vectors :                        0 C |
 WINDOW_ADDR :                 FFFF - | *WRAM_ADDR :                 FF0000 - |
*WRAM_SIZE :                  10000 - |  WaitNextFrame :               2250 C |
*Z80BusReq :                 A11100 - | *Z80Ram :                    A00000 - |
*Z80Reset :                  A11200 - |  address :                     E304 - |
 i :                              F - |

    324 symbols
     74 unused symbols

 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 175 - 7/13/2025 17:28:33


  Defined Macros:
  ---------------

VRAMCoordinates                       | addaq                                
dfntxt                                | dma68kToVDP                          
dmaCopyVRAM                           | dmaFillVRAM                          
setRAMAddress                         | subaq                                
vdpSetColorAddress                    | vdpSetColorSpace                     
vdpSetVerticalScrollAddress           | vdpSetVideoAddress                   
vdpSetVideoSpace                      |

     13 macros

 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 176 - 7/13/2025 17:28:33


  Defined Functions:
  ------------------

vdpCoordinates                        | dmaCommandSrcHigh                    
dmaCommandSrcLow                      | dmaCommandLength                     
dmaLength                             | dmaSource                            
dmaCommand                            | vdpCommand                           
char                                  | chars                                

 AS V1.42 Beta [Bld 290] - Source File Sonic.asm - Page 177 - 7/13/2025 17:28:33


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.14 seconds assembly time

   2293 lines source file
  10256 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
