; Declaration of text
Strings:

	String0: 	dfntxt "Systems Presentation: 68k vs x86"
	String1: 	dfntxt "In today's lesson we are going to cover:"
	String2: 	dfntxt "- Motorola 68000, a 16/32-bit CPU"
	String3: 	dfntxt "- Intel 8086, a 16-bit CPU"
	String4: 	dfntxt "Which topics?"
	String5: 	dfntxt "- Introduction to both CPUs (age, specs)"
	String6: 	dfntxt "- Compare the architectures"
	String7: 	dfntxt "- Instruction set differences (assembly)"
	String8: 	dfntxt "- Some practice (coding with the 68k)"
	String9: 	dfntxt "- Conclusions (Q&A)"

	String10: 	dfntxt "Looking Towards the 8086's Backstory"
	String11:	dfntxt "Launched: 1978 - Discontinued: 1998"
	String12:	dfntxt "It raised the x86 architecture,"
	String13:	dfntxt "which is what we use today on computers."
	String14:	dfntxt "For the time,"
	String15:	dfntxt "the original IBM PC used it."
	String16:	dfntxt "Technical Specifications"
	String17:	dfntxt "Instruction set: x86-16"
	String18:	dfntxt "Transistors: 29000"
	String19:	dfntxt "Technology node: 3000 nm"
	String20:	dfntxt "Clock ranges: 5 - 10 MHz"

	String21:	dfntxt "The History Behind the 68000"
	String22:	dfntxt "Launched: 1979 - Discontinued: 1996"
	String23:	dfntxt "It lies on its own architecture,"
	String24:	dfntxt "the Motorola 68000 one,"
	String25:	dfntxt "which is a still-in-use standard."
	String26:	dfntxt "It was widely used in GUI PCs, including"
	String27:	dfntxt "several Macintosh machines,"
	String28:	dfntxt "the (Commodore) Amiga,"
	String29:	dfntxt "the Atari ST,"
	String30:	dfntxt "the (Sharp) X68000."
	String31:	dfntxt "You know what?"
	String32:	dfntxt "This videogame console is"
	String33:	dfntxt "being powered"
	String34:	dfntxt "by this CPU!"
	String35:	dfntxt "Technical Specifications"
	String36:	dfntxt "Instruction set: Motorola 68000 series"
	String37:	dfntxt "Transistors: 68000 (hence the name)"
	String38:	dfntxt "Technology node: 3500 nm"
	String39:	dfntxt "Clock ranges: 4 MHz - 16,67 MHz"

	String40:	dfntxt "Architecture Comparison"
	String41:	dfntxt "Intel 8086 Contents and Syntax"
	String42:	dfntxt "General purpose registers:"
	String43:	dfntxt "16-bit"
	String44:	dfntxt "AX    [BX]    CX     DX"
	String45:	dfntxt "|____| |____| |____| |____|"
	String46:	dfntxt "|      |      |      |"
	String47:	dfntxt "AH AL  BH BL  CH CL  DH DL"
	String48:	dfntxt "8-bit"
	String49:	dfntxt "16-bit"
	String50:	dfntxt "[SI]  [DI]  [BP]  [SP]  [IP]"
	String51:	dfntxt "MOV BX,0200"
	String52:	dfntxt "MOV AX,[BX]"
	String53:	dfntxt "Segment registers:"
	String54:	dfntxt "CS  DS  SS  ES"
	String55:	dfntxt "Flags:"
	String56:	dfntxt "ODITSZAPC"

	String57:	dfntxt "Architecture Comparison"
	String58:	dfntxt "Motorola 68000 Contents and Syntax"
	String59:	dfntxt "Data registers (general purpose):"
	String60:	dfntxt "32-bit"
	String61:	dfntxt "d0  d1  d2  d3  d4  d5  d6  d7"
	String62:	dfntxt "Address registers:"
	String63:	dfntxt "32-bit"
	String64:	dfntxt "(a0)(a1)(a2)(a3)(a4)(a5)(a6)"
	String65:	dfntxt "(a7) -> (sp) - not general purpose"
	String66:	dfntxt "(ss)(us) - not really necessary"
	String67:	dfntxt "(pc) - basically the same as [IP]"
	String68:	dfntxt "Note: for addressing the"
	String69:	dfntxt "round brackets () are used instead."
	String70:	dfntxt "Flags (register ccr):"
	String71:	dfntxt "XNZVC"

	String72:	dfntxt "Instruction Set Differences"
	String73:	dfntxt "How to MOVe data around"
	String74:	dfntxt "Intel 8086"
	String75:	dfntxt "16-bit values (0-FFFF)"
	String76:	dfntxt "MOV CX,37D5"
	String77:	dfntxt "MOV [F600],DX"
	String78:	dfntxt "MOV BX,[BX]"
	String79:	dfntxt "MOV [SI],CX"
	String80:	dfntxt "8-bit values (0-FF)"
	String81:	dfntxt "MOV AL,[0AC0]"
	String82:	dfntxt "MOV DL,AX"
	String83:	dfntxt "However, there are some limitations:"
	String84:	dfntxt "MOV [0200],A03B"
	String85:	dfntxt "-> must specify the size"
	String86:	dfntxt "MOV [0000],[0100]"
	String87:	dfntxt "-> not possible"
	String88:	dfntxt "Motorola 68000"
	String89:	dfntxt "move.w #$37D5,d1"
	String90:	dfntxt "move.w d4,$F600"
	String91:	dfntxt "move.w (a0),a0"
	String92:	dfntxt "move.w (a1),d1"
	String93:	dfntxt "move.b $0AC0,d0"
	String94:	dfntxt "move.b d2,d0"
	String95:	dfntxt "In 68k architecture, these limits"
	String96:	dfntxt "do not exist!"
	String97:	dfntxt "If you noticed..."
	String98:	dfntxt "MOV *dest*,*sour*"
	String99:	dfntxt "move.w *sour*,*dest*"

	String100:	dfntxt "Instruction Set Differences"
	String101:	dfntxt "68k compiler syntax and additional notes"
	String102:	dfntxt "Operand sizes (e.g. move.l)"
	String103:	dfntxt ".b: byte = 255 values (8-bit)"
	String104:	dfntxt ".w: word = 65536 values (16-bit)"
	String105:	dfntxt ".l: long = 4294967296 values! (32-bit!)"
	String106:	dfntxt "Immediate values (e.g. move.w #1234,d0)"
	String107:	dfntxt "#  -> decimal number (#264873781)"
	String108:	dfntxt "#$ -> hexadecimal number (#$ABCD)"
	String109:	dfntxt "#% -> binary number (#%110100101)"
	String110:	dfntxt "Addressing (e.g. move.l d0,$E010)"
	String111:	dfntxt "$ -> refer to memory space with address"
	String112:	dfntxt "()-> refer to memory space with register"
	String113:	dfntxt "This CPU is a little inefficient, though"
	String114:	dfntxt "move.l d0,d1"
	String115:	dfntxt "-> 4 cycles"
	String116:	dfntxt "move.l #12345678,d0"
	String117:	dfntxt "-> 12 cycles!"
	String118:	dfntxt "move.l d0,(a0)"
	String119:	dfntxt "-> 12 cycles!"
	String120:	dfntxt "move.l d0,$xxxx"
	String121:	dfntxt "-> 16 cycles!"
	String122:	dfntxt "move.l $xxxx,$xxxx"
	String123:	dfntxt "-> 28 cycles!!"
	String124:	dfntxt "and for the worst case scenario..."
	String125:	dfntxt "divs.w $xxxx,d0"
	String126:	dfntxt "-> 160 CYCLES!!!"

	String127:	dfntxt "And now,"
	String128:	dfntxt "let's do some practice!"

	String129:	dfntxt "Thank You!"
;==========================================================
	Message0:	dfntxt "Unfortunately, the Sega Mega Drive"
	Message1:	dfntxt "has crashed! I'm sorry :("
	Message2:	dfntxt "If you want to know more,"
	Message3:	dfntxt "there's some useful information:"
	Message4:	dfntxt "STOP_CODE: 0x"
	
	Code0:	dfntxt "(BUS_ERROR)"
	Code1:	dfntxt "(ADDRESS_ERROR)"
	Code2:	dfntxt "(ILLEGALINSTRUCTION_EXCEPTION)"
	Code3:	dfntxt "(DIVISIONBYZERO_EXCEPTION)"
	Code4:	dfntxt "(CHECK_EXCEPTION)"
	Code5:	dfntxt "(TRAPV_EXCEPTION)"
	Code6:	dfntxt "(PRIVILEGE_VIOLATION)"
	Code7:	dfntxt "(TRACE_EXCEPTION)"
	Code8:	dfntxt "(LINE1010_EMU)"
	Code9:	dfntxt "(LINE1111_EMU)"
	Code10:	dfntxt "(SPURIOUS_EXCEPTION)"
	Code11:	dfntxt "(TRAPxx_EXCEPTION)"
	Code12:	dfntxt "(UNKNOWN_ERROR)"
	Code13:	dfntxt "(MANUALLY_INITIATED_CRASH)"
	
Codes_End

	Message5:	dfntxt "Registers dump:"

Strings_End